ARM GAS  /tmp/ccClG7BW.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"socket.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "BSP/socket.c"
  18              		.section	.text.close,"ax",%progbits
  19              		.align	1
  20              		.global	close
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	close:
  26              	.LVL0:
  27              	.LFB1:
   1:BSP/socket.c  **** //*****************************************************************************
   2:BSP/socket.c  **** //
   3:BSP/socket.c  **** //! \file socket.c
   4:BSP/socket.c  **** //! \brief SOCKET APIs Implements file.
   5:BSP/socket.c  **** //! \details SOCKET APIs like as Berkeley Socket APIs. 
   6:BSP/socket.c  **** //! \version 1.0.3
   7:BSP/socket.c  **** //! \date 2013/10/21
   8:BSP/socket.c  **** //! \par  Revision history
   9:BSP/socket.c  **** //!       <2015/02/05> Notice
  10:BSP/socket.c  **** //!        The version history is not updated after this point.
  11:BSP/socket.c  **** //!        Download the latest version directly from GitHub. Please visit the our GitHub repository
  12:BSP/socket.c  **** //!        >> https://github.com/Wiznet/ioLibrary_Driver
  13:BSP/socket.c  **** //!       <2014/05/01> V1.0.3. Refer to M20140501
  14:BSP/socket.c  **** //!         1. Implicit type casting -> Explicit type casting.
  15:BSP/socket.c  **** //!         2. replace 0x01 with PACK_REMAINED in recvfrom()
  16:BSP/socket.c  **** //!         3. Validation a destination ip in connect() & sendto(): 
  17:BSP/socket.c  **** //!            It occurs a fatal error on converting unint32 address if uint8* addr parameter is no
  18:BSP/socket.c  **** //!            Copy 4 byte addr value into temporary uint32 variable and then compares it.
  19:BSP/socket.c  **** //!       <2013/12/20> V1.0.2 Refer to M20131220
  20:BSP/socket.c  **** //!                    Remove Warning.
  21:BSP/socket.c  **** //!       <2013/11/04> V1.0.1 2nd Release. Refer to "20131104".
  22:BSP/socket.c  **** //!                    In sendto(), Add to clear timeout interrupt status (Sn_IR_TIMEOUT)
  23:BSP/socket.c  **** //!       <2013/10/21> 1st Release
  24:BSP/socket.c  **** //! \author MidnightCow
  25:BSP/socket.c  **** //! \copyright
  26:BSP/socket.c  **** //!
  27:BSP/socket.c  **** //! Copyright (c)  2013, WIZnet Co., LTD.
  28:BSP/socket.c  **** //! All rights reserved.
  29:BSP/socket.c  **** //! 
  30:BSP/socket.c  **** //! Redistribution and use in source and binary forms, with or without 
  31:BSP/socket.c  **** //! modification, are permitted provided that the following conditions 
ARM GAS  /tmp/ccClG7BW.s 			page 2


  32:BSP/socket.c  **** //! are met: 
  33:BSP/socket.c  **** //! 
  34:BSP/socket.c  **** //!     * Redistributions of source code must retain the above copyright 
  35:BSP/socket.c  **** //! notice, this list of conditions and the following disclaimer. 
  36:BSP/socket.c  **** //!     * Redistributions in binary form must reproduce the above copyright
  37:BSP/socket.c  **** //! notice, this list of conditions and the following disclaimer in the
  38:BSP/socket.c  **** //! documentation and/or other materials provided with the distribution. 
  39:BSP/socket.c  **** //!     * Neither the name of the <ORGANIZATION> nor the names of its 
  40:BSP/socket.c  **** //! contributors may be used to endorse or promote products derived 
  41:BSP/socket.c  **** //! from this software without specific prior written permission. 
  42:BSP/socket.c  **** //! 
  43:BSP/socket.c  **** //! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  44:BSP/socket.c  **** //! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  45:BSP/socket.c  **** //! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  46:BSP/socket.c  **** //! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
  47:BSP/socket.c  **** //! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
  48:BSP/socket.c  **** //! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  49:BSP/socket.c  **** //! SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  50:BSP/socket.c  **** //! INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  51:BSP/socket.c  **** //! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  52:BSP/socket.c  **** //! ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
  53:BSP/socket.c  **** //! THE POSSIBILITY OF SUCH DAMAGE.
  54:BSP/socket.c  **** //
  55:BSP/socket.c  **** //*****************************************************************************
  56:BSP/socket.c  **** #include "socket.h"
  57:BSP/socket.c  **** 
  58:BSP/socket.c  **** //M20150401 : Typing Error
  59:BSP/socket.c  **** //#define SOCK_ANY_PORT_NUM  0xC000;
  60:BSP/socket.c  **** #define SOCK_ANY_PORT_NUM  0xC000
  61:BSP/socket.c  **** 
  62:BSP/socket.c  **** static uint16_t sock_any_port = SOCK_ANY_PORT_NUM;
  63:BSP/socket.c  **** static uint16_t sock_io_mode = 0;
  64:BSP/socket.c  **** static uint16_t sock_is_sending = 0;
  65:BSP/socket.c  **** 
  66:BSP/socket.c  **** static uint16_t sock_remained_size[_WIZCHIP_SOCK_NUM_] = {0,0,};
  67:BSP/socket.c  **** 
  68:BSP/socket.c  **** //M20150601 : For extern decleation
  69:BSP/socket.c  **** //static uint8_t  sock_pack_info[_WIZCHIP_SOCK_NUM_] = {0,};
  70:BSP/socket.c  **** uint8_t  sock_pack_info[_WIZCHIP_SOCK_NUM_] = {0,};
  71:BSP/socket.c  **** //
  72:BSP/socket.c  **** 
  73:BSP/socket.c  **** #if _WIZCHIP_ == 5200
  74:BSP/socket.c  ****    static uint16_t sock_next_rd[_WIZCHIP_SOCK_NUM_] ={0,};
  75:BSP/socket.c  **** #endif
  76:BSP/socket.c  **** 
  77:BSP/socket.c  **** //A20150601 : For integrating with W5300
  78:BSP/socket.c  **** #if _WIZCHIP_ == 5300
  79:BSP/socket.c  ****    uint8_t sock_remained_byte[_WIZCHIP_SOCK_NUM_] = {0,}; // set by wiz_recv_data()
  80:BSP/socket.c  **** #endif
  81:BSP/socket.c  **** 
  82:BSP/socket.c  **** 
  83:BSP/socket.c  **** #define CHECK_SOCKNUM()   \
  84:BSP/socket.c  ****    do{                    \
  85:BSP/socket.c  ****       if(sn > _WIZCHIP_SOCK_NUM_) return SOCKERR_SOCKNUM;   \
  86:BSP/socket.c  ****    }while(0);             \
  87:BSP/socket.c  **** 
  88:BSP/socket.c  **** #define CHECK_SOCKMODE(mode)  \
ARM GAS  /tmp/ccClG7BW.s 			page 3


  89:BSP/socket.c  ****    do{                     \
  90:BSP/socket.c  ****       if((getSn_MR(sn) & 0x0F) != mode) return SOCKERR_SOCKMODE;  \
  91:BSP/socket.c  ****    }while(0);              \
  92:BSP/socket.c  **** 
  93:BSP/socket.c  **** #define CHECK_SOCKINIT()   \
  94:BSP/socket.c  ****    do{                     \
  95:BSP/socket.c  ****       if((getSn_SR(sn) != SOCK_INIT)) return SOCKERR_SOCKINIT; \
  96:BSP/socket.c  ****    }while(0);              \
  97:BSP/socket.c  **** 
  98:BSP/socket.c  **** #define CHECK_SOCKDATA()   \
  99:BSP/socket.c  ****    do{                     \
 100:BSP/socket.c  ****       if(len == 0) return SOCKERR_DATALEN;   \
 101:BSP/socket.c  ****    }while(0);              \
 102:BSP/socket.c  **** 
 103:BSP/socket.c  **** 
 104:BSP/socket.c  **** 
 105:BSP/socket.c  **** int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
 106:BSP/socket.c  **** {
 107:BSP/socket.c  **** 	CHECK_SOCKNUM();
 108:BSP/socket.c  **** 	switch(protocol)
 109:BSP/socket.c  **** 	{
 110:BSP/socket.c  ****       case Sn_MR_TCP :
 111:BSP/socket.c  ****          {
 112:BSP/socket.c  ****             //M20150601 : Fixed the warning - taddr will never be NULL
 113:BSP/socket.c  **** 		    /*
 114:BSP/socket.c  ****             uint8_t taddr[4];
 115:BSP/socket.c  ****             getSIPR(taddr);
 116:BSP/socket.c  ****             */
 117:BSP/socket.c  ****             uint32_t taddr;
 118:BSP/socket.c  ****             getSIPR((uint8_t*)&taddr);
 119:BSP/socket.c  ****             if(taddr == 0) return SOCKERR_SOCKINIT;
 120:BSP/socket.c  **** 	    break;
 121:BSP/socket.c  ****          }
 122:BSP/socket.c  ****       case Sn_MR_UDP :
 123:BSP/socket.c  ****       case Sn_MR_MACRAW :
 124:BSP/socket.c  **** 	  case Sn_MR_IPRAW :
 125:BSP/socket.c  ****          break;
 126:BSP/socket.c  ****    #if ( _WIZCHIP_ < 5200 )
 127:BSP/socket.c  ****       case Sn_MR_PPPoE :
 128:BSP/socket.c  ****          break;
 129:BSP/socket.c  ****    #endif
 130:BSP/socket.c  ****       default :
 131:BSP/socket.c  ****          return SOCKERR_SOCKMODE;
 132:BSP/socket.c  **** 	}
 133:BSP/socket.c  **** 	//M20150601 : For SF_TCP_ALIGN & W5300
 134:BSP/socket.c  **** 	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 135:BSP/socket.c  **** 	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 136:BSP/socket.c  **** #if _WIZCHIP_ == 5200
 137:BSP/socket.c  ****    if(flag & 0x10) return SOCKERR_SOCKFLAG;
 138:BSP/socket.c  **** #endif
 139:BSP/socket.c  **** 	   
 140:BSP/socket.c  **** 	if(flag != 0)
 141:BSP/socket.c  **** 	{
 142:BSP/socket.c  ****    	switch(protocol)
 143:BSP/socket.c  ****    	{
 144:BSP/socket.c  ****    	   case Sn_MR_TCP:
 145:BSP/socket.c  ****    		  //M20150601 :  For SF_TCP_ALIGN & W5300
ARM GAS  /tmp/ccClG7BW.s 			page 4


 146:BSP/socket.c  ****           #if _WIZCHIP_ == 5300
 147:BSP/socket.c  ****    		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 148:BSP/socket.c  ****           #else
 149:BSP/socket.c  ****    		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 150:BSP/socket.c  ****           #endif
 151:BSP/socket.c  **** 
 152:BSP/socket.c  ****    	      break;
 153:BSP/socket.c  ****    	   case Sn_MR_UDP:
 154:BSP/socket.c  ****    	      if(flag & SF_IGMP_VER2)
 155:BSP/socket.c  ****    	      {
 156:BSP/socket.c  ****    	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 157:BSP/socket.c  ****    	      }
 158:BSP/socket.c  ****    	      #if _WIZCHIP_ == 5500
 159:BSP/socket.c  ****       	      if(flag & SF_UNI_BLOCK)
 160:BSP/socket.c  ****       	      {
 161:BSP/socket.c  ****       	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 162:BSP/socket.c  ****       	      }
 163:BSP/socket.c  ****    	      #endif
 164:BSP/socket.c  ****    	      break;
 165:BSP/socket.c  ****    	   default:
 166:BSP/socket.c  ****    	      break;
 167:BSP/socket.c  ****    	}
 168:BSP/socket.c  ****    }
 169:BSP/socket.c  **** 	close(sn);
 170:BSP/socket.c  **** 	//M20150601
 171:BSP/socket.c  **** 	#if _WIZCHIP_ == 5300
 172:BSP/socket.c  **** 	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 173:BSP/socket.c  ****     #else
 174:BSP/socket.c  **** 	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 175:BSP/socket.c  ****     #endif
 176:BSP/socket.c  **** 	if(!port)
 177:BSP/socket.c  **** 	{
 178:BSP/socket.c  **** 	   port = sock_any_port++;
 179:BSP/socket.c  **** 	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 180:BSP/socket.c  **** 	}
 181:BSP/socket.c  ****    setSn_PORT(sn,port);	
 182:BSP/socket.c  ****    setSn_CR(sn,Sn_CR_OPEN);
 183:BSP/socket.c  ****    while(getSn_CR(sn));
 184:BSP/socket.c  ****    //A20150401 : For release the previous sock_io_mode
 185:BSP/socket.c  ****    sock_io_mode &= ~(1 <<sn);
 186:BSP/socket.c  ****    //
 187:BSP/socket.c  **** 	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 188:BSP/socket.c  ****    sock_is_sending &= ~(1<<sn);
 189:BSP/socket.c  ****    sock_remained_size[sn] = 0;
 190:BSP/socket.c  ****    //M20150601 : repalce 0 with PACK_COMPLETED
 191:BSP/socket.c  ****    //sock_pack_info[sn] = 0;
 192:BSP/socket.c  ****    sock_pack_info[sn] = PACK_COMPLETED;
 193:BSP/socket.c  ****    //
 194:BSP/socket.c  ****    while(getSn_SR(sn) == SOCK_CLOSED);
 195:BSP/socket.c  ****    return (int8_t)sn;
 196:BSP/socket.c  **** }	   
 197:BSP/socket.c  **** 
 198:BSP/socket.c  **** int8_t close(uint8_t sn)
 199:BSP/socket.c  **** {
  28              		.loc 1 199 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccClG7BW.s 			page 5


  31              		@ frame_needed = 0, uses_anonymous_args = 0
 200:BSP/socket.c  **** 	CHECK_SOCKNUM();
  32              		.loc 1 200 2 view .LVU1
  33              		.loc 1 200 2 view .LVU2
  34 0000 0828     		cmp	r0, #8
  35 0002 02D9     		bls	.L10
  36              		.loc 1 200 2 is_stmt 0 discriminator 1 view .LVU3
  37 0004 4FF0FF30 		mov	r0, #-1
  38              	.LVL1:
 201:BSP/socket.c  **** //A20160426 : Applied the erratum 1 of W5300
 202:BSP/socket.c  **** #if   (_WIZCHIP_ == 5300) 
 203:BSP/socket.c  ****    //M20160503 : Wrong socket parameter. s -> sn 
 204:BSP/socket.c  ****    //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
 205:BSP/socket.c  ****    if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 206:BSP/socket.c  ****    { 
 207:BSP/socket.c  ****       uint8_t destip[4] = {0, 0, 0, 1};
 208:BSP/socket.c  ****       // TODO
 209:BSP/socket.c  ****       // You can wait for completing to sending data;
 210:BSP/socket.c  ****       // wait about 1 second;
 211:BSP/socket.c  ****       // if you have completed to send data, skip the code of erratum 1
 212:BSP/socket.c  ****       // ex> wait_1s();
 213:BSP/socket.c  ****       //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
 214:BSP/socket.c  ****       // 
 215:BSP/socket.c  ****       //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop 
 216:BSP/socket.c  ****       //socket(s,Sn_MR_UDP,0x3000,0);
 217:BSP/socket.c  ****       //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1)
 218:BSP/socket.c  ****       setSn_MR(sn,Sn_MR_UDP);
 219:BSP/socket.c  ****       setSn_PORTR(sn, 0x3000);
 220:BSP/socket.c  ****       setSn_CR(sn,Sn_CR_OPEN);
 221:BSP/socket.c  ****       while(getSn_CR(sn) != 0);
 222:BSP/socket.c  ****       while(getSn_SR(sn) != SOCK_UDP);
 223:BSP/socket.c  ****       sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 224:BSP/socket.c  ****    };   
 225:BSP/socket.c  **** #endif 
 226:BSP/socket.c  **** 	setSn_CR(sn,Sn_CR_CLOSE);
 227:BSP/socket.c  ****    /* wait to process the command... */
 228:BSP/socket.c  **** 	while( getSn_CR(sn) );
 229:BSP/socket.c  **** 	/* clear all interrupt of the socket. */
 230:BSP/socket.c  **** 	setSn_IR(sn, 0xFF);
 231:BSP/socket.c  **** 	//A20150401 : Release the sock_io_mode of socket n.
 232:BSP/socket.c  **** 	sock_io_mode &= ~(1<<sn);
 233:BSP/socket.c  **** 	//
 234:BSP/socket.c  **** 	sock_is_sending &= ~(1<<sn);
 235:BSP/socket.c  **** 	sock_remained_size[sn] = 0;
 236:BSP/socket.c  **** 	sock_pack_info[sn] = 0;
 237:BSP/socket.c  **** 	while(getSn_SR(sn) != SOCK_CLOSED);
 238:BSP/socket.c  **** 	return SOCK_OK;
 239:BSP/socket.c  **** }
  39              		.loc 1 239 1 view .LVU4
  40 0008 7047     		bx	lr
  41              	.LVL2:
  42              	.L10:
 199:BSP/socket.c  **** 	CHECK_SOCKNUM();
  43              		.loc 1 199 1 view .LVU5
  44 000a 70B5     		push	{r4, r5, r6, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccClG7BW.s 			page 6


  47              		.cfi_offset 4, -16
  48              		.cfi_offset 5, -12
  49              		.cfi_offset 6, -8
  50              		.cfi_offset 14, -4
  51 000c 0546     		mov	r5, r0
 200:BSP/socket.c  **** 	CHECK_SOCKNUM();
  52              		.loc 1 200 2 is_stmt 1 discriminator 2 view .LVU6
 200:BSP/socket.c  **** 	CHECK_SOCKNUM();
  53              		.loc 1 200 17 discriminator 2 view .LVU7
 226:BSP/socket.c  ****    /* wait to process the command... */
  54              		.loc 1 226 2 view .LVU8
  55 000e 8400     		lsls	r4, r0, #2
  56 0010 0134     		adds	r4, r4, #1
  57 0012 E400     		lsls	r4, r4, #3
  58 0014 04F58076 		add	r6, r4, #256
  59 0018 1021     		movs	r1, #16
  60 001a 3046     		mov	r0, r6
  61              	.LVL3:
 226:BSP/socket.c  ****    /* wait to process the command... */
  62              		.loc 1 226 2 is_stmt 0 view .LVU9
  63 001c FFF7FEFF 		bl	WIZCHIP_WRITE
  64              	.LVL4:
 228:BSP/socket.c  **** 	/* clear all interrupt of the socket. */
  65              		.loc 1 228 2 is_stmt 1 view .LVU10
  66              	.L3:
 228:BSP/socket.c  **** 	/* clear all interrupt of the socket. */
  67              		.loc 1 228 9 discriminator 1 view .LVU11
  68 0020 3046     		mov	r0, r6
  69 0022 FFF7FEFF 		bl	WIZCHIP_READ
  70              	.LVL5:
  71 0026 0028     		cmp	r0, #0
  72 0028 FAD1     		bne	.L3
 230:BSP/socket.c  **** 	//A20150401 : Release the sock_io_mode of socket n.
  73              		.loc 1 230 2 view .LVU12
  74 002a 1F21     		movs	r1, #31
  75 002c 04F50070 		add	r0, r4, #512
  76 0030 FFF7FEFF 		bl	WIZCHIP_WRITE
  77              	.LVL6:
 232:BSP/socket.c  **** 	//
  78              		.loc 1 232 2 view .LVU13
 232:BSP/socket.c  **** 	//
  79              		.loc 1 232 21 is_stmt 0 view .LVU14
  80 0034 0123     		movs	r3, #1
  81 0036 AB40     		lsls	r3, r3, r5
 232:BSP/socket.c  **** 	//
  82              		.loc 1 232 15 view .LVU15
  83 0038 DB43     		mvns	r3, r3
  84 003a 9BB2     		uxth	r3, r3
  85 003c 0A49     		ldr	r1, .L11
  86 003e 0A88     		ldrh	r2, [r1]
  87 0040 1A40     		ands	r2, r2, r3
  88 0042 0A80     		strh	r2, [r1]	@ movhi
 234:BSP/socket.c  **** 	sock_remained_size[sn] = 0;
  89              		.loc 1 234 2 is_stmt 1 view .LVU16
 234:BSP/socket.c  **** 	sock_remained_size[sn] = 0;
  90              		.loc 1 234 18 is_stmt 0 view .LVU17
  91 0044 094A     		ldr	r2, .L11+4
ARM GAS  /tmp/ccClG7BW.s 			page 7


  92 0046 1188     		ldrh	r1, [r2]
  93 0048 0B40     		ands	r3, r3, r1
  94 004a 1380     		strh	r3, [r2]	@ movhi
 235:BSP/socket.c  **** 	sock_pack_info[sn] = 0;
  95              		.loc 1 235 2 is_stmt 1 view .LVU18
 235:BSP/socket.c  **** 	sock_pack_info[sn] = 0;
  96              		.loc 1 235 25 is_stmt 0 view .LVU19
  97 004c 0023     		movs	r3, #0
  98 004e 084A     		ldr	r2, .L11+8
  99 0050 22F81530 		strh	r3, [r2, r5, lsl #1]	@ movhi
 236:BSP/socket.c  **** 	while(getSn_SR(sn) != SOCK_CLOSED);
 100              		.loc 1 236 2 is_stmt 1 view .LVU20
 236:BSP/socket.c  **** 	while(getSn_SR(sn) != SOCK_CLOSED);
 101              		.loc 1 236 21 is_stmt 0 view .LVU21
 102 0054 074A     		ldr	r2, .L11+12
 103 0056 5355     		strb	r3, [r2, r5]
 237:BSP/socket.c  **** 	return SOCK_OK;
 104              		.loc 1 237 2 is_stmt 1 view .LVU22
 105              	.L4:
 237:BSP/socket.c  **** 	return SOCK_OK;
 106              		.loc 1 237 21 discriminator 1 view .LVU23
 237:BSP/socket.c  **** 	return SOCK_OK;
 107              		.loc 1 237 8 is_stmt 0 discriminator 1 view .LVU24
 108 0058 04F54070 		add	r0, r4, #768
 109 005c FFF7FEFF 		bl	WIZCHIP_READ
 110              	.LVL7:
 237:BSP/socket.c  **** 	return SOCK_OK;
 111              		.loc 1 237 21 discriminator 1 view .LVU25
 112 0060 0028     		cmp	r0, #0
 113 0062 F9D1     		bne	.L4
 238:BSP/socket.c  **** }
 114              		.loc 1 238 9 view .LVU26
 115 0064 0120     		movs	r0, #1
 116              		.loc 1 239 1 view .LVU27
 117 0066 70BD     		pop	{r4, r5, r6, pc}
 118              	.L12:
 119              		.align	2
 120              	.L11:
 121 0068 00000000 		.word	sock_io_mode
 122 006c 00000000 		.word	sock_is_sending
 123 0070 00000000 		.word	sock_remained_size
 124 0074 00000000 		.word	sock_pack_info
 125              		.cfi_endproc
 126              	.LFE1:
 128              		.section	.text.socket,"ax",%progbits
 129              		.align	1
 130              		.global	socket
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 135              	socket:
 136              	.LVL8:
 137              	.LFB0:
 106:BSP/socket.c  **** 	CHECK_SOCKNUM();
 138              		.loc 1 106 1 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccClG7BW.s 			page 8


 141              		@ frame_needed = 0, uses_anonymous_args = 0
 107:BSP/socket.c  **** 	switch(protocol)
 142              		.loc 1 107 2 view .LVU29
 107:BSP/socket.c  **** 	switch(protocol)
 143              		.loc 1 107 2 view .LVU30
 144 0000 0828     		cmp	r0, #8
 145 0002 00F29480 		bhi	.L25
 106:BSP/socket.c  **** 	CHECK_SOCKNUM();
 146              		.loc 1 106 1 is_stmt 0 view .LVU31
 147 0006 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 148              	.LCFI1:
 149              		.cfi_def_cfa_offset 24
 150              		.cfi_offset 4, -24
 151              		.cfi_offset 5, -20
 152              		.cfi_offset 6, -16
 153              		.cfi_offset 7, -12
 154              		.cfi_offset 8, -8
 155              		.cfi_offset 14, -4
 156 000a 82B0     		sub	sp, sp, #8
 157              	.LCFI2:
 158              		.cfi_def_cfa_offset 32
 159 000c 0546     		mov	r5, r0
 160 000e 0F46     		mov	r7, r1
 161 0010 9046     		mov	r8, r2
 162 0012 1E46     		mov	r6, r3
 107:BSP/socket.c  **** 	switch(protocol)
 163              		.loc 1 107 2 is_stmt 1 discriminator 2 view .LVU32
 107:BSP/socket.c  **** 	switch(protocol)
 164              		.loc 1 107 17 discriminator 2 view .LVU33
 108:BSP/socket.c  **** 	{
 165              		.loc 1 108 2 view .LVU34
 166 0014 0129     		cmp	r1, #1
 167 0016 63D0     		beq	.L15
 168 0018 4BB2     		sxtb	r3, r1
 169              	.LVL9:
 108:BSP/socket.c  **** 	{
 170              		.loc 1 108 2 is_stmt 0 view .LVU35
 171 001a 002B     		cmp	r3, #0
 172 001c 00F08A80 		beq	.L26
 173 0020 8B1E     		subs	r3, r1, #2
 174 0022 DBB2     		uxtb	r3, r3
 175 0024 022B     		cmp	r3, #2
 176 0026 00F28880 		bhi	.L36
 177              	.LVL10:
 178              	.L16:
 135:BSP/socket.c  **** #if _WIZCHIP_ == 5200
 179              		.loc 1 135 2 is_stmt 1 view .LVU36
 135:BSP/socket.c  **** #if _WIZCHIP_ == 5200
 180              		.loc 1 135 4 is_stmt 0 view .LVU37
 181 002a 16F0040F 		tst	r6, #4
 182 002e 40F08780 		bne	.L28
 140:BSP/socket.c  **** 	{
 183              		.loc 1 140 2 is_stmt 1 view .LVU38
 140:BSP/socket.c  **** 	{
 184              		.loc 1 140 4 is_stmt 0 view .LVU39
 185 0032 1EB1     		cbz	r6, .L18
 142:BSP/socket.c  ****    	{
ARM GAS  /tmp/ccClG7BW.s 			page 9


 186              		.loc 1 142 5 is_stmt 1 view .LVU40
 187 0034 012F     		cmp	r7, #1
 188 0036 60D0     		beq	.L19
 189 0038 022F     		cmp	r7, #2
 190 003a 64D0     		beq	.L20
 191              	.L18:
 169:BSP/socket.c  **** 	//M20150601
 192              		.loc 1 169 2 view .LVU41
 193 003c 2846     		mov	r0, r5
 194 003e FFF7FEFF 		bl	close
 195              	.LVL11:
 174:BSP/socket.c  ****     #endif
 196              		.loc 1 174 5 view .LVU42
 197 0042 AC00     		lsls	r4, r5, #2
 198 0044 0134     		adds	r4, r4, #1
 199 0046 26F00F01 		bic	r1, r6, #15
 200 004a 3943     		orrs	r1, r1, r7
 201 004c E000     		lsls	r0, r4, #3
 202 004e FFF7FEFF 		bl	WIZCHIP_WRITE
 203              	.LVL12:
 176:BSP/socket.c  **** 	{
 204              		.loc 1 176 2 view .LVU43
 176:BSP/socket.c  **** 	{
 205              		.loc 1 176 4 is_stmt 0 view .LVU44
 206 0052 B8F1000F 		cmp	r8, #0
 207 0056 0AD1     		bne	.L22
 178:BSP/socket.c  **** 	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 208              		.loc 1 178 5 is_stmt 1 view .LVU45
 178:BSP/socket.c  **** 	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 209              		.loc 1 178 25 is_stmt 0 view .LVU46
 210 0058 3C4A     		ldr	r2, .L38
 211 005a B2F80080 		ldrh	r8, [r2]
 212              	.LVL13:
 178:BSP/socket.c  **** 	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 213              		.loc 1 178 25 view .LVU47
 214 005e 08F10103 		add	r3, r8, #1
 215 0062 9BB2     		uxth	r3, r3
 216 0064 1380     		strh	r3, [r2]	@ movhi
 217              	.LVL14:
 179:BSP/socket.c  **** 	}
 218              		.loc 1 179 5 is_stmt 1 view .LVU48
 179:BSP/socket.c  **** 	}
 219              		.loc 1 179 7 is_stmt 0 view .LVU49
 220 0066 4FF6F072 		movw	r2, #65520
 221 006a 9342     		cmp	r3, r2
 222 006c 5AD0     		beq	.L37
 223              	.LVL15:
 224              	.L22:
 181:BSP/socket.c  ****    setSn_CR(sn,Sn_CR_OPEN);
 225              		.loc 1 181 4 is_stmt 1 view .LVU50
 226 006e E400     		lsls	r4, r4, #3
 227 0070 4FEA1821 		lsr	r1, r8, #8
 228 0074 04F58060 		add	r0, r4, #1024
 229 0078 FFF7FEFF 		bl	WIZCHIP_WRITE
 230              	.LVL16:
 181:BSP/socket.c  ****    setSn_CR(sn,Sn_CR_OPEN);
 231              		.loc 1 181 4 discriminator 1 view .LVU51
ARM GAS  /tmp/ccClG7BW.s 			page 10


 232 007c 5FFA88F1 		uxtb	r1, r8
 233 0080 04F5A060 		add	r0, r4, #1280
 234 0084 FFF7FEFF 		bl	WIZCHIP_WRITE
 235              	.LVL17:
 181:BSP/socket.c  ****    setSn_CR(sn,Sn_CR_OPEN);
 236              		.loc 1 181 23 discriminator 2 view .LVU52
 182:BSP/socket.c  ****    while(getSn_CR(sn));
 237              		.loc 1 182 4 view .LVU53
 238 0088 04F58077 		add	r7, r4, #256
 239              	.LVL18:
 182:BSP/socket.c  ****    while(getSn_CR(sn));
 240              		.loc 1 182 4 is_stmt 0 view .LVU54
 241 008c 0121     		movs	r1, #1
 242 008e 3846     		mov	r0, r7
 243 0090 FFF7FEFF 		bl	WIZCHIP_WRITE
 244              	.LVL19:
 183:BSP/socket.c  ****    //A20150401 : For release the previous sock_io_mode
 245              		.loc 1 183 4 is_stmt 1 view .LVU55
 246              	.L23:
 183:BSP/socket.c  ****    //A20150401 : For release the previous sock_io_mode
 247              		.loc 1 183 10 discriminator 1 view .LVU56
 248 0094 3846     		mov	r0, r7
 249 0096 FFF7FEFF 		bl	WIZCHIP_READ
 250              	.LVL20:
 251 009a 0028     		cmp	r0, #0
 252 009c FAD1     		bne	.L23
 185:BSP/socket.c  ****    //
 253              		.loc 1 185 4 view .LVU57
 185:BSP/socket.c  ****    //
 254              		.loc 1 185 24 is_stmt 0 view .LVU58
 255 009e 0123     		movs	r3, #1
 256 00a0 AB40     		lsls	r3, r3, r5
 185:BSP/socket.c  ****    //
 257              		.loc 1 185 17 view .LVU59
 258 00a2 DB43     		mvns	r3, r3
 259 00a4 9BB2     		uxth	r3, r3
 260 00a6 2A49     		ldr	r1, .L38+4
 261 00a8 0A88     		ldrh	r2, [r1]
 262 00aa 1A40     		ands	r2, r2, r3
 263 00ac 0A80     		strh	r2, [r1]	@ movhi
 187:BSP/socket.c  ****    sock_is_sending &= ~(1<<sn);
 264              		.loc 1 187 2 is_stmt 1 view .LVU60
 187:BSP/socket.c  ****    sock_is_sending &= ~(1<<sn);
 265              		.loc 1 187 25 is_stmt 0 view .LVU61
 266 00ae 06F00106 		and	r6, r6, #1
 267              	.LVL21:
 187:BSP/socket.c  ****    sock_is_sending &= ~(1<<sn);
 268              		.loc 1 187 43 view .LVU62
 269 00b2 AE40     		lsls	r6, r6, r5
 187:BSP/socket.c  ****    sock_is_sending &= ~(1<<sn);
 270              		.loc 1 187 15 view .LVU63
 271 00b4 3243     		orrs	r2, r2, r6
 272 00b6 0A80     		strh	r2, [r1]	@ movhi
 188:BSP/socket.c  ****    sock_remained_size[sn] = 0;
 273              		.loc 1 188 4 is_stmt 1 view .LVU64
 188:BSP/socket.c  ****    sock_remained_size[sn] = 0;
 274              		.loc 1 188 20 is_stmt 0 view .LVU65
ARM GAS  /tmp/ccClG7BW.s 			page 11


 275 00b8 264A     		ldr	r2, .L38+8
 276 00ba 1188     		ldrh	r1, [r2]
 277 00bc 0B40     		ands	r3, r3, r1
 278 00be 1380     		strh	r3, [r2]	@ movhi
 189:BSP/socket.c  ****    //M20150601 : repalce 0 with PACK_COMPLETED
 279              		.loc 1 189 4 is_stmt 1 view .LVU66
 189:BSP/socket.c  ****    //M20150601 : repalce 0 with PACK_COMPLETED
 280              		.loc 1 189 27 is_stmt 0 view .LVU67
 281 00c0 0023     		movs	r3, #0
 282 00c2 254A     		ldr	r2, .L38+12
 283 00c4 22F81530 		strh	r3, [r2, r5, lsl #1]	@ movhi
 192:BSP/socket.c  ****    //
 284              		.loc 1 192 4 is_stmt 1 view .LVU68
 192:BSP/socket.c  ****    //
 285              		.loc 1 192 23 is_stmt 0 view .LVU69
 286 00c8 244A     		ldr	r2, .L38+16
 287 00ca 5355     		strb	r3, [r2, r5]
 194:BSP/socket.c  ****    return (int8_t)sn;
 288              		.loc 1 194 4 is_stmt 1 view .LVU70
 289              	.L24:
 194:BSP/socket.c  ****    return (int8_t)sn;
 290              		.loc 1 194 23 discriminator 1 view .LVU71
 194:BSP/socket.c  ****    return (int8_t)sn;
 291              		.loc 1 194 10 is_stmt 0 discriminator 1 view .LVU72
 292 00cc 04F54070 		add	r0, r4, #768
 293 00d0 FFF7FEFF 		bl	WIZCHIP_READ
 294              	.LVL22:
 194:BSP/socket.c  ****    return (int8_t)sn;
 295              		.loc 1 194 23 discriminator 1 view .LVU73
 296 00d4 0028     		cmp	r0, #0
 297 00d6 F9D0     		beq	.L24
 195:BSP/socket.c  **** }	   
 298              		.loc 1 195 4 is_stmt 1 view .LVU74
 195:BSP/socket.c  **** }	   
 299              		.loc 1 195 11 is_stmt 0 view .LVU75
 300 00d8 68B2     		sxtb	r0, r5
 301              	.LVL23:
 302              	.L14:
 196:BSP/socket.c  **** 
 303              		.loc 1 196 1 view .LVU76
 304 00da 02B0     		add	sp, sp, #8
 305              	.LCFI3:
 306              		.cfi_remember_state
 307              		.cfi_def_cfa_offset 24
 308              		@ sp needed
 309 00dc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 310              	.LVL24:
 311              	.L15:
 312              	.LCFI4:
 313              		.cfi_restore_state
 314              	.LBB2:
 117:BSP/socket.c  ****             getSIPR((uint8_t*)&taddr);
 315              		.loc 1 117 13 is_stmt 1 view .LVU77
 118:BSP/socket.c  ****             if(taddr == 0) return SOCKERR_SOCKINIT;
 316              		.loc 1 118 13 view .LVU78
 317 00e0 0422     		movs	r2, #4
 318              	.LVL25:
ARM GAS  /tmp/ccClG7BW.s 			page 12


 118:BSP/socket.c  ****             if(taddr == 0) return SOCKERR_SOCKINIT;
 319              		.loc 1 118 13 is_stmt 0 view .LVU79
 320 00e2 0DEB0201 		add	r1, sp, r2
 321              	.LVL26:
 118:BSP/socket.c  ****             if(taddr == 0) return SOCKERR_SOCKINIT;
 322              		.loc 1 118 13 view .LVU80
 323 00e6 4FF47060 		mov	r0, #3840
 324              	.LVL27:
 118:BSP/socket.c  ****             if(taddr == 0) return SOCKERR_SOCKINIT;
 325              		.loc 1 118 13 view .LVU81
 326 00ea FFF7FEFF 		bl	WIZCHIP_READ_BUF
 327              	.LVL28:
 119:BSP/socket.c  **** 	    break;
 328              		.loc 1 119 13 is_stmt 1 view .LVU82
 119:BSP/socket.c  **** 	    break;
 329              		.loc 1 119 22 is_stmt 0 view .LVU83
 330 00ee 019B     		ldr	r3, [sp, #4]
 119:BSP/socket.c  **** 	    break;
 331              		.loc 1 119 15 view .LVU84
 332 00f0 002B     		cmp	r3, #0
 333 00f2 9AD1     		bne	.L16
 119:BSP/socket.c  **** 	    break;
 334              		.loc 1 119 28 is_stmt 1 discriminator 1 view .LVU85
 119:BSP/socket.c  **** 	    break;
 335              		.loc 1 119 35 is_stmt 0 discriminator 1 view .LVU86
 336 00f4 6FF00200 		mvn	r0, #2
 337 00f8 EFE7     		b	.L14
 338              	.L19:
 119:BSP/socket.c  **** 	    break;
 339              		.loc 1 119 35 discriminator 1 view .LVU87
 340              	.LBE2:
 149:BSP/socket.c  ****           #endif
 341              		.loc 1 149 11 is_stmt 1 view .LVU88
 149:BSP/socket.c  ****           #endif
 342              		.loc 1 149 13 is_stmt 0 view .LVU89
 343 00fa 16F0210F 		tst	r6, #33
 344 00fe 9DD1     		bne	.L18
 149:BSP/socket.c  ****           #endif
 345              		.loc 1 149 66 discriminator 1 view .LVU90
 346 0100 6FF00500 		mvn	r0, #5
 347 0104 E9E7     		b	.L14
 348              	.L20:
 154:BSP/socket.c  ****    	      {
 349              		.loc 1 154 11 is_stmt 1 view .LVU91
 154:BSP/socket.c  ****    	      {
 350              		.loc 1 154 13 is_stmt 0 view .LVU92
 351 0106 16F0200F 		tst	r6, #32
 352 010a 02D0     		beq	.L21
 156:BSP/socket.c  ****    	      }
 353              		.loc 1 156 14 is_stmt 1 view .LVU93
 156:BSP/socket.c  ****    	      }
 354              		.loc 1 156 16 is_stmt 0 view .LVU94
 355 010c 16F0800F 		tst	r6, #128
 356 0110 19D0     		beq	.L30
 357              	.L21:
 159:BSP/socket.c  ****       	      {
 358              		.loc 1 159 14 is_stmt 1 view .LVU95
ARM GAS  /tmp/ccClG7BW.s 			page 13


 159:BSP/socket.c  ****       	      {
 359              		.loc 1 159 16 is_stmt 0 view .LVU96
 360 0112 16F0100F 		tst	r6, #16
 361 0116 91D0     		beq	.L18
 161:BSP/socket.c  ****       	      }
 362              		.loc 1 161 17 is_stmt 1 view .LVU97
 161:BSP/socket.c  ****       	      }
 363              		.loc 1 161 19 is_stmt 0 view .LVU98
 364 0118 16F0800F 		tst	r6, #128
 365 011c 8ED1     		bne	.L18
 161:BSP/socket.c  ****       	      }
 366              		.loc 1 161 58 discriminator 1 view .LVU99
 367 011e 6FF00500 		mvn	r0, #5
 368 0122 DAE7     		b	.L14
 369              	.L37:
 179:BSP/socket.c  **** 	}
 370              		.loc 1 179 33 is_stmt 1 discriminator 1 view .LVU100
 179:BSP/socket.c  **** 	}
 371              		.loc 1 179 47 is_stmt 0 discriminator 1 view .LVU101
 372 0124 094B     		ldr	r3, .L38
 373 0126 4FF44042 		mov	r2, #49152
 374 012a 1A80     		strh	r2, [r3]	@ movhi
 375 012c 9FE7     		b	.L22
 376              	.LVL29:
 377              	.L25:
 378              	.LCFI5:
 379              		.cfi_def_cfa_offset 0
 380              		.cfi_restore 4
 381              		.cfi_restore 5
 382              		.cfi_restore 6
 383              		.cfi_restore 7
 384              		.cfi_restore 8
 385              		.cfi_restore 14
 107:BSP/socket.c  **** 	switch(protocol)
 386              		.loc 1 107 2 discriminator 1 view .LVU102
 387 012e 4FF0FF30 		mov	r0, #-1
 388              	.LVL30:
 196:BSP/socket.c  **** 
 389              		.loc 1 196 1 view .LVU103
 390 0132 7047     		bx	lr
 391              	.LVL31:
 392              	.L26:
 393              	.LCFI6:
 394              		.cfi_def_cfa_offset 32
 395              		.cfi_offset 4, -24
 396              		.cfi_offset 5, -20
 397              		.cfi_offset 6, -16
 398              		.cfi_offset 7, -12
 399              		.cfi_offset 8, -8
 400              		.cfi_offset 14, -4
 108:BSP/socket.c  **** 	{
 401              		.loc 1 108 2 view .LVU104
 402 0134 6FF00400 		mvn	r0, #4
 403              	.LVL32:
 108:BSP/socket.c  **** 	{
 404              		.loc 1 108 2 view .LVU105
 405 0138 CFE7     		b	.L14
ARM GAS  /tmp/ccClG7BW.s 			page 14


 406              	.LVL33:
 407              	.L36:
 108:BSP/socket.c  **** 	{
 408              		.loc 1 108 2 view .LVU106
 409 013a 6FF00400 		mvn	r0, #4
 410              	.LVL34:
 108:BSP/socket.c  **** 	{
 411              		.loc 1 108 2 view .LVU107
 412 013e CCE7     		b	.L14
 413              	.LVL35:
 414              	.L28:
 135:BSP/socket.c  **** #if _WIZCHIP_ == 5200
 415              		.loc 1 135 32 discriminator 1 view .LVU108
 416 0140 6FF00500 		mvn	r0, #5
 417 0144 C9E7     		b	.L14
 418              	.L30:
 156:BSP/socket.c  ****    	      }
 419              		.loc 1 156 53 discriminator 1 view .LVU109
 420 0146 6FF00500 		mvn	r0, #5
 421 014a C6E7     		b	.L14
 422              	.L39:
 423              		.align	2
 424              	.L38:
 425 014c 00000000 		.word	sock_any_port
 426 0150 00000000 		.word	sock_io_mode
 427 0154 00000000 		.word	sock_is_sending
 428 0158 00000000 		.word	sock_remained_size
 429 015c 00000000 		.word	sock_pack_info
 430              		.cfi_endproc
 431              	.LFE0:
 433              		.section	.text.listen,"ax",%progbits
 434              		.align	1
 435              		.global	listen
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 440              	listen:
 441              	.LVL36:
 442              	.LFB2:
 240:BSP/socket.c  **** 
 241:BSP/socket.c  **** int8_t listen(uint8_t sn)
 242:BSP/socket.c  **** {
 443              		.loc 1 242 1 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 243:BSP/socket.c  **** 	CHECK_SOCKNUM();
 447              		.loc 1 243 2 view .LVU111
 448              		.loc 1 243 2 view .LVU112
 449 0000 0828     		cmp	r0, #8
 450 0002 2AD8     		bhi	.L45
 242:BSP/socket.c  **** 	CHECK_SOCKNUM();
 451              		.loc 1 242 1 is_stmt 0 view .LVU113
 452 0004 70B5     		push	{r4, r5, r6, lr}
 453              	.LCFI7:
 454              		.cfi_def_cfa_offset 16
 455              		.cfi_offset 4, -16
ARM GAS  /tmp/ccClG7BW.s 			page 15


 456              		.cfi_offset 5, -12
 457              		.cfi_offset 6, -8
 458              		.cfi_offset 14, -4
 459 0006 0546     		mov	r5, r0
 460              		.loc 1 243 2 is_stmt 1 discriminator 2 view .LVU114
 461              		.loc 1 243 17 discriminator 2 view .LVU115
 244:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 462              		.loc 1 244 4 view .LVU116
 463              		.loc 1 244 4 view .LVU117
 464 0008 8400     		lsls	r4, r0, #2
 465 000a 0134     		adds	r4, r4, #1
 466 000c E000     		lsls	r0, r4, #3
 467              	.LVL37:
 468              		.loc 1 244 4 is_stmt 0 view .LVU118
 469 000e FFF7FEFF 		bl	WIZCHIP_READ
 470              	.LVL38:
 471              		.loc 1 244 4 discriminator 1 view .LVU119
 472 0012 00F00F00 		and	r0, r0, #15
 473 0016 0128     		cmp	r0, #1
 474 0018 22D1     		bne	.L46
 475              		.loc 1 244 4 is_stmt 1 discriminator 2 view .LVU120
 476              		.loc 1 244 29 discriminator 2 view .LVU121
 245:BSP/socket.c  **** 	CHECK_SOCKINIT();
 477              		.loc 1 245 2 view .LVU122
 478              		.loc 1 245 2 view .LVU123
 479 001a E400     		lsls	r4, r4, #3
 480 001c 04F54076 		add	r6, r4, #768
 481 0020 3046     		mov	r0, r6
 482 0022 FFF7FEFF 		bl	WIZCHIP_READ
 483              	.LVL39:
 484              		.loc 1 245 2 is_stmt 0 discriminator 1 view .LVU124
 485 0026 1328     		cmp	r0, #19
 486 0028 1DD1     		bne	.L47
 487              		.loc 1 245 2 is_stmt 1 discriminator 2 view .LVU125
 488              		.loc 1 245 18 discriminator 2 view .LVU126
 246:BSP/socket.c  **** 	setSn_CR(sn,Sn_CR_LISTEN);
 489              		.loc 1 246 2 view .LVU127
 490 002a 04F58074 		add	r4, r4, #256
 491 002e 0221     		movs	r1, #2
 492 0030 2046     		mov	r0, r4
 493 0032 FFF7FEFF 		bl	WIZCHIP_WRITE
 494              	.LVL40:
 247:BSP/socket.c  **** 	while(getSn_CR(sn));
 495              		.loc 1 247 2 view .LVU128
 496              	.L42:
 497              		.loc 1 247 8 discriminator 1 view .LVU129
 498 0036 2046     		mov	r0, r4
 499 0038 FFF7FEFF 		bl	WIZCHIP_READ
 500              	.LVL41:
 501 003c 0028     		cmp	r0, #0
 502 003e FAD1     		bne	.L42
 248:BSP/socket.c  ****    while(getSn_SR(sn) != SOCK_LISTEN)
 503              		.loc 1 248 4 view .LVU130
 504              		.loc 1 248 23 view .LVU131
 505              		.loc 1 248 10 is_stmt 0 view .LVU132
 506 0040 3046     		mov	r0, r6
 507 0042 FFF7FEFF 		bl	WIZCHIP_READ
ARM GAS  /tmp/ccClG7BW.s 			page 16


 508              	.LVL42:
 509              		.loc 1 248 23 discriminator 1 view .LVU133
 510 0046 1428     		cmp	r0, #20
 511 0048 01D1     		bne	.L44
 249:BSP/socket.c  ****    {
 250:BSP/socket.c  ****          close(sn);
 251:BSP/socket.c  ****          return SOCKERR_SOCKCLOSED;
 252:BSP/socket.c  ****    }
 253:BSP/socket.c  ****    return SOCK_OK;
 512              		.loc 1 253 11 view .LVU134
 513 004a 0120     		movs	r0, #1
 514              	.L41:
 254:BSP/socket.c  **** }
 515              		.loc 1 254 1 view .LVU135
 516 004c 70BD     		pop	{r4, r5, r6, pc}
 517              	.LVL43:
 518              	.L44:
 250:BSP/socket.c  ****          return SOCKERR_SOCKCLOSED;
 519              		.loc 1 250 10 is_stmt 1 view .LVU136
 520 004e 2846     		mov	r0, r5
 521 0050 FFF7FEFF 		bl	close
 522              	.LVL44:
 251:BSP/socket.c  ****    }
 523              		.loc 1 251 10 view .LVU137
 251:BSP/socket.c  ****    }
 524              		.loc 1 251 17 is_stmt 0 view .LVU138
 525 0054 6FF00300 		mvn	r0, #3
 526 0058 F8E7     		b	.L41
 527              	.LVL45:
 528              	.L45:
 529              	.LCFI8:
 530              		.cfi_def_cfa_offset 0
 531              		.cfi_restore 4
 532              		.cfi_restore 5
 533              		.cfi_restore 6
 534              		.cfi_restore 14
 243:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 535              		.loc 1 243 2 discriminator 1 view .LVU139
 536 005a 4FF0FF30 		mov	r0, #-1
 537              	.LVL46:
 538              		.loc 1 254 1 view .LVU140
 539 005e 7047     		bx	lr
 540              	.L46:
 541              	.LCFI9:
 542              		.cfi_def_cfa_offset 16
 543              		.cfi_offset 4, -16
 544              		.cfi_offset 5, -12
 545              		.cfi_offset 6, -8
 546              		.cfi_offset 14, -4
 244:BSP/socket.c  **** 	CHECK_SOCKINIT();
 547              		.loc 1 244 4 discriminator 1 view .LVU141
 548 0060 6FF00400 		mvn	r0, #4
 549 0064 F2E7     		b	.L41
 550              	.L47:
 245:BSP/socket.c  **** 	setSn_CR(sn,Sn_CR_LISTEN);
 551              		.loc 1 245 2 discriminator 1 view .LVU142
 552 0066 6FF00200 		mvn	r0, #2
ARM GAS  /tmp/ccClG7BW.s 			page 17


 553 006a EFE7     		b	.L41
 554              		.cfi_endproc
 555              	.LFE2:
 557              		.section	.text.connect,"ax",%progbits
 558              		.align	1
 559              		.global	connect
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 564              	connect:
 565              	.LVL47:
 566              	.LFB3:
 255:BSP/socket.c  **** 
 256:BSP/socket.c  **** 
 257:BSP/socket.c  **** int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
 258:BSP/socket.c  **** {
 567              		.loc 1 258 1 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 259:BSP/socket.c  ****    CHECK_SOCKNUM();
 571              		.loc 1 259 4 view .LVU144
 572              		.loc 1 259 4 view .LVU145
 573 0000 0828     		cmp	r0, #8
 574 0002 67D8     		bhi	.L59
 258:BSP/socket.c  ****    CHECK_SOCKNUM();
 575              		.loc 1 258 1 is_stmt 0 view .LVU146
 576 0004 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 577              	.LCFI10:
 578              		.cfi_def_cfa_offset 24
 579              		.cfi_offset 4, -24
 580              		.cfi_offset 5, -20
 581              		.cfi_offset 6, -16
 582              		.cfi_offset 7, -12
 583              		.cfi_offset 8, -8
 584              		.cfi_offset 14, -4
 585 0008 0746     		mov	r7, r0
 586 000a 0E46     		mov	r6, r1
 587 000c 9046     		mov	r8, r2
 588              		.loc 1 259 4 is_stmt 1 discriminator 2 view .LVU147
 589              		.loc 1 259 19 discriminator 2 view .LVU148
 260:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 590              		.loc 1 260 4 view .LVU149
 591              		.loc 1 260 4 view .LVU150
 592 000e 8400     		lsls	r4, r0, #2
 593 0010 0134     		adds	r4, r4, #1
 594 0012 E000     		lsls	r0, r4, #3
 595              	.LVL48:
 596              		.loc 1 260 4 is_stmt 0 view .LVU151
 597 0014 FFF7FEFF 		bl	WIZCHIP_READ
 598              	.LVL49:
 599              		.loc 1 260 4 discriminator 1 view .LVU152
 600 0018 00F00F00 		and	r0, r0, #15
 601 001c 0128     		cmp	r0, #1
 602 001e 5CD1     		bne	.L60
 603              		.loc 1 260 4 is_stmt 1 discriminator 2 view .LVU153
 604              		.loc 1 260 29 discriminator 2 view .LVU154
ARM GAS  /tmp/ccClG7BW.s 			page 18


 261:BSP/socket.c  ****    CHECK_SOCKINIT();
 605              		.loc 1 261 4 view .LVU155
 606              		.loc 1 261 4 view .LVU156
 607 0020 E400     		lsls	r4, r4, #3
 608 0022 04F54075 		add	r5, r4, #768
 609 0026 2846     		mov	r0, r5
 610 0028 FFF7FEFF 		bl	WIZCHIP_READ
 611              	.LVL50:
 612              		.loc 1 261 4 is_stmt 0 discriminator 1 view .LVU157
 613 002c 1328     		cmp	r0, #19
 614 002e 57D1     		bne	.L61
 615              		.loc 1 261 4 is_stmt 1 discriminator 2 view .LVU158
 616              		.loc 1 261 20 discriminator 2 view .LVU159
 617              	.LBB3:
 262:BSP/socket.c  ****    //M20140501 : For avoiding fatal error on memory align mismatched
 263:BSP/socket.c  ****    //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 264:BSP/socket.c  ****    {
 265:BSP/socket.c  ****       uint32_t taddr;
 618              		.loc 1 265 7 view .LVU160
 266:BSP/socket.c  ****       taddr = ((uint32_t)addr[0] & 0x000000FF);
 619              		.loc 1 266 7 view .LVU161
 620              		.loc 1 266 30 is_stmt 0 view .LVU162
 621 0030 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 622              	.LVL51:
 267:BSP/socket.c  ****       taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 623              		.loc 1 267 7 is_stmt 1 view .LVU163
 624              		.loc 1 267 45 is_stmt 0 view .LVU164
 625 0032 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 626              		.loc 1 267 13 view .LVU165
 627 0034 03EB0223 		add	r3, r3, r2, lsl #8
 628              	.LVL52:
 268:BSP/socket.c  ****       taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 629              		.loc 1 268 7 is_stmt 1 view .LVU166
 630              		.loc 1 268 45 is_stmt 0 view .LVU167
 631 0038 B278     		ldrb	r2, [r6, #2]	@ zero_extendqisi2
 632              		.loc 1 268 13 view .LVU168
 633 003a 02EB0322 		add	r2, r2, r3, lsl #8
 634              	.LVL53:
 269:BSP/socket.c  ****       taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 635              		.loc 1 269 7 is_stmt 1 view .LVU169
 636              		.loc 1 269 45 is_stmt 0 view .LVU170
 637 003e F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
 638              		.loc 1 269 13 view .LVU171
 639 0040 03EB0223 		add	r3, r3, r2, lsl #8
 640              	.LVL54:
 270:BSP/socket.c  ****       if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 641              		.loc 1 270 7 is_stmt 1 view .LVU172
 642              		.loc 1 270 31 is_stmt 0 view .LVU173
 643 0044 013B     		subs	r3, r3, #1
 644              	.LVL55:
 645              		.loc 1 270 9 view .LVU174
 646 0046 13F1030F 		cmn	r3, #3
 647 004a 4CD8     		bhi	.L62
 648              	.LBE3:
 271:BSP/socket.c  ****    }
 272:BSP/socket.c  ****    //
 273:BSP/socket.c  **** 	
ARM GAS  /tmp/ccClG7BW.s 			page 19


 274:BSP/socket.c  **** 	if(port == 0) return SOCKERR_PORTZERO;
 649              		.loc 1 274 2 is_stmt 1 view .LVU175
 650              		.loc 1 274 4 is_stmt 0 view .LVU176
 651 004c B8F1000F 		cmp	r8, #0
 652 0050 4CD0     		beq	.L63
 275:BSP/socket.c  **** 	setSn_DIPR(sn,addr);
 653              		.loc 1 275 2 is_stmt 1 view .LVU177
 654 0052 0422     		movs	r2, #4
 655 0054 3146     		mov	r1, r6
 656 0056 04F54060 		add	r0, r4, #3072
 657 005a FFF7FEFF 		bl	WIZCHIP_WRITE_BUF
 658              	.LVL56:
 276:BSP/socket.c  **** 	setSn_DPORT(sn,port);
 659              		.loc 1 276 2 view .LVU178
 660 005e 4FEA1821 		lsr	r1, r8, #8
 661 0062 04F58050 		add	r0, r4, #4096
 662 0066 FFF7FEFF 		bl	WIZCHIP_WRITE
 663              	.LVL57:
 664              		.loc 1 276 2 discriminator 1 view .LVU179
 665 006a 5FFA88F1 		uxtb	r1, r8
 666 006e 04F58850 		add	r0, r4, #4352
 667 0072 FFF7FEFF 		bl	WIZCHIP_WRITE
 668              	.LVL58:
 669              		.loc 1 276 22 discriminator 2 view .LVU180
 277:BSP/socket.c  **** 	setSn_CR(sn,Sn_CR_CONNECT);
 670              		.loc 1 277 2 view .LVU181
 671 0076 04F58076 		add	r6, r4, #256
 672              	.LVL59:
 673              		.loc 1 277 2 is_stmt 0 view .LVU182
 674 007a 0421     		movs	r1, #4
 675 007c 3046     		mov	r0, r6
 676 007e FFF7FEFF 		bl	WIZCHIP_WRITE
 677              	.LVL60:
 278:BSP/socket.c  ****    while(getSn_CR(sn));
 678              		.loc 1 278 4 is_stmt 1 view .LVU183
 679              	.L55:
 680              		.loc 1 278 10 discriminator 1 view .LVU184
 681 0082 3046     		mov	r0, r6
 682 0084 FFF7FEFF 		bl	WIZCHIP_READ
 683              	.LVL61:
 684 0088 0028     		cmp	r0, #0
 685 008a FAD1     		bne	.L55
 279:BSP/socket.c  ****    if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 686              		.loc 1 279 4 view .LVU185
 687              		.loc 1 279 7 is_stmt 0 view .LVU186
 688 008c 1A4B     		ldr	r3, .L73
 689 008e 1B88     		ldrh	r3, [r3]
 690 0090 3B41     		asrs	r3, r3, r7
 691              		.loc 1 279 6 view .LVU187
 692 0092 13F0010F 		tst	r3, #1
 693 0096 2CD1     		bne	.L70
 694              	.L56:
 280:BSP/socket.c  ****    while(getSn_SR(sn) != SOCK_ESTABLISHED)
 695              		.loc 1 280 23 is_stmt 1 view .LVU188
 696              		.loc 1 280 10 is_stmt 0 view .LVU189
 697 0098 2846     		mov	r0, r5
 698 009a FFF7FEFF 		bl	WIZCHIP_READ
ARM GAS  /tmp/ccClG7BW.s 			page 20


 699              	.LVL62:
 700              		.loc 1 280 23 discriminator 1 view .LVU190
 701 009e 1728     		cmp	r0, #23
 702 00a0 16D0     		beq	.L71
 281:BSP/socket.c  ****    {
 282:BSP/socket.c  **** 		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 703              		.loc 1 282 3 is_stmt 1 view .LVU191
 704              		.loc 1 282 7 is_stmt 0 view .LVU192
 705 00a2 04F50076 		add	r6, r4, #512
 706 00a6 3046     		mov	r0, r6
 707 00a8 FFF7FEFF 		bl	WIZCHIP_READ
 708              	.LVL63:
 709              		.loc 1 282 6 discriminator 1 view .LVU193
 710 00ac 10F0080F 		tst	r0, #8
 711 00b0 07D1     		bne	.L72
 283:BSP/socket.c  **** 		{
 284:BSP/socket.c  **** 			setSn_IR(sn, Sn_IR_TIMEOUT);
 285:BSP/socket.c  ****             return SOCKERR_TIMEOUT;
 286:BSP/socket.c  **** 		}
 287:BSP/socket.c  **** 
 288:BSP/socket.c  **** 		if (getSn_SR(sn) == SOCK_CLOSED)
 712              		.loc 1 288 3 is_stmt 1 view .LVU194
 713              		.loc 1 288 7 is_stmt 0 view .LVU195
 714 00b2 2846     		mov	r0, r5
 715 00b4 FFF7FEFF 		bl	WIZCHIP_READ
 716              	.LVL64:
 717              		.loc 1 288 6 discriminator 1 view .LVU196
 718 00b8 0028     		cmp	r0, #0
 719 00ba EDD1     		bne	.L56
 289:BSP/socket.c  **** 		{
 290:BSP/socket.c  **** 			return SOCKERR_SOCKCLOSED;
 720              		.loc 1 290 11 view .LVU197
 721 00bc 6FF00300 		mvn	r0, #3
 722 00c0 18E0     		b	.L54
 723              	.L72:
 284:BSP/socket.c  ****             return SOCKERR_TIMEOUT;
 724              		.loc 1 284 4 is_stmt 1 view .LVU198
 725 00c2 0821     		movs	r1, #8
 726 00c4 3046     		mov	r0, r6
 727 00c6 FFF7FEFF 		bl	WIZCHIP_WRITE
 728              	.LVL65:
 285:BSP/socket.c  **** 		}
 729              		.loc 1 285 13 view .LVU199
 285:BSP/socket.c  **** 		}
 730              		.loc 1 285 20 is_stmt 0 view .LVU200
 731 00ca 6FF00C00 		mvn	r0, #12
 732 00ce 11E0     		b	.L54
 733              	.L71:
 291:BSP/socket.c  **** 		}
 292:BSP/socket.c  **** 	}
 293:BSP/socket.c  ****    
 294:BSP/socket.c  ****    return SOCK_OK;
 734              		.loc 1 294 11 view .LVU201
 735 00d0 0120     		movs	r0, #1
 736 00d2 0FE0     		b	.L54
 737              	.LVL66:
 738              	.L59:
ARM GAS  /tmp/ccClG7BW.s 			page 21


 739              	.LCFI11:
 740              		.cfi_def_cfa_offset 0
 741              		.cfi_restore 4
 742              		.cfi_restore 5
 743              		.cfi_restore 6
 744              		.cfi_restore 7
 745              		.cfi_restore 8
 746              		.cfi_restore 14
 259:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 747              		.loc 1 259 4 discriminator 1 view .LVU202
 748 00d4 4FF0FF30 		mov	r0, #-1
 749              	.LVL67:
 295:BSP/socket.c  **** }
 750              		.loc 1 295 1 view .LVU203
 751 00d8 7047     		bx	lr
 752              	.LVL68:
 753              	.L60:
 754              	.LCFI12:
 755              		.cfi_def_cfa_offset 24
 756              		.cfi_offset 4, -24
 757              		.cfi_offset 5, -20
 758              		.cfi_offset 6, -16
 759              		.cfi_offset 7, -12
 760              		.cfi_offset 8, -8
 761              		.cfi_offset 14, -4
 260:BSP/socket.c  ****    CHECK_SOCKINIT();
 762              		.loc 1 260 4 discriminator 1 view .LVU204
 763 00da 6FF00400 		mvn	r0, #4
 764 00de 09E0     		b	.L54
 765              	.L61:
 261:BSP/socket.c  ****    //M20140501 : For avoiding fatal error on memory align mismatched
 766              		.loc 1 261 4 discriminator 1 view .LVU205
 767 00e0 6FF00200 		mvn	r0, #2
 768 00e4 06E0     		b	.L54
 769              	.LVL69:
 770              	.L62:
 771              	.LBB4:
 270:BSP/socket.c  ****    }
 772              		.loc 1 270 53 discriminator 1 view .LVU206
 773 00e6 6FF00B00 		mvn	r0, #11
 774 00ea 03E0     		b	.L54
 775              	.L63:
 776              	.LBE4:
 274:BSP/socket.c  **** 	setSn_DIPR(sn,addr);
 777              		.loc 1 274 23 discriminator 1 view .LVU207
 778 00ec 6FF00A00 		mvn	r0, #10
 779 00f0 00E0     		b	.L54
 780              	.LVL70:
 781              	.L70:
 279:BSP/socket.c  ****    while(getSn_SR(sn) != SOCK_ESTABLISHED)
 782              		.loc 1 279 38 discriminator 1 view .LVU208
 783 00f2 0020     		movs	r0, #0
 784              	.LVL71:
 785              	.L54:
 786              		.loc 1 295 1 view .LVU209
 787 00f4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 788              	.LVL72:
ARM GAS  /tmp/ccClG7BW.s 			page 22


 789              	.L74:
 790              		.loc 1 295 1 view .LVU210
 791              		.align	2
 792              	.L73:
 793 00f8 00000000 		.word	sock_io_mode
 794              		.cfi_endproc
 795              	.LFE3:
 797              		.section	.text.disconnect,"ax",%progbits
 798              		.align	1
 799              		.global	disconnect
 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 804              	disconnect:
 805              	.LVL73:
 806              	.LFB4:
 296:BSP/socket.c  **** 
 297:BSP/socket.c  **** int8_t disconnect(uint8_t sn)
 298:BSP/socket.c  **** {
 807              		.loc 1 298 1 is_stmt 1 view -0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 299:BSP/socket.c  ****    CHECK_SOCKNUM();
 811              		.loc 1 299 4 view .LVU212
 812              		.loc 1 299 4 view .LVU213
 813 0000 0828     		cmp	r0, #8
 814 0002 38D8     		bhi	.L80
 298:BSP/socket.c  ****    CHECK_SOCKNUM();
 815              		.loc 1 298 1 is_stmt 0 view .LVU214
 816 0004 70B5     		push	{r4, r5, r6, lr}
 817              	.LCFI13:
 818              		.cfi_def_cfa_offset 16
 819              		.cfi_offset 4, -16
 820              		.cfi_offset 5, -12
 821              		.cfi_offset 6, -8
 822              		.cfi_offset 14, -4
 823 0006 0646     		mov	r6, r0
 824              		.loc 1 299 4 is_stmt 1 discriminator 2 view .LVU215
 825              		.loc 1 299 19 discriminator 2 view .LVU216
 300:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 826              		.loc 1 300 4 view .LVU217
 827              		.loc 1 300 4 view .LVU218
 828 0008 8400     		lsls	r4, r0, #2
 829 000a 0134     		adds	r4, r4, #1
 830 000c E000     		lsls	r0, r4, #3
 831              	.LVL74:
 832              		.loc 1 300 4 is_stmt 0 view .LVU219
 833 000e FFF7FEFF 		bl	WIZCHIP_READ
 834              	.LVL75:
 835              		.loc 1 300 4 discriminator 1 view .LVU220
 836 0012 00F00F00 		and	r0, r0, #15
 837 0016 0128     		cmp	r0, #1
 838 0018 30D1     		bne	.L81
 839              		.loc 1 300 4 is_stmt 1 discriminator 2 view .LVU221
 840              		.loc 1 300 29 discriminator 2 view .LVU222
 301:BSP/socket.c  **** 	setSn_CR(sn,Sn_CR_DISCON);
ARM GAS  /tmp/ccClG7BW.s 			page 23


 841              		.loc 1 301 2 view .LVU223
 842 001a E400     		lsls	r4, r4, #3
 843 001c 04F58075 		add	r5, r4, #256
 844 0020 0821     		movs	r1, #8
 845 0022 2846     		mov	r0, r5
 846 0024 FFF7FEFF 		bl	WIZCHIP_WRITE
 847              	.LVL76:
 302:BSP/socket.c  **** 	/* wait to process the command... */
 303:BSP/socket.c  **** 	while(getSn_CR(sn));
 848              		.loc 1 303 2 view .LVU224
 849              	.L77:
 850              		.loc 1 303 8 discriminator 1 view .LVU225
 851 0028 2846     		mov	r0, r5
 852 002a FFF7FEFF 		bl	WIZCHIP_READ
 853              	.LVL77:
 854 002e 0028     		cmp	r0, #0
 855 0030 FAD1     		bne	.L77
 304:BSP/socket.c  **** 	sock_is_sending &= ~(1<<sn);
 856              		.loc 1 304 2 view .LVU226
 857              		.loc 1 304 24 is_stmt 0 view .LVU227
 858 0032 0123     		movs	r3, #1
 859 0034 B340     		lsls	r3, r3, r6
 860              		.loc 1 304 18 view .LVU228
 861 0036 DB43     		mvns	r3, r3
 862 0038 1BB2     		sxth	r3, r3
 863 003a 134A     		ldr	r2, .L89
 864 003c 1188     		ldrh	r1, [r2]
 865 003e 0B40     		ands	r3, r3, r1
 866 0040 1380     		strh	r3, [r2]	@ movhi
 305:BSP/socket.c  ****    if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 867              		.loc 1 305 4 is_stmt 1 view .LVU229
 868              		.loc 1 305 7 is_stmt 0 view .LVU230
 869 0042 124B     		ldr	r3, .L89+4
 870 0044 1B88     		ldrh	r3, [r3]
 871 0046 3341     		asrs	r3, r3, r6
 872              		.loc 1 305 6 view .LVU231
 873 0048 13F0010F 		tst	r3, #1
 874 004c 19D1     		bne	.L87
 875              	.L78:
 306:BSP/socket.c  **** 	while(getSn_SR(sn) != SOCK_CLOSED)
 876              		.loc 1 306 21 is_stmt 1 view .LVU232
 877              		.loc 1 306 8 is_stmt 0 view .LVU233
 878 004e 04F54070 		add	r0, r4, #768
 879 0052 FFF7FEFF 		bl	WIZCHIP_READ
 880              	.LVL78:
 881              		.loc 1 306 21 discriminator 1 view .LVU234
 882 0056 60B1     		cbz	r0, .L88
 307:BSP/socket.c  **** 	{
 308:BSP/socket.c  **** 	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 883              		.loc 1 308 5 is_stmt 1 view .LVU235
 884              		.loc 1 308 8 is_stmt 0 view .LVU236
 885 0058 04F50070 		add	r0, r4, #512
 886 005c FFF7FEFF 		bl	WIZCHIP_READ
 887              	.LVL79:
 888              		.loc 1 308 7 discriminator 1 view .LVU237
 889 0060 10F0080F 		tst	r0, #8
 890 0064 F3D0     		beq	.L78
ARM GAS  /tmp/ccClG7BW.s 			page 24


 309:BSP/socket.c  **** 	   {
 310:BSP/socket.c  **** 	      close(sn);
 891              		.loc 1 310 8 is_stmt 1 view .LVU238
 892 0066 3046     		mov	r0, r6
 893 0068 FFF7FEFF 		bl	close
 894              	.LVL80:
 311:BSP/socket.c  **** 	      return SOCKERR_TIMEOUT;
 895              		.loc 1 311 8 view .LVU239
 896              		.loc 1 311 15 is_stmt 0 view .LVU240
 897 006c 6FF00C00 		mvn	r0, #12
 898 0070 08E0     		b	.L76
 899              	.L88:
 312:BSP/socket.c  **** 	   }
 313:BSP/socket.c  **** 	}
 314:BSP/socket.c  **** 	return SOCK_OK;
 900              		.loc 1 314 9 view .LVU241
 901 0072 0120     		movs	r0, #1
 902 0074 06E0     		b	.L76
 903              	.LVL81:
 904              	.L80:
 905              	.LCFI14:
 906              		.cfi_def_cfa_offset 0
 907              		.cfi_restore 4
 908              		.cfi_restore 5
 909              		.cfi_restore 6
 910              		.cfi_restore 14
 299:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 911              		.loc 1 299 4 discriminator 1 view .LVU242
 912 0076 4FF0FF30 		mov	r0, #-1
 913              	.LVL82:
 315:BSP/socket.c  **** }
 914              		.loc 1 315 1 view .LVU243
 915 007a 7047     		bx	lr
 916              	.L81:
 917              	.LCFI15:
 918              		.cfi_def_cfa_offset 16
 919              		.cfi_offset 4, -16
 920              		.cfi_offset 5, -12
 921              		.cfi_offset 6, -8
 922              		.cfi_offset 14, -4
 300:BSP/socket.c  **** 	setSn_CR(sn,Sn_CR_DISCON);
 923              		.loc 1 300 4 discriminator 1 view .LVU244
 924 007c 6FF00400 		mvn	r0, #4
 925 0080 00E0     		b	.L76
 926              	.L87:
 305:BSP/socket.c  **** 	while(getSn_SR(sn) != SOCK_CLOSED)
 927              		.loc 1 305 38 discriminator 1 view .LVU245
 928 0082 0020     		movs	r0, #0
 929              	.L76:
 930              		.loc 1 315 1 view .LVU246
 931 0084 70BD     		pop	{r4, r5, r6, pc}
 932              	.L90:
 933 0086 00BF     		.align	2
 934              	.L89:
 935 0088 00000000 		.word	sock_is_sending
 936 008c 00000000 		.word	sock_io_mode
 937              		.cfi_endproc
ARM GAS  /tmp/ccClG7BW.s 			page 25


 938              	.LFE4:
 940              		.section	.text.send,"ax",%progbits
 941              		.align	1
 942              		.global	send
 943              		.syntax unified
 944              		.thumb
 945              		.thumb_func
 947              	send:
 948              	.LVL83:
 949              	.LFB5:
 316:BSP/socket.c  **** 
 317:BSP/socket.c  **** int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
 318:BSP/socket.c  **** {
 950              		.loc 1 318 1 is_stmt 1 view -0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 0, uses_anonymous_args = 0
 319:BSP/socket.c  ****    uint8_t tmp=0;
 954              		.loc 1 319 4 view .LVU248
 320:BSP/socket.c  ****    uint16_t freesize=0;
 955              		.loc 1 320 4 view .LVU249
 321:BSP/socket.c  ****    
 322:BSP/socket.c  ****    CHECK_SOCKNUM();
 956              		.loc 1 322 4 view .LVU250
 957              		.loc 1 322 4 view .LVU251
 958 0000 0828     		cmp	r0, #8
 959 0002 7ED8     		bhi	.L101
 318:BSP/socket.c  ****    uint8_t tmp=0;
 960              		.loc 1 318 1 is_stmt 0 view .LVU252
 961 0004 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 962              	.LCFI16:
 963              		.cfi_def_cfa_offset 32
 964              		.cfi_offset 3, -32
 965              		.cfi_offset 4, -28
 966              		.cfi_offset 5, -24
 967              		.cfi_offset 6, -20
 968              		.cfi_offset 7, -16
 969              		.cfi_offset 8, -12
 970              		.cfi_offset 9, -8
 971              		.cfi_offset 14, -4
 972 0008 0546     		mov	r5, r0
 973 000a 8946     		mov	r9, r1
 974 000c 1446     		mov	r4, r2
 975              		.loc 1 322 4 is_stmt 1 discriminator 2 view .LVU253
 976              		.loc 1 322 19 discriminator 2 view .LVU254
 323:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 977              		.loc 1 323 4 view .LVU255
 978              		.loc 1 323 4 view .LVU256
 979 000e 8700     		lsls	r7, r0, #2
 980 0010 0137     		adds	r7, r7, #1
 981 0012 F800     		lsls	r0, r7, #3
 982              	.LVL84:
 983              		.loc 1 323 4 is_stmt 0 view .LVU257
 984 0014 FFF7FEFF 		bl	WIZCHIP_READ
 985              	.LVL85:
 986              		.loc 1 323 4 discriminator 1 view .LVU258
 987 0018 00F00F00 		and	r0, r0, #15
ARM GAS  /tmp/ccClG7BW.s 			page 26


 988 001c 0128     		cmp	r0, #1
 989 001e 73D1     		bne	.L102
 990              		.loc 1 323 4 is_stmt 1 discriminator 2 view .LVU259
 991              		.loc 1 323 29 discriminator 2 view .LVU260
 324:BSP/socket.c  ****    CHECK_SOCKDATA();
 992              		.loc 1 324 4 view .LVU261
 993              		.loc 1 324 4 view .LVU262
 994 0020 002C     		cmp	r4, #0
 995 0022 74D0     		beq	.L103
 996              		.loc 1 324 4 discriminator 2 view .LVU263
 997              		.loc 1 324 20 discriminator 2 view .LVU264
 325:BSP/socket.c  ****    tmp = getSn_SR(sn);
 998              		.loc 1 325 4 view .LVU265
 999              		.loc 1 325 10 is_stmt 0 view .LVU266
 1000 0024 FF00     		lsls	r7, r7, #3
 1001 0026 07F54078 		add	r8, r7, #768
 1002 002a 4046     		mov	r0, r8
 1003 002c FFF7FEFF 		bl	WIZCHIP_READ
 1004              	.LVL86:
 326:BSP/socket.c  ****    if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 1005              		.loc 1 326 4 is_stmt 1 view .LVU267
 1006              		.loc 1 326 6 is_stmt 0 view .LVU268
 1007 0030 1728     		cmp	r0, #23
 1008 0032 01D0     		beq	.L93
 1009              		.loc 1 326 31 discriminator 1 view .LVU269
 1010 0034 1C28     		cmp	r0, #28
 1011 0036 6DD1     		bne	.L104
 1012              	.L93:
 327:BSP/socket.c  ****    if( sock_is_sending & (1<<sn) )
 1013              		.loc 1 327 4 is_stmt 1 view .LVU270
 1014              		.loc 1 327 8 is_stmt 0 view .LVU271
 1015 0038 384B     		ldr	r3, .L115
 1016 003a 1B88     		ldrh	r3, [r3]
 1017 003c 2B41     		asrs	r3, r3, r5
 1018              		.loc 1 327 6 view .LVU272
 1019 003e 13F0010F 		tst	r3, #1
 1020 0042 19D0     		beq	.L94
 328:BSP/socket.c  ****    {
 329:BSP/socket.c  ****       tmp = getSn_IR(sn);
 1021              		.loc 1 329 7 is_stmt 1 view .LVU273
 1022              		.loc 1 329 13 is_stmt 0 view .LVU274
 1023 0044 07F50076 		add	r6, r7, #512
 1024 0048 3046     		mov	r0, r6
 1025              	.LVL87:
 1026              		.loc 1 329 13 view .LVU275
 1027 004a FFF7FEFF 		bl	WIZCHIP_READ
 1028              	.LVL88:
 330:BSP/socket.c  ****       if(tmp & Sn_IR_SENDOK)
 1029              		.loc 1 330 7 is_stmt 1 view .LVU276
 1030              		.loc 1 330 9 is_stmt 0 view .LVU277
 1031 004e 10F0100F 		tst	r0, #16
 1032 0052 05D1     		bne	.L111
 331:BSP/socket.c  ****       {
 332:BSP/socket.c  ****          setSn_IR(sn, Sn_IR_SENDOK);
 333:BSP/socket.c  ****          //M20150401 : Typing Error
 334:BSP/socket.c  ****          //#if _WZICHIP_ == 5200
 335:BSP/socket.c  ****          #if _WIZCHIP_ == 5200
ARM GAS  /tmp/ccClG7BW.s 			page 27


 336:BSP/socket.c  ****             if(getSn_TX_RD(sn) != sock_next_rd[sn])
 337:BSP/socket.c  ****             {
 338:BSP/socket.c  ****                setSn_CR(sn,Sn_CR_SEND);
 339:BSP/socket.c  ****                while(getSn_CR(sn));
 340:BSP/socket.c  ****                return SOCK_BUSY;
 341:BSP/socket.c  ****             }
 342:BSP/socket.c  ****          #endif
 343:BSP/socket.c  ****          sock_is_sending &= ~(1<<sn);         
 344:BSP/socket.c  ****       }
 345:BSP/socket.c  ****       else if(tmp & Sn_IR_TIMEOUT)
 1033              		.loc 1 345 12 is_stmt 1 view .LVU278
 1034              		.loc 1 345 14 is_stmt 0 view .LVU279
 1035 0054 10F0080F 		tst	r0, #8
 1036 0058 18D1     		bne	.L112
 346:BSP/socket.c  ****       {
 347:BSP/socket.c  ****          close(sn);
 348:BSP/socket.c  ****          return SOCKERR_TIMEOUT;
 349:BSP/socket.c  ****       }
 350:BSP/socket.c  ****       else return SOCK_BUSY;
 1037              		.loc 1 350 19 view .LVU280
 1038 005a 0020     		movs	r0, #0
 1039              	.LVL89:
 1040              	.L91:
 351:BSP/socket.c  ****    }
 352:BSP/socket.c  ****    freesize = getSn_TxMAX(sn);
 353:BSP/socket.c  ****    if (len > freesize) len = freesize; // check size not to exceed MAX size.
 354:BSP/socket.c  ****    while(1)
 355:BSP/socket.c  ****    {
 356:BSP/socket.c  ****       freesize = getSn_TX_FSR(sn);
 357:BSP/socket.c  ****       tmp = getSn_SR(sn);
 358:BSP/socket.c  ****       if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 359:BSP/socket.c  ****       {
 360:BSP/socket.c  ****          close(sn);
 361:BSP/socket.c  ****          return SOCKERR_SOCKSTATUS;
 362:BSP/socket.c  ****       }
 363:BSP/socket.c  ****       if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 364:BSP/socket.c  ****       if(len <= freesize) break;
 365:BSP/socket.c  ****    }
 366:BSP/socket.c  ****    wiz_send_data(sn, buf, len);
 367:BSP/socket.c  ****    #if _WIZCHIP_ == 5200
 368:BSP/socket.c  ****       sock_next_rd[sn] = getSn_TX_RD(sn) + len;
 369:BSP/socket.c  ****    #endif
 370:BSP/socket.c  **** 
 371:BSP/socket.c  ****    #if _WIZCHIP_ == 5300
 372:BSP/socket.c  ****       setSn_TX_WRSR(sn,len);
 373:BSP/socket.c  ****    #endif
 374:BSP/socket.c  ****    
 375:BSP/socket.c  ****    setSn_CR(sn,Sn_CR_SEND);
 376:BSP/socket.c  ****    /* wait to process the command... */
 377:BSP/socket.c  ****    while(getSn_CR(sn));
 378:BSP/socket.c  ****    sock_is_sending |= (1 << sn);
 379:BSP/socket.c  ****    //M20150409 : Explicit Type Casting
 380:BSP/socket.c  ****    //return len;
 381:BSP/socket.c  ****    return (int32_t)len;
 382:BSP/socket.c  **** }
 1041              		.loc 1 382 1 view .LVU281
 1042 005c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/ccClG7BW.s 			page 28


 1043              	.LVL90:
 1044              	.L111:
 332:BSP/socket.c  ****          //M20150401 : Typing Error
 1045              		.loc 1 332 10 is_stmt 1 view .LVU282
 1046 0060 1021     		movs	r1, #16
 1047 0062 3046     		mov	r0, r6
 1048              	.LVL91:
 332:BSP/socket.c  ****          //M20150401 : Typing Error
 1049              		.loc 1 332 10 is_stmt 0 view .LVU283
 1050 0064 FFF7FEFF 		bl	WIZCHIP_WRITE
 1051              	.LVL92:
 343:BSP/socket.c  ****       }
 1052              		.loc 1 343 10 is_stmt 1 view .LVU284
 343:BSP/socket.c  ****       }
 1053              		.loc 1 343 32 is_stmt 0 view .LVU285
 1054 0068 0123     		movs	r3, #1
 1055 006a AB40     		lsls	r3, r3, r5
 343:BSP/socket.c  ****       }
 1056              		.loc 1 343 26 view .LVU286
 1057 006c DB43     		mvns	r3, r3
 1058 006e 1BB2     		sxth	r3, r3
 1059 0070 2A4A     		ldr	r2, .L115
 1060 0072 1188     		ldrh	r1, [r2]
 1061 0074 0B40     		ands	r3, r3, r1
 1062 0076 1380     		strh	r3, [r2]	@ movhi
 1063              	.LVL93:
 1064              	.L94:
 352:BSP/socket.c  ****    if (len > freesize) len = freesize; // check size not to exceed MAX size.
 1065              		.loc 1 352 4 is_stmt 1 view .LVU287
 352:BSP/socket.c  ****    if (len > freesize) len = freesize; // check size not to exceed MAX size.
 1066              		.loc 1 352 15 is_stmt 0 view .LVU288
 1067 0078 07F5F850 		add	r0, r7, #7936
 1068 007c FFF7FEFF 		bl	WIZCHIP_READ
 1069              	.LVL94:
 352:BSP/socket.c  ****    if (len > freesize) len = freesize; // check size not to exceed MAX size.
 1070              		.loc 1 352 13 discriminator 1 view .LVU289
 1071 0080 8602     		lsls	r6, r0, #10
 1072 0082 B6B2     		uxth	r6, r6
 1073              	.LVL95:
 353:BSP/socket.c  ****    while(1)
 1074              		.loc 1 353 4 is_stmt 1 view .LVU290
 353:BSP/socket.c  ****    while(1)
 1075              		.loc 1 353 7 is_stmt 0 view .LVU291
 1076 0084 B442     		cmp	r4, r6
 1077 0086 0FD8     		bhi	.L99
 1078 0088 2646     		mov	r6, r4
 1079              	.LVL96:
 353:BSP/socket.c  ****    while(1)
 1080              		.loc 1 353 7 view .LVU292
 1081 008a 0DE0     		b	.L99
 1082              	.LVL97:
 1083              	.L112:
 347:BSP/socket.c  ****          return SOCKERR_TIMEOUT;
 1084              		.loc 1 347 10 is_stmt 1 view .LVU293
 1085 008c 2846     		mov	r0, r5
 1086              	.LVL98:
 347:BSP/socket.c  ****          return SOCKERR_TIMEOUT;
ARM GAS  /tmp/ccClG7BW.s 			page 29


 1087              		.loc 1 347 10 is_stmt 0 view .LVU294
 1088 008e FFF7FEFF 		bl	close
 1089              	.LVL99:
 348:BSP/socket.c  ****       }
 1090              		.loc 1 348 10 is_stmt 1 view .LVU295
 348:BSP/socket.c  ****       }
 1091              		.loc 1 348 17 is_stmt 0 view .LVU296
 1092 0092 6FF00C00 		mvn	r0, #12
 1093 0096 E1E7     		b	.L91
 1094              	.LVL100:
 1095              	.L114:
 360:BSP/socket.c  ****          return SOCKERR_SOCKSTATUS;
 1096              		.loc 1 360 10 is_stmt 1 view .LVU297
 1097 0098 2846     		mov	r0, r5
 1098              	.LVL101:
 360:BSP/socket.c  ****          return SOCKERR_SOCKSTATUS;
 1099              		.loc 1 360 10 is_stmt 0 view .LVU298
 1100 009a FFF7FEFF 		bl	close
 1101              	.LVL102:
 361:BSP/socket.c  ****       }
 1102              		.loc 1 361 10 is_stmt 1 view .LVU299
 361:BSP/socket.c  ****       }
 1103              		.loc 1 361 17 is_stmt 0 view .LVU300
 1104 009e 6FF00600 		mvn	r0, #6
 1105 00a2 DBE7     		b	.L91
 1106              	.LVL103:
 1107              	.L98:
 364:BSP/socket.c  ****    }
 1108              		.loc 1 364 7 is_stmt 1 view .LVU301
 364:BSP/socket.c  ****    }
 1109              		.loc 1 364 9 is_stmt 0 view .LVU302
 1110 00a4 B442     		cmp	r4, r6
 1111 00a6 14D2     		bcs	.L113
 1112              	.LVL104:
 1113              	.L99:
 354:BSP/socket.c  ****    {
 1114              		.loc 1 354 4 is_stmt 1 view .LVU303
 356:BSP/socket.c  ****       tmp = getSn_SR(sn);
 1115              		.loc 1 356 7 view .LVU304
 356:BSP/socket.c  ****       tmp = getSn_SR(sn);
 1116              		.loc 1 356 18 is_stmt 0 view .LVU305
 1117 00a8 2846     		mov	r0, r5
 1118 00aa FFF7FEFF 		bl	getSn_TX_FSR
 1119              	.LVL105:
 1120 00ae 0446     		mov	r4, r0
 1121              	.LVL106:
 357:BSP/socket.c  ****       if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 1122              		.loc 1 357 7 is_stmt 1 view .LVU306
 357:BSP/socket.c  ****       if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 1123              		.loc 1 357 13 is_stmt 0 view .LVU307
 1124 00b0 4046     		mov	r0, r8
 1125 00b2 FFF7FEFF 		bl	WIZCHIP_READ
 1126              	.LVL107:
 358:BSP/socket.c  ****       {
 1127              		.loc 1 358 7 is_stmt 1 view .LVU308
 358:BSP/socket.c  ****       {
 1128              		.loc 1 358 10 is_stmt 0 view .LVU309
ARM GAS  /tmp/ccClG7BW.s 			page 30


 1129 00b6 1728     		cmp	r0, #23
 1130 00b8 01D0     		beq	.L97
 358:BSP/socket.c  ****       {
 1131              		.loc 1 358 37 discriminator 1 view .LVU310
 1132 00ba 1C28     		cmp	r0, #28
 1133 00bc ECD1     		bne	.L114
 1134              	.L97:
 363:BSP/socket.c  ****       if(len <= freesize) break;
 1135              		.loc 1 363 7 is_stmt 1 view .LVU311
 363:BSP/socket.c  ****       if(len <= freesize) break;
 1136              		.loc 1 363 11 is_stmt 0 view .LVU312
 1137 00be 184B     		ldr	r3, .L115+4
 1138 00c0 1B88     		ldrh	r3, [r3]
 1139 00c2 2B41     		asrs	r3, r3, r5
 363:BSP/socket.c  ****       if(len <= freesize) break;
 1140              		.loc 1 363 9 view .LVU313
 1141 00c4 13F0010F 		tst	r3, #1
 1142 00c8 ECD0     		beq	.L98
 363:BSP/socket.c  ****       if(len <= freesize) break;
 1143              		.loc 1 363 36 discriminator 1 view .LVU314
 1144 00ca B442     		cmp	r4, r6
 1145 00cc EAD2     		bcs	.L98
 363:BSP/socket.c  ****       if(len <= freesize) break;
 1146              		.loc 1 363 65 discriminator 2 view .LVU315
 1147 00ce 0020     		movs	r0, #0
 1148              	.LVL108:
 363:BSP/socket.c  ****       if(len <= freesize) break;
 1149              		.loc 1 363 65 discriminator 2 view .LVU316
 1150 00d0 C4E7     		b	.L91
 1151              	.LVL109:
 1152              	.L113:
 366:BSP/socket.c  ****    #if _WIZCHIP_ == 5200
 1153              		.loc 1 366 4 is_stmt 1 view .LVU317
 1154 00d2 3246     		mov	r2, r6
 1155 00d4 4946     		mov	r1, r9
 1156 00d6 2846     		mov	r0, r5
 1157              	.LVL110:
 366:BSP/socket.c  ****    #if _WIZCHIP_ == 5200
 1158              		.loc 1 366 4 is_stmt 0 view .LVU318
 1159 00d8 FFF7FEFF 		bl	wiz_send_data
 1160              	.LVL111:
 375:BSP/socket.c  ****    /* wait to process the command... */
 1161              		.loc 1 375 4 is_stmt 1 view .LVU319
 1162 00dc 07F58077 		add	r7, r7, #256
 1163 00e0 2021     		movs	r1, #32
 1164 00e2 3846     		mov	r0, r7
 1165 00e4 FFF7FEFF 		bl	WIZCHIP_WRITE
 1166              	.LVL112:
 377:BSP/socket.c  ****    sock_is_sending |= (1 << sn);
 1167              		.loc 1 377 4 view .LVU320
 1168              	.L100:
 377:BSP/socket.c  ****    sock_is_sending |= (1 << sn);
 1169              		.loc 1 377 10 discriminator 1 view .LVU321
 1170 00e8 3846     		mov	r0, r7
 1171 00ea FFF7FEFF 		bl	WIZCHIP_READ
 1172              	.LVL113:
 1173 00ee 0028     		cmp	r0, #0
ARM GAS  /tmp/ccClG7BW.s 			page 31


 1174 00f0 FAD1     		bne	.L100
 378:BSP/socket.c  ****    //M20150409 : Explicit Type Casting
 1175              		.loc 1 378 4 view .LVU322
 378:BSP/socket.c  ****    //M20150409 : Explicit Type Casting
 1176              		.loc 1 378 26 is_stmt 0 view .LVU323
 1177 00f2 0123     		movs	r3, #1
 1178 00f4 AB40     		lsls	r3, r3, r5
 378:BSP/socket.c  ****    //M20150409 : Explicit Type Casting
 1179              		.loc 1 378 20 view .LVU324
 1180 00f6 094A     		ldr	r2, .L115
 1181 00f8 1188     		ldrh	r1, [r2]
 1182 00fa 0B43     		orrs	r3, r3, r1
 1183 00fc 1380     		strh	r3, [r2]	@ movhi
 381:BSP/socket.c  **** }
 1184              		.loc 1 381 4 is_stmt 1 view .LVU325
 381:BSP/socket.c  **** }
 1185              		.loc 1 381 11 is_stmt 0 view .LVU326
 1186 00fe 3046     		mov	r0, r6
 1187 0100 ACE7     		b	.L91
 1188              	.LVL114:
 1189              	.L101:
 1190              	.LCFI17:
 1191              		.cfi_def_cfa_offset 0
 1192              		.cfi_restore 3
 1193              		.cfi_restore 4
 1194              		.cfi_restore 5
 1195              		.cfi_restore 6
 1196              		.cfi_restore 7
 1197              		.cfi_restore 8
 1198              		.cfi_restore 9
 1199              		.cfi_restore 14
 322:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 1200              		.loc 1 322 4 discriminator 1 view .LVU327
 1201 0102 4FF0FF30 		mov	r0, #-1
 1202              	.LVL115:
 1203              		.loc 1 382 1 view .LVU328
 1204 0106 7047     		bx	lr
 1205              	.LVL116:
 1206              	.L102:
 1207              	.LCFI18:
 1208              		.cfi_def_cfa_offset 32
 1209              		.cfi_offset 3, -32
 1210              		.cfi_offset 4, -28
 1211              		.cfi_offset 5, -24
 1212              		.cfi_offset 6, -20
 1213              		.cfi_offset 7, -16
 1214              		.cfi_offset 8, -12
 1215              		.cfi_offset 9, -8
 1216              		.cfi_offset 14, -4
 323:BSP/socket.c  ****    CHECK_SOCKDATA();
 1217              		.loc 1 323 4 discriminator 1 view .LVU329
 1218 0108 6FF00400 		mvn	r0, #4
 1219 010c A6E7     		b	.L91
 1220              	.L103:
 324:BSP/socket.c  ****    tmp = getSn_SR(sn);
 1221              		.loc 1 324 4 discriminator 1 view .LVU330
 1222 010e 6FF00D00 		mvn	r0, #13
ARM GAS  /tmp/ccClG7BW.s 			page 32


 1223 0112 A3E7     		b	.L91
 1224              	.LVL117:
 1225              	.L104:
 326:BSP/socket.c  ****    if( sock_is_sending & (1<<sn) )
 1226              		.loc 1 326 65 discriminator 2 view .LVU331
 1227 0114 6FF00600 		mvn	r0, #6
 1228              	.LVL118:
 326:BSP/socket.c  ****    if( sock_is_sending & (1<<sn) )
 1229              		.loc 1 326 65 discriminator 2 view .LVU332
 1230 0118 A0E7     		b	.L91
 1231              	.L116:
 1232 011a 00BF     		.align	2
 1233              	.L115:
 1234 011c 00000000 		.word	sock_is_sending
 1235 0120 00000000 		.word	sock_io_mode
 1236              		.cfi_endproc
 1237              	.LFE5:
 1239              		.section	.text.recv,"ax",%progbits
 1240              		.align	1
 1241              		.global	recv
 1242              		.syntax unified
 1243              		.thumb
 1244              		.thumb_func
 1246              	recv:
 1247              	.LVL119:
 1248              	.LFB6:
 383:BSP/socket.c  **** 
 384:BSP/socket.c  **** 
 385:BSP/socket.c  **** int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
 386:BSP/socket.c  **** {
 1249              		.loc 1 386 1 is_stmt 1 view -0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 387:BSP/socket.c  ****    uint8_t  tmp = 0;
 1253              		.loc 1 387 4 view .LVU334
 388:BSP/socket.c  ****    uint16_t recvsize = 0;
 1254              		.loc 1 388 4 view .LVU335
 389:BSP/socket.c  **** //A20150601 : For integarating with W5300
 390:BSP/socket.c  **** #if   _WIZCHIP_ == 5300
 391:BSP/socket.c  ****    uint8_t head[2];
 392:BSP/socket.c  ****    uint16_t mr;
 393:BSP/socket.c  **** #endif
 394:BSP/socket.c  **** //
 395:BSP/socket.c  ****    CHECK_SOCKNUM();
 1255              		.loc 1 395 4 view .LVU336
 1256              		.loc 1 395 4 view .LVU337
 1257 0000 0828     		cmp	r0, #8
 1258 0002 5FD8     		bhi	.L127
 386:BSP/socket.c  ****    uint8_t  tmp = 0;
 1259              		.loc 1 386 1 is_stmt 0 view .LVU338
 1260 0004 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1261              	.LCFI19:
 1262              		.cfi_def_cfa_offset 32
 1263              		.cfi_offset 3, -32
 1264              		.cfi_offset 4, -28
 1265              		.cfi_offset 5, -24
ARM GAS  /tmp/ccClG7BW.s 			page 33


 1266              		.cfi_offset 6, -20
 1267              		.cfi_offset 7, -16
 1268              		.cfi_offset 8, -12
 1269              		.cfi_offset 9, -8
 1270              		.cfi_offset 14, -4
 1271 0008 0546     		mov	r5, r0
 1272 000a 8846     		mov	r8, r1
 1273 000c 1446     		mov	r4, r2
 1274              		.loc 1 395 4 is_stmt 1 discriminator 2 view .LVU339
 1275              		.loc 1 395 19 discriminator 2 view .LVU340
 396:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 1276              		.loc 1 396 4 view .LVU341
 1277              		.loc 1 396 4 view .LVU342
 1278 000e 8600     		lsls	r6, r0, #2
 1279 0010 0136     		adds	r6, r6, #1
 1280 0012 F000     		lsls	r0, r6, #3
 1281              	.LVL120:
 1282              		.loc 1 396 4 is_stmt 0 view .LVU343
 1283 0014 FFF7FEFF 		bl	WIZCHIP_READ
 1284              	.LVL121:
 1285              		.loc 1 396 4 discriminator 1 view .LVU344
 1286 0018 00F00F00 		and	r0, r0, #15
 1287 001c 0128     		cmp	r0, #1
 1288 001e 54D1     		bne	.L128
 1289              		.loc 1 396 4 is_stmt 1 discriminator 2 view .LVU345
 1290              		.loc 1 396 29 discriminator 2 view .LVU346
 397:BSP/socket.c  ****    CHECK_SOCKDATA();
 1291              		.loc 1 397 4 view .LVU347
 1292              		.loc 1 397 4 view .LVU348
 1293 0020 002C     		cmp	r4, #0
 1294 0022 55D0     		beq	.L129
 1295              		.loc 1 397 4 discriminator 2 view .LVU349
 1296              		.loc 1 397 20 discriminator 2 view .LVU350
 398:BSP/socket.c  ****    
 399:BSP/socket.c  ****    recvsize = getSn_RxMAX(sn);
 1297              		.loc 1 399 4 view .LVU351
 1298              		.loc 1 399 15 is_stmt 0 view .LVU352
 1299 0024 F600     		lsls	r6, r6, #3
 1300 0026 06F5F050 		add	r0, r6, #7680
 1301 002a FFF7FEFF 		bl	WIZCHIP_READ
 1302              	.LVL122:
 1303              		.loc 1 399 13 discriminator 1 view .LVU353
 1304 002e 8702     		lsls	r7, r0, #10
 1305 0030 BFB2     		uxth	r7, r7
 1306              	.LVL123:
 400:BSP/socket.c  ****    if(recvsize < len) len = recvsize;
 1307              		.loc 1 400 4 is_stmt 1 view .LVU354
 1308              		.loc 1 400 6 is_stmt 0 view .LVU355
 1309 0032 BC42     		cmp	r4, r7
 1310 0034 0ED8     		bhi	.L124
 1311 0036 2746     		mov	r7, r4
 1312              	.LVL124:
 1313              		.loc 1 400 6 view .LVU356
 1314 0038 0CE0     		b	.L124
 1315              	.LVL125:
 1316              	.L135:
 401:BSP/socket.c  ****       
ARM GAS  /tmp/ccClG7BW.s 			page 34


 402:BSP/socket.c  **** //A20150601 : For Integrating with W5300
 403:BSP/socket.c  **** #if _WIZCHIP_ == 5300
 404:BSP/socket.c  ****    //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
 405:BSP/socket.c  ****    if(sock_remained_size[sn] == 0)
 406:BSP/socket.c  ****    {
 407:BSP/socket.c  **** #endif
 408:BSP/socket.c  **** //
 409:BSP/socket.c  ****       while(1)
 410:BSP/socket.c  ****       {
 411:BSP/socket.c  ****          recvsize = getSn_RX_RSR(sn);
 412:BSP/socket.c  ****          tmp = getSn_SR(sn);
 413:BSP/socket.c  ****          if (tmp != SOCK_ESTABLISHED)
 414:BSP/socket.c  ****          {
 415:BSP/socket.c  ****             if(tmp == SOCK_CLOSE_WAIT)
 416:BSP/socket.c  ****             {
 417:BSP/socket.c  ****                if(recvsize != 0) break;
 418:BSP/socket.c  ****                else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 419:BSP/socket.c  ****                {
 420:BSP/socket.c  ****                   close(sn);
 1317              		.loc 1 420 19 is_stmt 1 view .LVU357
 1318 003a 2846     		mov	r0, r5
 1319 003c FFF7FEFF 		bl	close
 1320              	.LVL126:
 421:BSP/socket.c  ****                   return SOCKERR_SOCKSTATUS;
 1321              		.loc 1 421 19 view .LVU358
 1322              		.loc 1 421 26 is_stmt 0 view .LVU359
 1323 0040 6FF00600 		mvn	r0, #6
 1324 0044 3CE0     		b	.L117
 1325              	.LVL127:
 1326              	.L121:
 422:BSP/socket.c  ****                }
 423:BSP/socket.c  ****             }
 424:BSP/socket.c  ****             else
 425:BSP/socket.c  ****             {
 426:BSP/socket.c  ****                close(sn);
 1327              		.loc 1 426 16 is_stmt 1 view .LVU360
 1328 0046 2846     		mov	r0, r5
 1329              	.LVL128:
 1330              		.loc 1 426 16 is_stmt 0 view .LVU361
 1331 0048 FFF7FEFF 		bl	close
 1332              	.LVL129:
 427:BSP/socket.c  ****                return SOCKERR_SOCKSTATUS;
 1333              		.loc 1 427 16 is_stmt 1 view .LVU362
 1334              		.loc 1 427 23 is_stmt 0 view .LVU363
 1335 004c 6FF00600 		mvn	r0, #6
 1336 0050 36E0     		b	.L117
 1337              	.L123:
 428:BSP/socket.c  ****             }
 429:BSP/socket.c  ****          }
 430:BSP/socket.c  ****          if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 431:BSP/socket.c  ****          if(recvsize != 0) break;
 1338              		.loc 1 431 10 is_stmt 1 view .LVU364
 1339              		.loc 1 431 12 is_stmt 0 view .LVU365
 1340 0052 0CBB     		cbnz	r4, .L122
 1341              	.LVL130:
 1342              	.L124:
 409:BSP/socket.c  ****       {
ARM GAS  /tmp/ccClG7BW.s 			page 35


 1343              		.loc 1 409 7 is_stmt 1 view .LVU366
 411:BSP/socket.c  ****          tmp = getSn_SR(sn);
 1344              		.loc 1 411 10 view .LVU367
 411:BSP/socket.c  ****          tmp = getSn_SR(sn);
 1345              		.loc 1 411 21 is_stmt 0 view .LVU368
 1346 0054 2846     		mov	r0, r5
 1347 0056 FFF7FEFF 		bl	getSn_RX_RSR
 1348              	.LVL131:
 1349 005a 0446     		mov	r4, r0
 1350              	.LVL132:
 412:BSP/socket.c  ****          if (tmp != SOCK_ESTABLISHED)
 1351              		.loc 1 412 10 is_stmt 1 view .LVU369
 412:BSP/socket.c  ****          if (tmp != SOCK_ESTABLISHED)
 1352              		.loc 1 412 16 is_stmt 0 view .LVU370
 1353 005c 06F54070 		add	r0, r6, #768
 1354 0060 FFF7FEFF 		bl	WIZCHIP_READ
 1355              	.LVL133:
 413:BSP/socket.c  ****          {
 1356              		.loc 1 413 10 is_stmt 1 view .LVU371
 413:BSP/socket.c  ****          {
 1357              		.loc 1 413 13 is_stmt 0 view .LVU372
 1358 0064 1728     		cmp	r0, #23
 1359 0066 0DD0     		beq	.L120
 415:BSP/socket.c  ****             {
 1360              		.loc 1 415 13 is_stmt 1 view .LVU373
 415:BSP/socket.c  ****             {
 1361              		.loc 1 415 15 is_stmt 0 view .LVU374
 1362 0068 1C28     		cmp	r0, #28
 1363 006a ECD1     		bne	.L121
 417:BSP/socket.c  ****                else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 1364              		.loc 1 417 16 is_stmt 1 view .LVU375
 417:BSP/socket.c  ****                else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 1365              		.loc 1 417 18 is_stmt 0 view .LVU376
 1366 006c A4B9     		cbnz	r4, .L122
 418:BSP/socket.c  ****                {
 1367              		.loc 1 418 21 is_stmt 1 view .LVU377
 418:BSP/socket.c  ****                {
 1368              		.loc 1 418 24 is_stmt 0 view .LVU378
 1369 006e 2846     		mov	r0, r5
 1370              	.LVL134:
 418:BSP/socket.c  ****                {
 1371              		.loc 1 418 24 view .LVU379
 1372 0070 FFF7FEFF 		bl	getSn_TX_FSR
 1373              	.LVL135:
 1374 0074 8146     		mov	r9, r0
 418:BSP/socket.c  ****                {
 1375              		.loc 1 418 44 discriminator 1 view .LVU380
 1376 0076 06F5F850 		add	r0, r6, #7936
 1377 007a FFF7FEFF 		bl	WIZCHIP_READ
 1378              	.LVL136:
 418:BSP/socket.c  ****                {
 1379              		.loc 1 418 23 discriminator 2 view .LVU381
 1380 007e B9EB802F 		cmp	r9, r0, lsl #10
 1381 0082 DAD0     		beq	.L135
 1382              	.L120:
 430:BSP/socket.c  ****          if(recvsize != 0) break;
 1383              		.loc 1 430 10 is_stmt 1 view .LVU382
ARM GAS  /tmp/ccClG7BW.s 			page 36


 430:BSP/socket.c  ****          if(recvsize != 0) break;
 1384              		.loc 1 430 13 is_stmt 0 view .LVU383
 1385 0084 144B     		ldr	r3, .L136
 1386 0086 1B88     		ldrh	r3, [r3]
 1387 0088 2B41     		asrs	r3, r3, r5
 430:BSP/socket.c  ****          if(recvsize != 0) break;
 1388              		.loc 1 430 12 view .LVU384
 1389 008a 13F0010F 		tst	r3, #1
 1390 008e E0D0     		beq	.L123
 430:BSP/socket.c  ****          if(recvsize != 0) break;
 1391              		.loc 1 430 38 discriminator 1 view .LVU385
 1392 0090 002C     		cmp	r4, #0
 1393 0092 DED1     		bne	.L123
 430:BSP/socket.c  ****          if(recvsize != 0) break;
 1394              		.loc 1 430 65 discriminator 2 view .LVU386
 1395 0094 0020     		movs	r0, #0
 1396 0096 13E0     		b	.L117
 1397              	.L122:
 432:BSP/socket.c  ****       };
 1398              		.loc 1 432 8 is_stmt 1 view .LVU387
 433:BSP/socket.c  **** #if _WIZCHIP_ == 5300
 434:BSP/socket.c  ****    }
 435:BSP/socket.c  **** #endif
 436:BSP/socket.c  **** 
 437:BSP/socket.c  **** //A20150601 : For integrating with W5300
 438:BSP/socket.c  **** #if _WIZCHIP_ == 5300
 439:BSP/socket.c  ****    if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 440:BSP/socket.c  ****    {
 441:BSP/socket.c  ****       mr = getMR();
 442:BSP/socket.c  ****       if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 443:BSP/socket.c  ****       {
 444:BSP/socket.c  ****          wiz_recv_data(sn,head,2);
 445:BSP/socket.c  ****          if(mr & MR_FS)
 446:BSP/socket.c  ****             recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 447:BSP/socket.c  ****          else
 448:BSP/socket.c  ****             recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 449:BSP/socket.c  ****          sock_pack_info[sn] = PACK_FIRST;
 450:BSP/socket.c  ****       }
 451:BSP/socket.c  ****       sock_remained_size[sn] = recvsize;
 452:BSP/socket.c  ****    }
 453:BSP/socket.c  ****    if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 454:BSP/socket.c  ****    recvsize = len;   
 455:BSP/socket.c  ****    if(sock_pack_info[sn] & PACK_FIFOBYTE)
 456:BSP/socket.c  ****    {
 457:BSP/socket.c  ****       *buf = sock_remained_byte[sn];
 458:BSP/socket.c  ****       buf++;
 459:BSP/socket.c  ****       sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 460:BSP/socket.c  ****       recvsize -= 1;
 461:BSP/socket.c  ****       sock_remained_size[sn] -= 1;
 462:BSP/socket.c  ****    }
 463:BSP/socket.c  ****    if(recvsize != 0)
 464:BSP/socket.c  ****    {
 465:BSP/socket.c  ****       wiz_recv_data(sn, buf, recvsize);
 466:BSP/socket.c  ****       setSn_CR(sn,Sn_CR_RECV);
 467:BSP/socket.c  ****       while(getSn_CR(sn));
 468:BSP/socket.c  ****    }
 469:BSP/socket.c  ****    sock_remained_size[sn] -= recvsize;
ARM GAS  /tmp/ccClG7BW.s 			page 37


 470:BSP/socket.c  ****    if(sock_remained_size[sn] != 0)
 471:BSP/socket.c  ****    {
 472:BSP/socket.c  ****       sock_pack_info[sn] |= PACK_REMAINED;
 473:BSP/socket.c  ****       if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 474:BSP/socket.c  ****    }
 475:BSP/socket.c  ****    else sock_pack_info[sn] = PACK_COMPLETED;
 476:BSP/socket.c  ****    if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 477:BSP/socket.c  ****    //len = recvsize;
 478:BSP/socket.c  **** #else   
 479:BSP/socket.c  ****    if(recvsize < len) len = recvsize;   
 1399              		.loc 1 479 4 view .LVU388
 1400              		.loc 1 479 6 is_stmt 0 view .LVU389
 1401 0098 BC42     		cmp	r4, r7
 1402 009a 00D3     		bcc	.L125
 1403 009c 3C46     		mov	r4, r7
 1404              	.LVL137:
 1405              	.L125:
 480:BSP/socket.c  ****    wiz_recv_data(sn, buf, len);
 1406              		.loc 1 480 4 is_stmt 1 view .LVU390
 1407 009e 2246     		mov	r2, r4
 1408 00a0 4146     		mov	r1, r8
 1409 00a2 2846     		mov	r0, r5
 1410 00a4 FFF7FEFF 		bl	wiz_recv_data
 1411              	.LVL138:
 481:BSP/socket.c  ****    setSn_CR(sn,Sn_CR_RECV);
 1412              		.loc 1 481 4 view .LVU391
 1413 00a8 06F58076 		add	r6, r6, #256
 1414 00ac 4021     		movs	r1, #64
 1415 00ae 3046     		mov	r0, r6
 1416 00b0 FFF7FEFF 		bl	WIZCHIP_WRITE
 1417              	.LVL139:
 482:BSP/socket.c  ****    while(getSn_CR(sn));
 1418              		.loc 1 482 4 view .LVU392
 1419              	.L126:
 1420              		.loc 1 482 10 discriminator 1 view .LVU393
 1421 00b4 3046     		mov	r0, r6
 1422 00b6 FFF7FEFF 		bl	WIZCHIP_READ
 1423              	.LVL140:
 1424 00ba 0028     		cmp	r0, #0
 1425 00bc FAD1     		bne	.L126
 483:BSP/socket.c  **** #endif
 484:BSP/socket.c  ****      
 485:BSP/socket.c  ****    //M20150409 : Explicit Type Casting
 486:BSP/socket.c  ****    //return len;
 487:BSP/socket.c  ****    return (int32_t)len;
 1426              		.loc 1 487 4 view .LVU394
 1427              		.loc 1 487 11 is_stmt 0 view .LVU395
 1428 00be 2046     		mov	r0, r4
 1429              	.LVL141:
 1430              	.L117:
 488:BSP/socket.c  **** }
 1431              		.loc 1 488 1 view .LVU396
 1432 00c0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1433              	.LVL142:
 1434              	.L127:
 1435              	.LCFI20:
 1436              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccClG7BW.s 			page 38


 1437              		.cfi_restore 3
 1438              		.cfi_restore 4
 1439              		.cfi_restore 5
 1440              		.cfi_restore 6
 1441              		.cfi_restore 7
 1442              		.cfi_restore 8
 1443              		.cfi_restore 9
 1444              		.cfi_restore 14
 395:BSP/socket.c  ****    CHECK_SOCKMODE(Sn_MR_TCP);
 1445              		.loc 1 395 4 discriminator 1 view .LVU397
 1446 00c4 4FF0FF30 		mov	r0, #-1
 1447              	.LVL143:
 1448              		.loc 1 488 1 view .LVU398
 1449 00c8 7047     		bx	lr
 1450              	.LVL144:
 1451              	.L128:
 1452              	.LCFI21:
 1453              		.cfi_def_cfa_offset 32
 1454              		.cfi_offset 3, -32
 1455              		.cfi_offset 4, -28
 1456              		.cfi_offset 5, -24
 1457              		.cfi_offset 6, -20
 1458              		.cfi_offset 7, -16
 1459              		.cfi_offset 8, -12
 1460              		.cfi_offset 9, -8
 1461              		.cfi_offset 14, -4
 396:BSP/socket.c  ****    CHECK_SOCKDATA();
 1462              		.loc 1 396 4 discriminator 1 view .LVU399
 1463 00ca 6FF00400 		mvn	r0, #4
 1464 00ce F7E7     		b	.L117
 1465              	.L129:
 397:BSP/socket.c  ****    
 1466              		.loc 1 397 4 discriminator 1 view .LVU400
 1467 00d0 6FF00D00 		mvn	r0, #13
 1468 00d4 F4E7     		b	.L117
 1469              	.L137:
 1470 00d6 00BF     		.align	2
 1471              	.L136:
 1472 00d8 00000000 		.word	sock_io_mode
 1473              		.cfi_endproc
 1474              	.LFE6:
 1476              		.section	.text.sendto,"ax",%progbits
 1477              		.align	1
 1478              		.global	sendto
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1483              	sendto:
 1484              	.LVL145:
 1485              	.LFB7:
 489:BSP/socket.c  **** 
 490:BSP/socket.c  **** int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
 491:BSP/socket.c  **** {
 1486              		.loc 1 491 1 is_stmt 1 view -0
 1487              		.cfi_startproc
 1488              		@ args = 4, pretend = 0, frame = 0
 1489              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccClG7BW.s 			page 39


 1490              		.loc 1 491 1 is_stmt 0 view .LVU402
 1491 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1492              	.LCFI22:
 1493              		.cfi_def_cfa_offset 32
 1494              		.cfi_offset 4, -32
 1495              		.cfi_offset 5, -28
 1496              		.cfi_offset 6, -24
 1497              		.cfi_offset 7, -20
 1498              		.cfi_offset 8, -16
 1499              		.cfi_offset 9, -12
 1500              		.cfi_offset 10, -8
 1501              		.cfi_offset 14, -4
 1502 0004 BDF82060 		ldrh	r6, [sp, #32]
 492:BSP/socket.c  ****    uint8_t tmp = 0;
 1503              		.loc 1 492 4 is_stmt 1 view .LVU403
 1504              	.LVL146:
 493:BSP/socket.c  ****    uint16_t freesize = 0;
 1505              		.loc 1 493 4 view .LVU404
 494:BSP/socket.c  ****    uint32_t taddr;
 1506              		.loc 1 494 4 view .LVU405
 495:BSP/socket.c  **** 
 496:BSP/socket.c  ****    CHECK_SOCKNUM();
 1507              		.loc 1 496 4 view .LVU406
 1508              		.loc 1 496 4 view .LVU407
 1509 0008 0828     		cmp	r0, #8
 1510 000a 00F29380 		bhi	.L149
 1511 000e 0546     		mov	r5, r0
 1512 0010 8946     		mov	r9, r1
 1513 0012 9246     		mov	r10, r2
 1514 0014 1C46     		mov	r4, r3
 1515              		.loc 1 496 4 discriminator 2 view .LVU408
 1516              		.loc 1 496 19 discriminator 2 view .LVU409
 497:BSP/socket.c  ****    switch(getSn_MR(sn) & 0x0F)
 1517              		.loc 1 497 4 view .LVU410
 1518              		.loc 1 497 11 is_stmt 0 view .LVU411
 1519 0016 8700     		lsls	r7, r0, #2
 1520 0018 0137     		adds	r7, r7, #1
 1521 001a 4FEAC708 		lsl	r8, r7, #3
 1522 001e 4046     		mov	r0, r8
 1523              	.LVL147:
 1524              		.loc 1 497 11 view .LVU412
 1525 0020 FFF7FEFF 		bl	WIZCHIP_READ
 1526              	.LVL148:
 1527              		.loc 1 497 4 discriminator 1 view .LVU413
 1528 0024 00F00F00 		and	r0, r0, #15
 1529 0028 0238     		subs	r0, r0, #2
 1530 002a 0228     		cmp	r0, #2
 1531 002c 00F28580 		bhi	.L150
 498:BSP/socket.c  ****    {
 499:BSP/socket.c  ****       case Sn_MR_UDP:
 500:BSP/socket.c  ****       case Sn_MR_MACRAW:
 501:BSP/socket.c  **** //         break;
 502:BSP/socket.c  **** //   #if ( _WIZCHIP_ < 5200 )
 503:BSP/socket.c  ****       case Sn_MR_IPRAW:
 504:BSP/socket.c  ****          break;
 1532              		.loc 1 504 10 is_stmt 1 view .LVU414
 505:BSP/socket.c  **** //   #endif
ARM GAS  /tmp/ccClG7BW.s 			page 40


 506:BSP/socket.c  ****       default:
 507:BSP/socket.c  ****          return SOCKERR_SOCKMODE;
 508:BSP/socket.c  ****    }
 509:BSP/socket.c  ****    CHECK_SOCKDATA();
 1533              		.loc 1 509 4 view .LVU415
 1534              		.loc 1 509 4 view .LVU416
 1535 0030 BAF1000F 		cmp	r10, #0
 1536 0034 00F08480 		beq	.L151
 1537              		.loc 1 509 4 discriminator 2 view .LVU417
 1538              		.loc 1 509 20 discriminator 2 view .LVU418
 510:BSP/socket.c  ****    //M20140501 : For avoiding fatal error on memory align mismatched
 511:BSP/socket.c  ****    //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 512:BSP/socket.c  ****    //{
 513:BSP/socket.c  ****       //uint32_t taddr;
 514:BSP/socket.c  ****       taddr = ((uint32_t)addr[0]) & 0x000000FF;
 1539              		.loc 1 514 7 view .LVU419
 1540              		.loc 1 514 30 is_stmt 0 view .LVU420
 1541 0038 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 1542              	.LVL149:
 515:BSP/socket.c  ****       taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 1543              		.loc 1 515 7 is_stmt 1 view .LVU421
 1544              		.loc 1 515 45 is_stmt 0 view .LVU422
 1545 003a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1546              		.loc 1 515 13 view .LVU423
 1547 003c 03EB0223 		add	r3, r3, r2, lsl #8
 1548              	.LVL150:
 516:BSP/socket.c  ****       taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 1549              		.loc 1 516 7 is_stmt 1 view .LVU424
 1550              		.loc 1 516 45 is_stmt 0 view .LVU425
 1551 0040 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 1552              		.loc 1 516 13 view .LVU426
 1553 0042 02EB0322 		add	r2, r2, r3, lsl #8
 1554              	.LVL151:
 517:BSP/socket.c  ****       taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 1555              		.loc 1 517 7 is_stmt 1 view .LVU427
 1556              		.loc 1 517 45 is_stmt 0 view .LVU428
 1557 0046 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 1558              		.loc 1 517 13 view .LVU429
 1559 0048 03EB0223 		add	r3, r3, r2, lsl #8
 1560              	.LVL152:
 518:BSP/socket.c  ****    //}
 519:BSP/socket.c  ****    //
 520:BSP/socket.c  ****    //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 521:BSP/socket.c  ****    if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 1561              		.loc 1 521 4 is_stmt 1 view .LVU430
 1562              		.loc 1 521 6 is_stmt 0 view .LVU431
 1563 004c 63B3     		cbz	r3, .L158
 1564              	.LVL153:
 1565              	.L140:
 522:BSP/socket.c  ****    if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 1566              		.loc 1 522 4 is_stmt 1 view .LVU432
 1567              		.loc 1 522 6 is_stmt 0 view .LVU433
 1568 004e 2EB9     		cbnz	r6, .L141
 1569              		.loc 1 522 25 discriminator 1 view .LVU434
 1570 0050 4046     		mov	r0, r8
 1571 0052 FFF7FEFF 		bl	WIZCHIP_READ
 1572              	.LVL154:
ARM GAS  /tmp/ccClG7BW.s 			page 41


 1573              		.loc 1 522 20 discriminator 1 view .LVU435
 1574 0056 10F0040F 		tst	r0, #4
 1575 005a 74D0     		beq	.L153
 1576              	.L141:
 523:BSP/socket.c  ****    tmp = getSn_SR(sn);
 1577              		.loc 1 523 4 is_stmt 1 view .LVU436
 1578              		.loc 1 523 10 is_stmt 0 view .LVU437
 1579 005c FF00     		lsls	r7, r7, #3
 1580 005e 07F54078 		add	r8, r7, #768
 1581 0062 4046     		mov	r0, r8
 1582 0064 FFF7FEFF 		bl	WIZCHIP_READ
 1583              	.LVL155:
 524:BSP/socket.c  **** //#if ( _WIZCHIP_ < 5200 )
 525:BSP/socket.c  ****    if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 1584              		.loc 1 525 4 is_stmt 1 view .LVU438
 1585              		.loc 1 525 6 is_stmt 0 view .LVU439
 1586 0068 4228     		cmp	r0, #66
 1587 006a 03D0     		beq	.L142
 1588              		.loc 1 525 28 discriminator 1 view .LVU440
 1589 006c 2228     		cmp	r0, #34
 1590 006e 01D0     		beq	.L142
 1591              		.loc 1 525 49 discriminator 2 view .LVU441
 1592 0070 3228     		cmp	r0, #50
 1593 0072 6BD1     		bne	.L154
 1594              	.L142:
 526:BSP/socket.c  **** //#else
 527:BSP/socket.c  **** //   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
 528:BSP/socket.c  **** //#endif
 529:BSP/socket.c  ****       
 530:BSP/socket.c  ****    setSn_DIPR(sn,addr);
 1595              		.loc 1 530 4 is_stmt 1 view .LVU442
 1596 0074 0422     		movs	r2, #4
 1597 0076 2146     		mov	r1, r4
 1598 0078 07F54060 		add	r0, r7, #3072
 1599              	.LVL156:
 1600              		.loc 1 530 4 is_stmt 0 view .LVU443
 1601 007c FFF7FEFF 		bl	WIZCHIP_WRITE_BUF
 1602              	.LVL157:
 531:BSP/socket.c  ****    setSn_DPORT(sn,port);      
 1603              		.loc 1 531 4 is_stmt 1 view .LVU444
 1604 0080 310A     		lsrs	r1, r6, #8
 1605 0082 07F58050 		add	r0, r7, #4096
 1606 0086 FFF7FEFF 		bl	WIZCHIP_WRITE
 1607              	.LVL158:
 1608              		.loc 1 531 4 discriminator 1 view .LVU445
 1609 008a F1B2     		uxtb	r1, r6
 1610 008c 07F58850 		add	r0, r7, #4352
 1611 0090 FFF7FEFF 		bl	WIZCHIP_WRITE
 1612              	.LVL159:
 1613              		.loc 1 531 24 discriminator 2 view .LVU446
 532:BSP/socket.c  ****    freesize = getSn_TxMAX(sn);
 1614              		.loc 1 532 4 view .LVU447
 1615              		.loc 1 532 15 is_stmt 0 view .LVU448
 1616 0094 07F5F850 		add	r0, r7, #7936
 1617 0098 FFF7FEFF 		bl	WIZCHIP_READ
 1618              	.LVL160:
 1619              		.loc 1 532 13 discriminator 1 view .LVU449
ARM GAS  /tmp/ccClG7BW.s 			page 42


 1620 009c 8602     		lsls	r6, r0, #10
 1621 009e B6B2     		uxth	r6, r6
 1622              	.LVL161:
 533:BSP/socket.c  ****    if (len > freesize) len = freesize; // check size not to exceed MAX size.
 1623              		.loc 1 533 4 is_stmt 1 view .LVU450
 1624              		.loc 1 533 7 is_stmt 0 view .LVU451
 1625 00a0 B245     		cmp	r10, r6
 1626 00a2 0CD8     		bhi	.L145
 1627 00a4 5646     		mov	r6, r10
 1628              	.LVL162:
 1629              		.loc 1 533 7 view .LVU452
 1630 00a6 0AE0     		b	.L145
 1631              	.LVL163:
 1632              	.L158:
 521:BSP/socket.c  ****    if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 1633              		.loc 1 521 25 discriminator 1 view .LVU453
 1634 00a8 4046     		mov	r0, r8
 1635 00aa FFF7FEFF 		bl	WIZCHIP_READ
 1636              	.LVL164:
 521:BSP/socket.c  ****    if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 1637              		.loc 1 521 20 discriminator 1 view .LVU454
 1638 00ae 10F0040F 		tst	r0, #4
 1639 00b2 CCD1     		bne	.L140
 521:BSP/socket.c  ****    if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 1640              		.loc 1 521 77 discriminator 2 view .LVU455
 1641 00b4 6FF00B00 		mvn	r0, #11
 1642 00b8 4DE0     		b	.L138
 1643              	.LVL165:
 1644              	.L144:
 534:BSP/socket.c  ****    while(1)
 535:BSP/socket.c  ****    {
 536:BSP/socket.c  ****       freesize = getSn_TX_FSR(sn);
 537:BSP/socket.c  ****       if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 538:BSP/socket.c  ****       if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 539:BSP/socket.c  ****       if(len <= freesize) break;
 1645              		.loc 1 539 7 is_stmt 1 view .LVU456
 1646              		.loc 1 539 9 is_stmt 0 view .LVU457
 1647 00ba B442     		cmp	r4, r6
 1648 00bc 12D2     		bcs	.L159
 1649              	.LVL166:
 1650              	.L145:
 534:BSP/socket.c  ****    while(1)
 1651              		.loc 1 534 4 is_stmt 1 view .LVU458
 536:BSP/socket.c  ****       if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 1652              		.loc 1 536 7 view .LVU459
 536:BSP/socket.c  ****       if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 1653              		.loc 1 536 18 is_stmt 0 view .LVU460
 1654 00be 2846     		mov	r0, r5
 1655 00c0 FFF7FEFF 		bl	getSn_TX_FSR
 1656              	.LVL167:
 1657 00c4 0446     		mov	r4, r0
 1658              	.LVL168:
 537:BSP/socket.c  ****       if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 1659              		.loc 1 537 7 is_stmt 1 view .LVU461
 537:BSP/socket.c  ****       if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 1660              		.loc 1 537 10 is_stmt 0 view .LVU462
 1661 00c6 4046     		mov	r0, r8
ARM GAS  /tmp/ccClG7BW.s 			page 43


 1662 00c8 FFF7FEFF 		bl	WIZCHIP_READ
 1663              	.LVL169:
 537:BSP/socket.c  ****       if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 1664              		.loc 1 537 9 discriminator 1 view .LVU463
 1665 00cc 0028     		cmp	r0, #0
 1666 00ce 40D0     		beq	.L155
 538:BSP/socket.c  ****       if(len <= freesize) break;
 1667              		.loc 1 538 7 is_stmt 1 view .LVU464
 538:BSP/socket.c  ****       if(len <= freesize) break;
 1668              		.loc 1 538 11 is_stmt 0 view .LVU465
 1669 00d0 224B     		ldr	r3, .L161
 1670 00d2 1B88     		ldrh	r3, [r3]
 1671 00d4 2B41     		asrs	r3, r3, r5
 538:BSP/socket.c  ****       if(len <= freesize) break;
 1672              		.loc 1 538 9 view .LVU466
 1673 00d6 13F0010F 		tst	r3, #1
 1674 00da EED0     		beq	.L144
 538:BSP/socket.c  ****       if(len <= freesize) break;
 1675              		.loc 1 538 36 discriminator 1 view .LVU467
 1676 00dc B442     		cmp	r4, r6
 1677 00de ECD2     		bcs	.L144
 538:BSP/socket.c  ****       if(len <= freesize) break;
 1678              		.loc 1 538 65 discriminator 2 view .LVU468
 1679 00e0 0020     		movs	r0, #0
 1680 00e2 38E0     		b	.L138
 1681              	.L159:
 540:BSP/socket.c  ****    };
 1682              		.loc 1 540 5 is_stmt 1 view .LVU469
 541:BSP/socket.c  **** 	wiz_send_data(sn, buf, len);
 1683              		.loc 1 541 2 view .LVU470
 1684 00e4 3246     		mov	r2, r6
 1685 00e6 4946     		mov	r1, r9
 1686 00e8 2846     		mov	r0, r5
 1687 00ea FFF7FEFF 		bl	wiz_send_data
 1688              	.LVL170:
 542:BSP/socket.c  **** 
 543:BSP/socket.c  ****    #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
 544:BSP/socket.c  ****       getSIPR((uint8_t*)&taddr);
 545:BSP/socket.c  ****       if(taddr == 0)
 546:BSP/socket.c  ****       {
 547:BSP/socket.c  ****          getSUBR((uint8_t*)&taddr);
 548:BSP/socket.c  ****          setSUBR((uint8_t*)"\x00\x00\x00\x00");
 549:BSP/socket.c  ****       }
 550:BSP/socket.c  ****       else taddr = 0;
 551:BSP/socket.c  ****    #endif
 552:BSP/socket.c  **** 
 553:BSP/socket.c  **** //A20150601 : For W5300
 554:BSP/socket.c  **** #if _WIZCHIP_ == 5300
 555:BSP/socket.c  ****    setSn_TX_WRSR(sn, len);
 556:BSP/socket.c  **** #endif
 557:BSP/socket.c  **** //   
 558:BSP/socket.c  **** 	setSn_CR(sn,Sn_CR_SEND);
 1689              		.loc 1 558 2 view .LVU471
 1690 00ee 07F58074 		add	r4, r7, #256
 1691              	.LVL171:
 1692              		.loc 1 558 2 is_stmt 0 view .LVU472
 1693 00f2 2021     		movs	r1, #32
ARM GAS  /tmp/ccClG7BW.s 			page 44


 1694 00f4 2046     		mov	r0, r4
 1695 00f6 FFF7FEFF 		bl	WIZCHIP_WRITE
 1696              	.LVL172:
 559:BSP/socket.c  **** 	/* wait to process the command... */
 560:BSP/socket.c  **** 	while(getSn_CR(sn));
 1697              		.loc 1 560 2 is_stmt 1 view .LVU473
 1698              	.L146:
 1699              		.loc 1 560 8 discriminator 1 view .LVU474
 1700 00fa 2046     		mov	r0, r4
 1701 00fc FFF7FEFF 		bl	WIZCHIP_READ
 1702              	.LVL173:
 1703 0100 0028     		cmp	r0, #0
 1704 0102 FAD1     		bne	.L146
 1705              	.LVL174:
 1706              	.L148:
 561:BSP/socket.c  ****    while(1)
 1707              		.loc 1 561 4 view .LVU475
 562:BSP/socket.c  ****    {
 563:BSP/socket.c  ****       tmp = getSn_IR(sn);
 1708              		.loc 1 563 7 view .LVU476
 1709              		.loc 1 563 13 is_stmt 0 view .LVU477
 1710 0104 07F50074 		add	r4, r7, #512
 1711 0108 2046     		mov	r0, r4
 1712 010a FFF7FEFF 		bl	WIZCHIP_READ
 1713              	.LVL175:
 564:BSP/socket.c  ****       if(tmp & Sn_IR_SENDOK)
 1714              		.loc 1 564 7 is_stmt 1 view .LVU478
 1715              		.loc 1 564 9 is_stmt 0 view .LVU479
 1716 010e 10F0100F 		tst	r0, #16
 1717 0112 09D1     		bne	.L160
 565:BSP/socket.c  ****       {
 566:BSP/socket.c  ****          setSn_IR(sn, Sn_IR_SENDOK);
 567:BSP/socket.c  ****          break;
 568:BSP/socket.c  ****       }
 569:BSP/socket.c  ****       //M:20131104
 570:BSP/socket.c  ****       //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
 571:BSP/socket.c  ****       else if(tmp & Sn_IR_TIMEOUT)
 1718              		.loc 1 571 12 is_stmt 1 view .LVU480
 1719              		.loc 1 571 14 is_stmt 0 view .LVU481
 1720 0114 10F0080F 		tst	r0, #8
 1721 0118 F4D0     		beq	.L148
 572:BSP/socket.c  ****       {
 573:BSP/socket.c  ****          setSn_IR(sn, Sn_IR_TIMEOUT);
 1722              		.loc 1 573 10 is_stmt 1 view .LVU482
 1723 011a 0821     		movs	r1, #8
 1724 011c 2046     		mov	r0, r4
 1725              	.LVL176:
 1726              		.loc 1 573 10 is_stmt 0 view .LVU483
 1727 011e FFF7FEFF 		bl	WIZCHIP_WRITE
 1728              	.LVL177:
 574:BSP/socket.c  ****          //M20150409 : Fixed the lost of sign bits by type casting.
 575:BSP/socket.c  ****          //len = (uint16_t)SOCKERR_TIMEOUT;
 576:BSP/socket.c  ****          //break;
 577:BSP/socket.c  ****          #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
 578:BSP/socket.c  ****             if(taddr) setSUBR((uint8_t*)&taddr);
 579:BSP/socket.c  ****          #endif
 580:BSP/socket.c  ****          return SOCKERR_TIMEOUT;
ARM GAS  /tmp/ccClG7BW.s 			page 45


 1729              		.loc 1 580 10 is_stmt 1 view .LVU484
 1730              		.loc 1 580 17 is_stmt 0 view .LVU485
 1731 0122 6FF00C00 		mvn	r0, #12
 1732 0126 16E0     		b	.L138
 1733              	.LVL178:
 1734              	.L160:
 566:BSP/socket.c  ****          break;
 1735              		.loc 1 566 10 is_stmt 1 view .LVU486
 1736 0128 1021     		movs	r1, #16
 1737 012a 2046     		mov	r0, r4
 1738              	.LVL179:
 566:BSP/socket.c  ****          break;
 1739              		.loc 1 566 10 is_stmt 0 view .LVU487
 1740 012c FFF7FEFF 		bl	WIZCHIP_WRITE
 1741              	.LVL180:
 567:BSP/socket.c  ****       }
 1742              		.loc 1 567 10 is_stmt 1 view .LVU488
 581:BSP/socket.c  ****       }
 582:BSP/socket.c  ****       ////////////
 583:BSP/socket.c  ****    }
 584:BSP/socket.c  ****    #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
 585:BSP/socket.c  ****       if(taddr) setSUBR((uint8_t*)&taddr);
 586:BSP/socket.c  ****    #endif
 587:BSP/socket.c  ****    //M20150409 : Explicit Type Casting
 588:BSP/socket.c  ****    //return len;
 589:BSP/socket.c  ****    return (int32_t)len;
 1743              		.loc 1 589 4 view .LVU489
 1744              		.loc 1 589 11 is_stmt 0 view .LVU490
 1745 0130 3046     		mov	r0, r6
 1746 0132 10E0     		b	.L138
 1747              	.LVL181:
 1748              	.L149:
 496:BSP/socket.c  ****    switch(getSn_MR(sn) & 0x0F)
 1749              		.loc 1 496 4 discriminator 1 view .LVU491
 1750 0134 4FF0FF30 		mov	r0, #-1
 1751              	.LVL182:
 496:BSP/socket.c  ****    switch(getSn_MR(sn) & 0x0F)
 1752              		.loc 1 496 4 discriminator 1 view .LVU492
 1753 0138 0DE0     		b	.L138
 1754              	.LVL183:
 1755              	.L150:
 507:BSP/socket.c  ****    }
 1756              		.loc 1 507 17 view .LVU493
 1757 013a 6FF00400 		mvn	r0, #4
 1758 013e 0AE0     		b	.L138
 1759              	.L151:
 509:BSP/socket.c  ****    //M20140501 : For avoiding fatal error on memory align mismatched
 1760              		.loc 1 509 4 discriminator 1 view .LVU494
 1761 0140 6FF00D00 		mvn	r0, #13
 1762 0144 07E0     		b	.L138
 1763              	.LVL184:
 1764              	.L153:
 522:BSP/socket.c  ****    tmp = getSn_SR(sn);
 1765              		.loc 1 522 77 discriminator 2 view .LVU495
 1766 0146 6FF00A00 		mvn	r0, #10
 1767 014a 04E0     		b	.L138
 1768              	.LVL185:
ARM GAS  /tmp/ccClG7BW.s 			page 46


 1769              	.L154:
 525:BSP/socket.c  **** //#else
 1770              		.loc 1 525 80 discriminator 3 view .LVU496
 1771 014c 6FF00600 		mvn	r0, #6
 1772              	.LVL186:
 525:BSP/socket.c  **** //#else
 1773              		.loc 1 525 80 discriminator 3 view .LVU497
 1774 0150 01E0     		b	.L138
 1775              	.LVL187:
 1776              	.L155:
 537:BSP/socket.c  ****       if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 1777              		.loc 1 537 46 discriminator 1 view .LVU498
 1778 0152 6FF00300 		mvn	r0, #3
 1779              	.LVL188:
 1780              	.L138:
 590:BSP/socket.c  **** }
 1781              		.loc 1 590 1 view .LVU499
 1782 0156 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1783              	.LVL189:
 1784              	.L162:
 1785              		.loc 1 590 1 view .LVU500
 1786 015a 00BF     		.align	2
 1787              	.L161:
 1788 015c 00000000 		.word	sock_io_mode
 1789              		.cfi_endproc
 1790              	.LFE7:
 1792              		.section	.text.recvfrom,"ax",%progbits
 1793              		.align	1
 1794              		.global	recvfrom
 1795              		.syntax unified
 1796              		.thumb
 1797              		.thumb_func
 1799              	recvfrom:
 1800              	.LVL190:
 1801              	.LFB8:
 591:BSP/socket.c  **** 
 592:BSP/socket.c  **** 
 593:BSP/socket.c  **** 
 594:BSP/socket.c  **** int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
 595:BSP/socket.c  **** {
 1802              		.loc 1 595 1 is_stmt 1 view -0
 1803              		.cfi_startproc
 1804              		@ args = 4, pretend = 0, frame = 8
 1805              		@ frame_needed = 0, uses_anonymous_args = 0
 596:BSP/socket.c  **** //M20150601 : For W5300   
 597:BSP/socket.c  **** #if _WIZCHIP_ == 5300
 598:BSP/socket.c  ****    uint16_t mr;
 599:BSP/socket.c  ****    uint16_t mr1;
 600:BSP/socket.c  **** #else   
 601:BSP/socket.c  ****    uint8_t  mr;
 1806              		.loc 1 601 4 view .LVU502
 602:BSP/socket.c  **** #endif
 603:BSP/socket.c  **** //   
 604:BSP/socket.c  ****    uint8_t  head[8];
 1807              		.loc 1 604 4 view .LVU503
 605:BSP/socket.c  **** 	uint16_t pack_len=0;
 1808              		.loc 1 605 2 view .LVU504
ARM GAS  /tmp/ccClG7BW.s 			page 47


 606:BSP/socket.c  **** 
 607:BSP/socket.c  ****    CHECK_SOCKNUM();
 1809              		.loc 1 607 4 view .LVU505
 1810              		.loc 1 607 4 view .LVU506
 1811 0000 0828     		cmp	r0, #8
 1812 0002 00F23481 		bhi	.L185
 595:BSP/socket.c  **** //M20150601 : For W5300   
 1813              		.loc 1 595 1 is_stmt 0 view .LVU507
 1814 0006 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1815              	.LCFI23:
 1816              		.cfi_def_cfa_offset 32
 1817              		.cfi_offset 4, -32
 1818              		.cfi_offset 5, -28
 1819              		.cfi_offset 6, -24
 1820              		.cfi_offset 7, -20
 1821              		.cfi_offset 8, -16
 1822              		.cfi_offset 9, -12
 1823              		.cfi_offset 10, -8
 1824              		.cfi_offset 14, -4
 1825 000a 82B0     		sub	sp, sp, #8
 1826              	.LCFI24:
 1827              		.cfi_def_cfa_offset 40
 1828 000c 0546     		mov	r5, r0
 1829 000e 8946     		mov	r9, r1
 1830 0010 9046     		mov	r8, r2
 1831 0012 9A46     		mov	r10, r3
 1832              		.loc 1 607 4 is_stmt 1 discriminator 2 view .LVU508
 1833              		.loc 1 607 19 discriminator 2 view .LVU509
 608:BSP/socket.c  ****    //CHECK_SOCKMODE(Sn_MR_UDP);
 609:BSP/socket.c  **** //A20150601
 610:BSP/socket.c  **** #if _WIZCHIP_ == 5300
 611:BSP/socket.c  ****    mr1 = getMR();
 612:BSP/socket.c  **** #endif   
 613:BSP/socket.c  **** 
 614:BSP/socket.c  ****    switch((mr=getSn_MR(sn)) & 0x0F)
 1834              		.loc 1 614 4 view .LVU510
 1835              		.loc 1 614 15 is_stmt 0 view .LVU511
 1836 0014 8600     		lsls	r6, r0, #2
 1837 0016 0136     		adds	r6, r6, #1
 1838 0018 F000     		lsls	r0, r6, #3
 1839              	.LVL191:
 1840              		.loc 1 614 15 view .LVU512
 1841 001a FFF7FEFF 		bl	WIZCHIP_READ
 1842              	.LVL192:
 1843              		.loc 1 614 15 view .LVU513
 1844 001e 0746     		mov	r7, r0
 1845              	.LVL193:
 1846              		.loc 1 614 4 discriminator 1 view .LVU514
 1847 0020 00F00F03 		and	r3, r0, #15
 1848 0024 023B     		subs	r3, r3, #2
 1849 0026 022B     		cmp	r3, #2
 1850 0028 00F22481 		bhi	.L186
 615:BSP/socket.c  ****    {
 616:BSP/socket.c  ****       case Sn_MR_UDP:
 617:BSP/socket.c  **** 	  case Sn_MR_IPRAW:
 618:BSP/socket.c  ****       case Sn_MR_MACRAW:
 619:BSP/socket.c  ****          break;
ARM GAS  /tmp/ccClG7BW.s 			page 48


 1851              		.loc 1 619 10 is_stmt 1 view .LVU515
 620:BSP/socket.c  ****    #if ( _WIZCHIP_ < 5200 )         
 621:BSP/socket.c  ****       case Sn_MR_PPPoE:
 622:BSP/socket.c  ****          break;
 623:BSP/socket.c  ****    #endif
 624:BSP/socket.c  ****       default:
 625:BSP/socket.c  ****          return SOCKERR_SOCKMODE;
 626:BSP/socket.c  ****    }
 627:BSP/socket.c  ****    CHECK_SOCKDATA();
 1852              		.loc 1 627 4 view .LVU516
 1853              		.loc 1 627 4 view .LVU517
 1854 002c B8F1000F 		cmp	r8, #0
 1855 0030 00F02381 		beq	.L187
 1856              		.loc 1 627 4 discriminator 2 view .LVU518
 1857              		.loc 1 627 20 discriminator 2 view .LVU519
 628:BSP/socket.c  ****    if(sock_remained_size[sn] == 0)
 1858              		.loc 1 628 4 view .LVU520
 1859              		.loc 1 628 25 is_stmt 0 view .LVU521
 1860 0034 944B     		ldr	r3, .L199
 1861 0036 33F81530 		ldrh	r3, [r3, r5, lsl #1]
 1862              		.loc 1 628 6 view .LVU522
 1863 003a 002B     		cmp	r3, #0
 1864 003c 3CD0     		beq	.L167
 605:BSP/socket.c  **** 
 1865              		.loc 1 605 11 view .LVU523
 1866 003e 0024     		movs	r4, #0
 1867              	.LVL194:
 1868              	.L165:
 629:BSP/socket.c  ****    {
 630:BSP/socket.c  ****       while(1)
 631:BSP/socket.c  ****       {
 632:BSP/socket.c  ****          pack_len = getSn_RX_RSR(sn);
 633:BSP/socket.c  ****          if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 634:BSP/socket.c  ****          if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 635:BSP/socket.c  ****          if(pack_len != 0) break;
 636:BSP/socket.c  ****       };
 1869              		.loc 1 636 8 is_stmt 1 view .LVU524
 637:BSP/socket.c  ****    }
 638:BSP/socket.c  **** //D20150601 : Move it to bottom
 639:BSP/socket.c  **** // sock_pack_info[sn] = PACK_COMPLETED;
 640:BSP/socket.c  **** 	switch (mr & 0x07)
 1870              		.loc 1 640 2 view .LVU525
 1871 0040 07F00707 		and	r7, r7, #7
 1872 0044 032F     		cmp	r7, #3
 1873 0046 00F0C680 		beq	.L168
 1874 004a 042F     		cmp	r7, #4
 1875 004c 00F08680 		beq	.L169
 1876 0050 022F     		cmp	r7, #2
 1877 0052 40F00081 		bne	.L170
 641:BSP/socket.c  **** 	{
 642:BSP/socket.c  **** 	   case Sn_MR_UDP :
 643:BSP/socket.c  **** 	      if(sock_remained_size[sn] == 0)
 1878              		.loc 1 643 8 view .LVU526
 1879              		.loc 1 643 29 is_stmt 0 view .LVU527
 1880 0056 8C4B     		ldr	r3, .L199
 1881 0058 33F81530 		ldrh	r3, [r3, r5, lsl #1]
 1882              		.loc 1 643 10 view .LVU528
ARM GAS  /tmp/ccClG7BW.s 			page 49


 1883 005c 002B     		cmp	r3, #0
 1884 005e 43D0     		beq	.L195
 1885              	.LVL195:
 1886              	.L171:
 644:BSP/socket.c  **** 	      {
 645:BSP/socket.c  ****    			wiz_recv_data(sn, head, 8);
 646:BSP/socket.c  ****    			setSn_CR(sn,Sn_CR_RECV);
 647:BSP/socket.c  ****    			while(getSn_CR(sn));
 648:BSP/socket.c  ****    			// read peer's IP address, port number & packet length
 649:BSP/socket.c  ****    	   //A20150601 : For W5300
 650:BSP/socket.c  ****    		#if _WIZCHIP_ == 5300
 651:BSP/socket.c  ****    		   if(mr1 & MR_FS)
 652:BSP/socket.c  ****    		   {
 653:BSP/socket.c  ****    		      addr[0] = head[1];
 654:BSP/socket.c  ****    		      addr[1] = head[0];
 655:BSP/socket.c  ****    		      addr[2] = head[3];
 656:BSP/socket.c  ****    		      addr[3] = head[2];
 657:BSP/socket.c  ****    		      *port = head[5];
 658:BSP/socket.c  ****    		      *port = (*port << 8) + head[4];
 659:BSP/socket.c  ****       			sock_remained_size[sn] = head[7];
 660:BSP/socket.c  ****       			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
 661:BSP/socket.c  ****    		   }
 662:BSP/socket.c  ****             else
 663:BSP/socket.c  ****             {
 664:BSP/socket.c  ****          #endif
 665:BSP/socket.c  ****                addr[0] = head[0];
 666:BSP/socket.c  ****       			addr[1] = head[1];
 667:BSP/socket.c  ****       			addr[2] = head[2];
 668:BSP/socket.c  ****       			addr[3] = head[3];
 669:BSP/socket.c  ****       			*port = head[4];
 670:BSP/socket.c  ****       			*port = (*port << 8) + head[5];
 671:BSP/socket.c  ****       			sock_remained_size[sn] = head[6];
 672:BSP/socket.c  ****       			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 673:BSP/socket.c  ****          #if _WIZCHIP_ == 5300
 674:BSP/socket.c  ****             }
 675:BSP/socket.c  ****          #endif
 676:BSP/socket.c  ****    			sock_pack_info[sn] = PACK_FIRST;
 677:BSP/socket.c  ****    	   }
 678:BSP/socket.c  **** 			if(len < sock_remained_size[sn]) pack_len = len;
 1887              		.loc 1 678 4 is_stmt 1 view .LVU529
 1888              		.loc 1 678 31 is_stmt 0 view .LVU530
 1889 0060 894B     		ldr	r3, .L199
 1890 0062 33F81540 		ldrh	r4, [r3, r5, lsl #1]
 1891              		.loc 1 678 6 view .LVU531
 1892 0066 4445     		cmp	r4, r8
 1893 0068 00D9     		bls	.L173
 1894              		.loc 1 678 46 discriminator 1 view .LVU532
 1895 006a 4446     		mov	r4, r8
 1896              	.L173:
 1897              	.LVL196:
 679:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 680:BSP/socket.c  **** 			//A20150601 : For W5300
 681:BSP/socket.c  **** 			len = pack_len;
 1898              		.loc 1 681 4 is_stmt 1 view .LVU533
 682:BSP/socket.c  **** 			#if _WIZCHIP_ == 5300
 683:BSP/socket.c  **** 			   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 684:BSP/socket.c  **** 			   {
ARM GAS  /tmp/ccClG7BW.s 			page 50


 685:BSP/socket.c  **** 			      *buf++ = sock_remained_byte[sn];
 686:BSP/socket.c  **** 			      pack_len -= 1;
 687:BSP/socket.c  **** 			      sock_remained_size[sn] -= 1;
 688:BSP/socket.c  **** 			      sock_pack_info[sn] &= ~PACK_FIFOBYTE;
 689:BSP/socket.c  **** 			   }
 690:BSP/socket.c  **** 			#endif
 691:BSP/socket.c  **** 			//
 692:BSP/socket.c  **** 			// Need to packet length check (default 1472)
 693:BSP/socket.c  **** 			//
 694:BSP/socket.c  ****    		wiz_recv_data(sn, buf, pack_len); // data copy.
 1899              		.loc 1 694 6 view .LVU534
 1900 006c 2246     		mov	r2, r4
 1901 006e 4946     		mov	r1, r9
 1902 0070 2846     		mov	r0, r5
 1903 0072 FFF7FEFF 		bl	wiz_recv_data
 1904              	.LVL197:
 695:BSP/socket.c  **** 			break;
 1905              		.loc 1 695 4 view .LVU535
 1906              	.L174:
 696:BSP/socket.c  **** 	   case Sn_MR_MACRAW :
 697:BSP/socket.c  **** 	      if(sock_remained_size[sn] == 0)
 698:BSP/socket.c  **** 	      {
 699:BSP/socket.c  ****    			wiz_recv_data(sn, head, 2);
 700:BSP/socket.c  ****    			setSn_CR(sn,Sn_CR_RECV);
 701:BSP/socket.c  ****    			while(getSn_CR(sn));
 702:BSP/socket.c  ****    			// read peer's IP address, port number & packet length
 703:BSP/socket.c  ****     			sock_remained_size[sn] = head[0];
 704:BSP/socket.c  ****    			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 705:BSP/socket.c  ****    			#if _WIZCHIP_ == W5300
 706:BSP/socket.c  ****    			if(sock_remained_size[sn] & 0x01)
 707:BSP/socket.c  ****    				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
 708:BSP/socket.c  ****    			else
 709:BSP/socket.c  ****    				sock_remained_size[sn] -= 4;
 710:BSP/socket.c  **** 			#endif
 711:BSP/socket.c  ****    			if(sock_remained_size[sn] > 1514) 
 712:BSP/socket.c  ****    			{
 713:BSP/socket.c  ****    			   close(sn);
 714:BSP/socket.c  ****    			   return SOCKFATAL_PACKLEN;
 715:BSP/socket.c  ****    			}
 716:BSP/socket.c  ****    			sock_pack_info[sn] = PACK_FIRST;
 717:BSP/socket.c  ****    	   }
 718:BSP/socket.c  **** 			if(len < sock_remained_size[sn]) pack_len = len;
 719:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 720:BSP/socket.c  **** 			wiz_recv_data(sn,buf,pack_len);
 721:BSP/socket.c  **** 		   break;
 722:BSP/socket.c  ****    //#if ( _WIZCHIP_ < 5200 )
 723:BSP/socket.c  **** 		case Sn_MR_IPRAW:
 724:BSP/socket.c  **** 		   if(sock_remained_size[sn] == 0)
 725:BSP/socket.c  **** 		   {
 726:BSP/socket.c  ****    			wiz_recv_data(sn, head, 6);
 727:BSP/socket.c  ****    			setSn_CR(sn,Sn_CR_RECV);
 728:BSP/socket.c  ****    			while(getSn_CR(sn));
 729:BSP/socket.c  ****    			addr[0] = head[0];
 730:BSP/socket.c  ****    			addr[1] = head[1];
 731:BSP/socket.c  ****    			addr[2] = head[2];
 732:BSP/socket.c  ****    			addr[3] = head[3];
 733:BSP/socket.c  ****    			sock_remained_size[sn] = head[4];
ARM GAS  /tmp/ccClG7BW.s 			page 51


 734:BSP/socket.c  ****    			//M20150401 : For Typing Error
 735:BSP/socket.c  ****    			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 736:BSP/socket.c  ****    			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 737:BSP/socket.c  ****    			sock_pack_info[sn] = PACK_FIRST;
 738:BSP/socket.c  ****          }
 739:BSP/socket.c  **** 			//
 740:BSP/socket.c  **** 			// Need to packet length check
 741:BSP/socket.c  **** 			//
 742:BSP/socket.c  **** 			if(len < sock_remained_size[sn]) pack_len = len;
 743:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 744:BSP/socket.c  ****    		wiz_recv_data(sn, buf, pack_len); // data copy.
 745:BSP/socket.c  **** 			break;
 746:BSP/socket.c  ****    //#endif
 747:BSP/socket.c  ****       default:
 748:BSP/socket.c  ****          wiz_recv_ignore(sn, pack_len); // data copy.
 749:BSP/socket.c  ****          sock_remained_size[sn] = pack_len;
 750:BSP/socket.c  ****          break;
 751:BSP/socket.c  ****    }
 752:BSP/socket.c  **** 	setSn_CR(sn,Sn_CR_RECV);
 1907              		.loc 1 752 2 view .LVU536
 1908 0076 F600     		lsls	r6, r6, #3
 1909 0078 06F58076 		add	r6, r6, #256
 1910 007c 4021     		movs	r1, #64
 1911 007e 3046     		mov	r0, r6
 1912 0080 FFF7FEFF 		bl	WIZCHIP_WRITE
 1913              	.LVL198:
 753:BSP/socket.c  **** 	/* wait to process the command... */
 754:BSP/socket.c  **** 	while(getSn_CR(sn)) ;
 1914              		.loc 1 754 2 view .LVU537
 1915              	.L182:
 1916              		.loc 1 754 8 discriminator 1 view .LVU538
 1917 0084 3046     		mov	r0, r6
 1918 0086 FFF7FEFF 		bl	WIZCHIP_READ
 1919              	.LVL199:
 1920 008a 0028     		cmp	r0, #0
 1921 008c FAD1     		bne	.L182
 755:BSP/socket.c  **** 	sock_remained_size[sn] -= pack_len;
 1922              		.loc 1 755 2 view .LVU539
 1923              		.loc 1 755 20 is_stmt 0 view .LVU540
 1924 008e 7E4A     		ldr	r2, .L199
 1925 0090 32F81530 		ldrh	r3, [r2, r5, lsl #1]
 1926              		.loc 1 755 25 view .LVU541
 1927 0094 1B1B     		subs	r3, r3, r4
 1928 0096 9BB2     		uxth	r3, r3
 1929 0098 22F81530 		strh	r3, [r2, r5, lsl #1]	@ movhi
 756:BSP/socket.c  **** 	//M20150601 : 
 757:BSP/socket.c  **** 	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
 758:BSP/socket.c  **** 	if(sock_remained_size[sn] != 0)
 1930              		.loc 1 758 2 is_stmt 1 view .LVU542
 1931              		.loc 1 758 4 is_stmt 0 view .LVU543
 1932 009c 002B     		cmp	r3, #0
 1933 009e 00F0E280 		beq	.L183
 759:BSP/socket.c  **** 	{
 760:BSP/socket.c  **** 	   sock_pack_info[sn] |= PACK_REMAINED;
 1934              		.loc 1 760 5 is_stmt 1 view .LVU544
 1935              		.loc 1 760 19 is_stmt 0 view .LVU545
 1936 00a2 7A4A     		ldr	r2, .L199+4
ARM GAS  /tmp/ccClG7BW.s 			page 52


 1937 00a4 535D     		ldrb	r3, [r2, r5]	@ zero_extendqisi2
 1938              		.loc 1 760 24 view .LVU546
 1939 00a6 43F00103 		orr	r3, r3, #1
 1940 00aa 5355     		strb	r3, [r2, r5]
 1941              	.L184:
 761:BSP/socket.c  ****    #if _WIZCHIP_ == 5300	   
 762:BSP/socket.c  **** 	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
 763:BSP/socket.c  ****    #endif	      
 764:BSP/socket.c  **** 	}
 765:BSP/socket.c  **** 	else sock_pack_info[sn] = PACK_COMPLETED;
 766:BSP/socket.c  **** #if _WIZCHIP_ == 5300	   
 767:BSP/socket.c  ****    pack_len = len;
 768:BSP/socket.c  **** #endif
 769:BSP/socket.c  ****    //
 770:BSP/socket.c  ****    //M20150409 : Explicit Type Casting
 771:BSP/socket.c  ****    //return pack_len;
 772:BSP/socket.c  ****    return (int32_t)pack_len;
 1942              		.loc 1 772 4 is_stmt 1 view .LVU547
 1943              		.loc 1 772 11 is_stmt 0 view .LVU548
 1944 00ac 2046     		mov	r0, r4
 1945              	.LVL200:
 1946              	.L163:
 773:BSP/socket.c  **** }
 1947              		.loc 1 773 1 view .LVU549
 1948 00ae 02B0     		add	sp, sp, #8
 1949              	.LCFI25:
 1950              		.cfi_remember_state
 1951              		.cfi_def_cfa_offset 32
 1952              		@ sp needed
 1953 00b0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1954              	.LVL201:
 1955              	.L166:
 1956              	.LCFI26:
 1957              		.cfi_restore_state
 635:BSP/socket.c  ****       };
 1958              		.loc 1 635 10 is_stmt 1 view .LVU550
 635:BSP/socket.c  ****       };
 1959              		.loc 1 635 12 is_stmt 0 view .LVU551
 1960 00b4 002C     		cmp	r4, #0
 1961 00b6 C3D1     		bne	.L165
 1962              	.LVL202:
 1963              	.L167:
 630:BSP/socket.c  ****       {
 1964              		.loc 1 630 7 is_stmt 1 view .LVU552
 632:BSP/socket.c  ****          if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 1965              		.loc 1 632 10 view .LVU553
 632:BSP/socket.c  ****          if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 1966              		.loc 1 632 21 is_stmt 0 view .LVU554
 1967 00b8 2846     		mov	r0, r5
 1968 00ba FFF7FEFF 		bl	getSn_RX_RSR
 1969              	.LVL203:
 1970 00be 0446     		mov	r4, r0
 1971              	.LVL204:
 633:BSP/socket.c  ****          if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 1972              		.loc 1 633 10 is_stmt 1 view .LVU555
 633:BSP/socket.c  ****          if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 1973              		.loc 1 633 13 is_stmt 0 view .LVU556
ARM GAS  /tmp/ccClG7BW.s 			page 53


 1974 00c0 F000     		lsls	r0, r6, #3
 1975 00c2 00F54070 		add	r0, r0, #768
 1976 00c6 FFF7FEFF 		bl	WIZCHIP_READ
 1977              	.LVL205:
 633:BSP/socket.c  ****          if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 1978              		.loc 1 633 12 discriminator 1 view .LVU557
 1979 00ca 0028     		cmp	r0, #0
 1980 00cc 00F0D880 		beq	.L189
 634:BSP/socket.c  ****          if(pack_len != 0) break;
 1981              		.loc 1 634 10 is_stmt 1 view .LVU558
 634:BSP/socket.c  ****          if(pack_len != 0) break;
 1982              		.loc 1 634 14 is_stmt 0 view .LVU559
 1983 00d0 6F4B     		ldr	r3, .L199+8
 1984 00d2 B3F800C0 		ldrh	ip, [r3]
 1985 00d6 4CFA05FC 		asr	ip, ip, r5
 634:BSP/socket.c  ****          if(pack_len != 0) break;
 1986              		.loc 1 634 12 view .LVU560
 1987 00da 1CF0010F 		tst	ip, #1
 1988 00de E9D0     		beq	.L166
 634:BSP/socket.c  ****          if(pack_len != 0) break;
 1989              		.loc 1 634 39 discriminator 1 view .LVU561
 1990 00e0 002C     		cmp	r4, #0
 1991 00e2 E7D1     		bne	.L166
 634:BSP/socket.c  ****          if(pack_len != 0) break;
 1992              		.loc 1 634 67 discriminator 2 view .LVU562
 1993 00e4 0020     		movs	r0, #0
 1994 00e6 E2E7     		b	.L163
 1995              	.L195:
 645:BSP/socket.c  ****    			setSn_CR(sn,Sn_CR_RECV);
 1996              		.loc 1 645 7 is_stmt 1 view .LVU563
 1997 00e8 0822     		movs	r2, #8
 1998 00ea 6946     		mov	r1, sp
 1999 00ec 2846     		mov	r0, r5
 2000 00ee FFF7FEFF 		bl	wiz_recv_data
 2001              	.LVL206:
 646:BSP/socket.c  ****    			while(getSn_CR(sn));
 2002              		.loc 1 646 7 view .LVU564
 2003 00f2 F400     		lsls	r4, r6, #3
 2004              	.LVL207:
 646:BSP/socket.c  ****    			while(getSn_CR(sn));
 2005              		.loc 1 646 7 is_stmt 0 view .LVU565
 2006 00f4 04F58074 		add	r4, r4, #256
 2007 00f8 4021     		movs	r1, #64
 2008 00fa 2046     		mov	r0, r4
 2009 00fc FFF7FEFF 		bl	WIZCHIP_WRITE
 2010              	.LVL208:
 647:BSP/socket.c  ****    			// read peer's IP address, port number & packet length
 2011              		.loc 1 647 7 is_stmt 1 view .LVU566
 2012              	.L172:
 647:BSP/socket.c  ****    			// read peer's IP address, port number & packet length
 2013              		.loc 1 647 13 discriminator 1 view .LVU567
 2014 0100 2046     		mov	r0, r4
 2015 0102 FFF7FEFF 		bl	WIZCHIP_READ
 2016              	.LVL209:
 2017 0106 0028     		cmp	r0, #0
 2018 0108 FAD1     		bne	.L172
 665:BSP/socket.c  ****       			addr[1] = head[1];
ARM GAS  /tmp/ccClG7BW.s 			page 54


 2019              		.loc 1 665 16 view .LVU568
 665:BSP/socket.c  ****       			addr[1] = head[1];
 2020              		.loc 1 665 30 is_stmt 0 view .LVU569
 2021 010a 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 665:BSP/socket.c  ****       			addr[1] = head[1];
 2022              		.loc 1 665 24 view .LVU570
 2023 010e 8AF80030 		strb	r3, [r10]
 666:BSP/socket.c  ****       			addr[2] = head[2];
 2024              		.loc 1 666 10 is_stmt 1 view .LVU571
 666:BSP/socket.c  ****       			addr[2] = head[2];
 2025              		.loc 1 666 24 is_stmt 0 view .LVU572
 2026 0112 9DF80130 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 666:BSP/socket.c  ****       			addr[2] = head[2];
 2027              		.loc 1 666 18 view .LVU573
 2028 0116 8AF80130 		strb	r3, [r10, #1]
 667:BSP/socket.c  ****       			addr[3] = head[3];
 2029              		.loc 1 667 10 is_stmt 1 view .LVU574
 667:BSP/socket.c  ****       			addr[3] = head[3];
 2030              		.loc 1 667 24 is_stmt 0 view .LVU575
 2031 011a 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 667:BSP/socket.c  ****       			addr[3] = head[3];
 2032              		.loc 1 667 18 view .LVU576
 2033 011e 8AF80230 		strb	r3, [r10, #2]
 668:BSP/socket.c  ****       			*port = head[4];
 2034              		.loc 1 668 10 is_stmt 1 view .LVU577
 668:BSP/socket.c  ****       			*port = head[4];
 2035              		.loc 1 668 24 is_stmt 0 view .LVU578
 2036 0122 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 668:BSP/socket.c  ****       			*port = head[4];
 2037              		.loc 1 668 18 view .LVU579
 2038 0126 8AF80330 		strb	r3, [r10, #3]
 669:BSP/socket.c  ****       			*port = (*port << 8) + head[5];
 2039              		.loc 1 669 10 is_stmt 1 view .LVU580
 669:BSP/socket.c  ****       			*port = (*port << 8) + head[5];
 2040              		.loc 1 669 22 is_stmt 0 view .LVU581
 2041 012a 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 669:BSP/socket.c  ****       			*port = (*port << 8) + head[5];
 2042              		.loc 1 669 16 view .LVU582
 2043 012e 0A9B     		ldr	r3, [sp, #40]
 2044 0130 1A80     		strh	r2, [r3]	@ movhi
 670:BSP/socket.c  ****       			sock_remained_size[sn] = head[6];
 2045              		.loc 1 670 10 is_stmt 1 view .LVU583
 670:BSP/socket.c  ****       			sock_remained_size[sn] = head[6];
 2046              		.loc 1 670 37 is_stmt 0 view .LVU584
 2047 0132 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 670:BSP/socket.c  ****       			sock_remained_size[sn] = head[6];
 2048              		.loc 1 670 31 view .LVU585
 2049 0136 03EB0223 		add	r3, r3, r2, lsl #8
 670:BSP/socket.c  ****       			sock_remained_size[sn] = head[6];
 2050              		.loc 1 670 16 view .LVU586
 2051 013a 0A9A     		ldr	r2, [sp, #40]
 2052 013c 1380     		strh	r3, [r2]	@ movhi
 671:BSP/socket.c  ****       			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 2053              		.loc 1 671 10 is_stmt 1 view .LVU587
 671:BSP/socket.c  ****       			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 2054              		.loc 1 671 39 is_stmt 0 view .LVU588
 2055 013e 9DF80610 		ldrb	r1, [sp, #6]	@ zero_extendqisi2
ARM GAS  /tmp/ccClG7BW.s 			page 55


 671:BSP/socket.c  ****       			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 2056              		.loc 1 671 33 view .LVU589
 2057 0142 514A     		ldr	r2, .L199
 2058 0144 22F81510 		strh	r1, [r2, r5, lsl #1]	@ movhi
 672:BSP/socket.c  ****          #if _WIZCHIP_ == 5300
 2059              		.loc 1 672 10 is_stmt 1 view .LVU590
 672:BSP/socket.c  ****          #if _WIZCHIP_ == 5300
 2060              		.loc 1 672 71 is_stmt 0 view .LVU591
 2061 0148 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 672:BSP/socket.c  ****          #if _WIZCHIP_ == 5300
 2062              		.loc 1 672 65 view .LVU592
 2063 014c 03EB0123 		add	r3, r3, r1, lsl #8
 672:BSP/socket.c  ****          #if _WIZCHIP_ == 5300
 2064              		.loc 1 672 33 view .LVU593
 2065 0150 22F81530 		strh	r3, [r2, r5, lsl #1]	@ movhi
 676:BSP/socket.c  ****    	   }
 2066              		.loc 1 676 7 is_stmt 1 view .LVU594
 676:BSP/socket.c  ****    	   }
 2067              		.loc 1 676 26 is_stmt 0 view .LVU595
 2068 0154 4D4B     		ldr	r3, .L199+4
 2069 0156 8022     		movs	r2, #128
 2070 0158 5A55     		strb	r2, [r3, r5]
 2071 015a 81E7     		b	.L171
 2072              	.LVL210:
 2073              	.L169:
 697:BSP/socket.c  **** 	      {
 2074              		.loc 1 697 8 is_stmt 1 view .LVU596
 697:BSP/socket.c  **** 	      {
 2075              		.loc 1 697 29 is_stmt 0 view .LVU597
 2076 015c 4A4B     		ldr	r3, .L199
 2077 015e 33F81530 		ldrh	r3, [r3, r5, lsl #1]
 697:BSP/socket.c  **** 	      {
 2078              		.loc 1 697 10 view .LVU598
 2079 0162 5BB1     		cbz	r3, .L196
 2080              	.LVL211:
 2081              	.L175:
 718:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 2082              		.loc 1 718 4 is_stmt 1 view .LVU599
 718:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 2083              		.loc 1 718 31 is_stmt 0 view .LVU600
 2084 0164 484B     		ldr	r3, .L199
 2085 0166 33F81540 		ldrh	r4, [r3, r5, lsl #1]
 718:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 2086              		.loc 1 718 6 view .LVU601
 2087 016a 4445     		cmp	r4, r8
 2088 016c 00D9     		bls	.L178
 718:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 2089              		.loc 1 718 46 discriminator 1 view .LVU602
 2090 016e 4446     		mov	r4, r8
 2091              	.L178:
 2092              	.LVL212:
 720:BSP/socket.c  **** 		   break;
 2093              		.loc 1 720 4 is_stmt 1 view .LVU603
 2094 0170 2246     		mov	r2, r4
 2095 0172 4946     		mov	r1, r9
 2096 0174 2846     		mov	r0, r5
 2097 0176 FFF7FEFF 		bl	wiz_recv_data
ARM GAS  /tmp/ccClG7BW.s 			page 56


 2098              	.LVL213:
 721:BSP/socket.c  ****    //#if ( _WIZCHIP_ < 5200 )
 2099              		.loc 1 721 6 view .LVU604
 2100 017a 7CE7     		b	.L174
 2101              	.L196:
 699:BSP/socket.c  ****    			setSn_CR(sn,Sn_CR_RECV);
 2102              		.loc 1 699 7 view .LVU605
 2103 017c 0222     		movs	r2, #2
 2104 017e 6946     		mov	r1, sp
 2105 0180 2846     		mov	r0, r5
 2106 0182 FFF7FEFF 		bl	wiz_recv_data
 2107              	.LVL214:
 700:BSP/socket.c  ****    			while(getSn_CR(sn));
 2108              		.loc 1 700 7 view .LVU606
 2109 0186 F400     		lsls	r4, r6, #3
 2110              	.LVL215:
 700:BSP/socket.c  ****    			while(getSn_CR(sn));
 2111              		.loc 1 700 7 is_stmt 0 view .LVU607
 2112 0188 04F58074 		add	r4, r4, #256
 2113 018c 4021     		movs	r1, #64
 2114 018e 2046     		mov	r0, r4
 2115 0190 FFF7FEFF 		bl	WIZCHIP_WRITE
 2116              	.LVL216:
 701:BSP/socket.c  ****    			// read peer's IP address, port number & packet length
 2117              		.loc 1 701 7 is_stmt 1 view .LVU608
 2118              	.L176:
 701:BSP/socket.c  ****    			// read peer's IP address, port number & packet length
 2119              		.loc 1 701 13 discriminator 1 view .LVU609
 2120 0194 2046     		mov	r0, r4
 2121 0196 FFF7FEFF 		bl	WIZCHIP_READ
 2122              	.LVL217:
 2123 019a 0028     		cmp	r0, #0
 2124 019c FAD1     		bne	.L176
 703:BSP/socket.c  ****    			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 2125              		.loc 1 703 8 view .LVU610
 703:BSP/socket.c  ****    			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 2126              		.loc 1 703 37 is_stmt 0 view .LVU611
 2127 019e 9DF80010 		ldrb	r1, [sp]	@ zero_extendqisi2
 703:BSP/socket.c  ****    			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 2128              		.loc 1 703 31 view .LVU612
 2129 01a2 394A     		ldr	r2, .L199
 2130 01a4 22F81510 		strh	r1, [r2, r5, lsl #1]	@ movhi
 704:BSP/socket.c  ****    			#if _WIZCHIP_ == W5300
 2131              		.loc 1 704 7 is_stmt 1 view .LVU613
 704:BSP/socket.c  ****    			#if _WIZCHIP_ == W5300
 2132              		.loc 1 704 67 is_stmt 0 view .LVU614
 2133 01a8 9DF80130 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 704:BSP/socket.c  ****    			#if _WIZCHIP_ == W5300
 2134              		.loc 1 704 61 view .LVU615
 2135 01ac 03EB0123 		add	r3, r3, r1, lsl #8
 2136 01b0 9BB2     		uxth	r3, r3
 704:BSP/socket.c  ****    			#if _WIZCHIP_ == W5300
 2137              		.loc 1 704 71 view .LVU616
 2138 01b2 023B     		subs	r3, r3, #2
 2139 01b4 9BB2     		uxth	r3, r3
 704:BSP/socket.c  ****    			#if _WIZCHIP_ == W5300
 2140              		.loc 1 704 30 view .LVU617
ARM GAS  /tmp/ccClG7BW.s 			page 57


 2141 01b6 22F81530 		strh	r3, [r2, r5, lsl #1]	@ movhi
 711:BSP/socket.c  ****    			{
 2142              		.loc 1 711 7 is_stmt 1 view .LVU618
 711:BSP/socket.c  ****    			{
 2143              		.loc 1 711 9 is_stmt 0 view .LVU619
 2144 01ba 40F2EA52 		movw	r2, #1514
 2145 01be 9342     		cmp	r3, r2
 2146 01c0 03D8     		bhi	.L197
 716:BSP/socket.c  ****    	   }
 2147              		.loc 1 716 7 is_stmt 1 view .LVU620
 716:BSP/socket.c  ****    	   }
 2148              		.loc 1 716 26 is_stmt 0 view .LVU621
 2149 01c2 324B     		ldr	r3, .L199+4
 2150 01c4 8022     		movs	r2, #128
 2151 01c6 5A55     		strb	r2, [r3, r5]
 2152 01c8 CCE7     		b	.L175
 2153              	.L197:
 713:BSP/socket.c  ****    			   return SOCKFATAL_PACKLEN;
 2154              		.loc 1 713 10 is_stmt 1 view .LVU622
 2155 01ca 2846     		mov	r0, r5
 2156 01cc FFF7FEFF 		bl	close
 2157              	.LVL218:
 714:BSP/socket.c  ****    			}
 2158              		.loc 1 714 10 view .LVU623
 714:BSP/socket.c  ****    			}
 2159              		.loc 1 714 17 is_stmt 0 view .LVU624
 2160 01d0 6FF47A70 		mvn	r0, #1000
 2161 01d4 6BE7     		b	.L163
 2162              	.LVL219:
 2163              	.L168:
 724:BSP/socket.c  **** 		   {
 2164              		.loc 1 724 6 is_stmt 1 view .LVU625
 724:BSP/socket.c  **** 		   {
 2165              		.loc 1 724 27 is_stmt 0 view .LVU626
 2166 01d6 2C4B     		ldr	r3, .L199
 2167 01d8 33F81530 		ldrh	r3, [r3, r5, lsl #1]
 724:BSP/socket.c  **** 		   {
 2168              		.loc 1 724 8 view .LVU627
 2169 01dc 5BB1     		cbz	r3, .L198
 2170              	.LVL220:
 2171              	.L179:
 742:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 2172              		.loc 1 742 4 is_stmt 1 view .LVU628
 742:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 2173              		.loc 1 742 31 is_stmt 0 view .LVU629
 2174 01de 2A4B     		ldr	r3, .L199
 2175 01e0 33F81540 		ldrh	r4, [r3, r5, lsl #1]
 742:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 2176              		.loc 1 742 6 view .LVU630
 2177 01e4 4445     		cmp	r4, r8
 2178 01e6 00D9     		bls	.L181
 742:BSP/socket.c  **** 			else pack_len = sock_remained_size[sn];
 2179              		.loc 1 742 46 discriminator 1 view .LVU631
 2180 01e8 4446     		mov	r4, r8
 2181              	.L181:
 2182              	.LVL221:
 744:BSP/socket.c  **** 			break;
ARM GAS  /tmp/ccClG7BW.s 			page 58


 2183              		.loc 1 744 6 is_stmt 1 view .LVU632
 2184 01ea 2246     		mov	r2, r4
 2185 01ec 4946     		mov	r1, r9
 2186 01ee 2846     		mov	r0, r5
 2187 01f0 FFF7FEFF 		bl	wiz_recv_data
 2188              	.LVL222:
 745:BSP/socket.c  ****    //#endif
 2189              		.loc 1 745 4 view .LVU633
 2190 01f4 3FE7     		b	.L174
 2191              	.L198:
 726:BSP/socket.c  ****    			setSn_CR(sn,Sn_CR_RECV);
 2192              		.loc 1 726 7 view .LVU634
 2193 01f6 0622     		movs	r2, #6
 2194 01f8 6946     		mov	r1, sp
 2195 01fa 2846     		mov	r0, r5
 2196 01fc FFF7FEFF 		bl	wiz_recv_data
 2197              	.LVL223:
 727:BSP/socket.c  ****    			while(getSn_CR(sn));
 2198              		.loc 1 727 7 view .LVU635
 2199 0200 F400     		lsls	r4, r6, #3
 2200              	.LVL224:
 727:BSP/socket.c  ****    			while(getSn_CR(sn));
 2201              		.loc 1 727 7 is_stmt 0 view .LVU636
 2202 0202 04F58074 		add	r4, r4, #256
 2203 0206 4021     		movs	r1, #64
 2204 0208 2046     		mov	r0, r4
 2205 020a FFF7FEFF 		bl	WIZCHIP_WRITE
 2206              	.LVL225:
 728:BSP/socket.c  ****    			addr[0] = head[0];
 2207              		.loc 1 728 7 is_stmt 1 view .LVU637
 2208              	.L180:
 728:BSP/socket.c  ****    			addr[0] = head[0];
 2209              		.loc 1 728 13 discriminator 1 view .LVU638
 2210 020e 2046     		mov	r0, r4
 2211 0210 FFF7FEFF 		bl	WIZCHIP_READ
 2212              	.LVL226:
 2213 0214 0028     		cmp	r0, #0
 2214 0216 FAD1     		bne	.L180
 729:BSP/socket.c  ****    			addr[1] = head[1];
 2215              		.loc 1 729 7 view .LVU639
 729:BSP/socket.c  ****    			addr[1] = head[1];
 2216              		.loc 1 729 21 is_stmt 0 view .LVU640
 2217 0218 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 729:BSP/socket.c  ****    			addr[1] = head[1];
 2218              		.loc 1 729 15 view .LVU641
 2219 021c 8AF80030 		strb	r3, [r10]
 730:BSP/socket.c  ****    			addr[2] = head[2];
 2220              		.loc 1 730 7 is_stmt 1 view .LVU642
 730:BSP/socket.c  ****    			addr[2] = head[2];
 2221              		.loc 1 730 21 is_stmt 0 view .LVU643
 2222 0220 9DF80130 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 730:BSP/socket.c  ****    			addr[2] = head[2];
 2223              		.loc 1 730 15 view .LVU644
 2224 0224 8AF80130 		strb	r3, [r10, #1]
 731:BSP/socket.c  ****    			addr[3] = head[3];
 2225              		.loc 1 731 7 is_stmt 1 view .LVU645
 731:BSP/socket.c  ****    			addr[3] = head[3];
ARM GAS  /tmp/ccClG7BW.s 			page 59


 2226              		.loc 1 731 21 is_stmt 0 view .LVU646
 2227 0228 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 731:BSP/socket.c  ****    			addr[3] = head[3];
 2228              		.loc 1 731 15 view .LVU647
 2229 022c 8AF80230 		strb	r3, [r10, #2]
 732:BSP/socket.c  ****    			sock_remained_size[sn] = head[4];
 2230              		.loc 1 732 7 is_stmt 1 view .LVU648
 732:BSP/socket.c  ****    			sock_remained_size[sn] = head[4];
 2231              		.loc 1 732 21 is_stmt 0 view .LVU649
 2232 0230 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 732:BSP/socket.c  ****    			sock_remained_size[sn] = head[4];
 2233              		.loc 1 732 15 view .LVU650
 2234 0234 8AF80330 		strb	r3, [r10, #3]
 733:BSP/socket.c  ****    			//M20150401 : For Typing Error
 2235              		.loc 1 733 7 is_stmt 1 view .LVU651
 733:BSP/socket.c  ****    			//M20150401 : For Typing Error
 2236              		.loc 1 733 36 is_stmt 0 view .LVU652
 2237 0238 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 733:BSP/socket.c  ****    			//M20150401 : For Typing Error
 2238              		.loc 1 733 30 view .LVU653
 2239 023c 124A     		ldr	r2, .L199
 2240 023e 22F81510 		strh	r1, [r2, r5, lsl #1]	@ movhi
 736:BSP/socket.c  ****    			sock_pack_info[sn] = PACK_FIRST;
 2241              		.loc 1 736 7 is_stmt 1 view .LVU654
 736:BSP/socket.c  ****    			sock_pack_info[sn] = PACK_FIRST;
 2242              		.loc 1 736 68 is_stmt 0 view .LVU655
 2243 0242 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 736:BSP/socket.c  ****    			sock_pack_info[sn] = PACK_FIRST;
 2244              		.loc 1 736 62 view .LVU656
 2245 0246 03EB0123 		add	r3, r3, r1, lsl #8
 736:BSP/socket.c  ****    			sock_pack_info[sn] = PACK_FIRST;
 2246              		.loc 1 736 30 view .LVU657
 2247 024a 22F81530 		strh	r3, [r2, r5, lsl #1]	@ movhi
 737:BSP/socket.c  ****          }
 2248              		.loc 1 737 7 is_stmt 1 view .LVU658
 737:BSP/socket.c  ****          }
 2249              		.loc 1 737 26 is_stmt 0 view .LVU659
 2250 024e 0F4B     		ldr	r3, .L199+4
 2251 0250 8022     		movs	r2, #128
 2252 0252 5A55     		strb	r2, [r3, r5]
 2253 0254 C3E7     		b	.L179
 2254              	.LVL227:
 2255              	.L170:
 748:BSP/socket.c  ****          sock_remained_size[sn] = pack_len;
 2256              		.loc 1 748 10 is_stmt 1 view .LVU660
 2257 0256 2146     		mov	r1, r4
 2258 0258 2846     		mov	r0, r5
 2259 025a FFF7FEFF 		bl	wiz_recv_ignore
 2260              	.LVL228:
 749:BSP/socket.c  ****          break;
 2261              		.loc 1 749 10 view .LVU661
 749:BSP/socket.c  ****          break;
 2262              		.loc 1 749 33 is_stmt 0 view .LVU662
 2263 025e 0A4B     		ldr	r3, .L199
 2264 0260 23F81540 		strh	r4, [r3, r5, lsl #1]	@ movhi
 750:BSP/socket.c  ****    }
 2265              		.loc 1 750 10 is_stmt 1 view .LVU663
ARM GAS  /tmp/ccClG7BW.s 			page 60


 2266 0264 07E7     		b	.L174
 2267              	.LVL229:
 2268              	.L183:
 765:BSP/socket.c  **** #if _WIZCHIP_ == 5300	   
 2269              		.loc 1 765 7 view .LVU664
 765:BSP/socket.c  **** #if _WIZCHIP_ == 5300	   
 2270              		.loc 1 765 26 is_stmt 0 view .LVU665
 2271 0266 094B     		ldr	r3, .L199+4
 2272 0268 0022     		movs	r2, #0
 2273 026a 5A55     		strb	r2, [r3, r5]
 2274 026c 1EE7     		b	.L184
 2275              	.LVL230:
 2276              	.L185:
 2277              	.LCFI27:
 2278              		.cfi_def_cfa_offset 0
 2279              		.cfi_restore 4
 2280              		.cfi_restore 5
 2281              		.cfi_restore 6
 2282              		.cfi_restore 7
 2283              		.cfi_restore 8
 2284              		.cfi_restore 9
 2285              		.cfi_restore 10
 2286              		.cfi_restore 14
 607:BSP/socket.c  ****    //CHECK_SOCKMODE(Sn_MR_UDP);
 2287              		.loc 1 607 4 discriminator 1 view .LVU666
 2288 026e 4FF0FF30 		mov	r0, #-1
 2289              	.LVL231:
 2290              		.loc 1 773 1 view .LVU667
 2291 0272 7047     		bx	lr
 2292              	.LVL232:
 2293              	.L186:
 2294              	.LCFI28:
 2295              		.cfi_def_cfa_offset 40
 2296              		.cfi_offset 4, -32
 2297              		.cfi_offset 5, -28
 2298              		.cfi_offset 6, -24
 2299              		.cfi_offset 7, -20
 2300              		.cfi_offset 8, -16
 2301              		.cfi_offset 9, -12
 2302              		.cfi_offset 10, -8
 2303              		.cfi_offset 14, -4
 625:BSP/socket.c  ****    }
 2304              		.loc 1 625 17 view .LVU668
 2305 0274 6FF00400 		mvn	r0, #4
 2306              	.LVL233:
 625:BSP/socket.c  ****    }
 2307              		.loc 1 625 17 view .LVU669
 2308 0278 19E7     		b	.L163
 2309              	.LVL234:
 2310              	.L187:
 627:BSP/socket.c  ****    if(sock_remained_size[sn] == 0)
 2311              		.loc 1 627 4 discriminator 1 view .LVU670
 2312 027a 6FF00D00 		mvn	r0, #13
 2313              	.LVL235:
 627:BSP/socket.c  ****    if(sock_remained_size[sn] == 0)
 2314              		.loc 1 627 4 discriminator 1 view .LVU671
 2315 027e 16E7     		b	.L163
ARM GAS  /tmp/ccClG7BW.s 			page 61


 2316              	.LVL236:
 2317              	.L189:
 633:BSP/socket.c  ****          if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 2318              		.loc 1 633 49 discriminator 1 view .LVU672
 2319 0280 6FF00300 		mvn	r0, #3
 2320 0284 13E7     		b	.L163
 2321              	.L200:
 2322 0286 00BF     		.align	2
 2323              	.L199:
 2324 0288 00000000 		.word	sock_remained_size
 2325 028c 00000000 		.word	sock_pack_info
 2326 0290 00000000 		.word	sock_io_mode
 2327              		.cfi_endproc
 2328              	.LFE8:
 2330              		.section	.text.ctlsocket,"ax",%progbits
 2331              		.align	1
 2332              		.global	ctlsocket
 2333              		.syntax unified
 2334              		.thumb
 2335              		.thumb_func
 2337              	ctlsocket:
 2338              	.LVL237:
 2339              	.LFB9:
 774:BSP/socket.c  **** 
 775:BSP/socket.c  **** 
 776:BSP/socket.c  **** int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
 777:BSP/socket.c  **** {
 2340              		.loc 1 777 1 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 778:BSP/socket.c  ****    uint8_t tmp = 0;
 2344              		.loc 1 778 4 view .LVU674
 779:BSP/socket.c  ****    CHECK_SOCKNUM();
 2345              		.loc 1 779 4 view .LVU675
 2346              		.loc 1 779 4 view .LVU676
 2347 0000 0828     		cmp	r0, #8
 2348 0002 73D8     		bhi	.L213
 777:BSP/socket.c  ****    uint8_t tmp = 0;
 2349              		.loc 1 777 1 is_stmt 0 view .LVU677
 2350 0004 10B5     		push	{r4, lr}
 2351              	.LCFI29:
 2352              		.cfi_def_cfa_offset 8
 2353              		.cfi_offset 4, -8
 2354              		.cfi_offset 14, -4
 2355 0006 1446     		mov	r4, r2
 2356              		.loc 1 779 4 is_stmt 1 discriminator 2 view .LVU678
 2357              		.loc 1 779 19 discriminator 2 view .LVU679
 780:BSP/socket.c  ****    switch(cstype)
 2358              		.loc 1 780 4 view .LVU680
 2359 0008 0729     		cmp	r1, #7
 2360 000a 72D8     		bhi	.L214
 2361 000c DFE801F0 		tbb	[pc, r1]
 2362              	.L204:
 2363 0010 04       		.byte	(.L211-.L204)/2
 2364 0011 1C       		.byte	(.L210-.L204)/2
 2365 0012 24       		.byte	(.L209-.L204)/2
ARM GAS  /tmp/ccClG7BW.s 			page 62


 2366 0013 2F       		.byte	(.L208-.L204)/2
 2367 0014 3A       		.byte	(.L207-.L204)/2
 2368 0015 48       		.byte	(.L206-.L204)/2
 2369 0016 54       		.byte	(.L205-.L204)/2
 2370 0017 62       		.byte	(.L203-.L204)/2
 2371              		.p2align 1
 2372              	.L211:
 781:BSP/socket.c  ****    {
 782:BSP/socket.c  ****       case CS_SET_IOMODE:
 783:BSP/socket.c  ****          tmp = *((uint8_t*)arg);
 2373              		.loc 1 783 10 view .LVU681
 2374              		.loc 1 783 14 is_stmt 0 view .LVU682
 2375 0018 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2376              	.LVL238:
 784:BSP/socket.c  ****          if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 2377              		.loc 1 784 10 is_stmt 1 view .LVU683
 2378              		.loc 1 784 12 is_stmt 0 view .LVU684
 2379 001a 012B     		cmp	r3, #1
 2380 001c 0CD0     		beq	.L222
 785:BSP/socket.c  ****          else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 2381              		.loc 1 785 15 is_stmt 1 view .LVU685
 2382              		.loc 1 785 17 is_stmt 0 view .LVU686
 2383 001e 002B     		cmp	r3, #0
 2384 0020 6AD1     		bne	.L215
 2385              		.loc 1 785 40 is_stmt 1 discriminator 1 view .LVU687
 2386              		.loc 1 785 59 is_stmt 0 discriminator 1 view .LVU688
 2387 0022 0123     		movs	r3, #1
 2388              	.LVL239:
 2389              		.loc 1 785 59 discriminator 1 view .LVU689
 2390 0024 03FA00F2 		lsl	r2, r3, r0
 2391              	.LVL240:
 2392              		.loc 1 785 53 discriminator 1 view .LVU690
 2393 0028 D243     		mvns	r2, r2
 2394 002a 12B2     		sxth	r2, r2
 2395 002c 3749     		ldr	r1, .L223
 2396              	.LVL241:
 2397              		.loc 1 785 53 discriminator 1 view .LVU691
 2398 002e 0888     		ldrh	r0, [r1]
 2399              	.LVL242:
 2400              		.loc 1 785 53 discriminator 1 view .LVU692
 2401 0030 0240     		ands	r2, r2, r0
 2402 0032 0A80     		strh	r2, [r1]	@ movhi
 786:BSP/socket.c  ****          else return SOCKERR_ARG;
 787:BSP/socket.c  ****          break;
 788:BSP/socket.c  ****       case CS_GET_IOMODE:   
 789:BSP/socket.c  ****          //M20140501 : implict type casting -> explict type casting
 790:BSP/socket.c  ****          //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
 791:BSP/socket.c  ****          *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 792:BSP/socket.c  ****          //
 793:BSP/socket.c  ****          break;
 794:BSP/socket.c  ****       case CS_GET_MAXTXBUF:
 795:BSP/socket.c  ****          *((uint16_t*)arg) = getSn_TxMAX(sn);
 796:BSP/socket.c  ****          break;
 797:BSP/socket.c  ****       case CS_GET_MAXRXBUF:    
 798:BSP/socket.c  ****          *((uint16_t*)arg) = getSn_RxMAX(sn);
 799:BSP/socket.c  ****          break;
 800:BSP/socket.c  ****       case CS_CLR_INTERRUPT:
ARM GAS  /tmp/ccClG7BW.s 			page 63


 801:BSP/socket.c  ****          if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 802:BSP/socket.c  ****          setSn_IR(sn,*(uint8_t*)arg);
 803:BSP/socket.c  ****          break;
 804:BSP/socket.c  ****       case CS_GET_INTERRUPT:
 805:BSP/socket.c  ****          *((uint8_t*)arg) = getSn_IR(sn);
 806:BSP/socket.c  ****          break;
 807:BSP/socket.c  ****    #if _WIZCHIP_ != 5100
 808:BSP/socket.c  ****       case CS_SET_INTMASK:  
 809:BSP/socket.c  ****          if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 810:BSP/socket.c  ****          setSn_IMR(sn,*(uint8_t*)arg);
 811:BSP/socket.c  ****          break;
 812:BSP/socket.c  ****       case CS_GET_INTMASK:   
 813:BSP/socket.c  ****          *((uint8_t*)arg) = getSn_IMR(sn);
 814:BSP/socket.c  ****          break;
 815:BSP/socket.c  ****    #endif
 816:BSP/socket.c  ****       default:
 817:BSP/socket.c  ****          return SOCKERR_ARG;
 818:BSP/socket.c  ****    }
 819:BSP/socket.c  ****    return SOCK_OK;
 2403              		.loc 1 819 11 view .LVU693
 2404 0034 1846     		mov	r0, r3
 2405 0036 0EE0     		b	.L202
 2406              	.LVL243:
 2407              	.L222:
 784:BSP/socket.c  ****          else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 2408              		.loc 1 784 39 is_stmt 1 discriminator 1 view .LVU694
 784:BSP/socket.c  ****          else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 2409              		.loc 1 784 57 is_stmt 0 discriminator 1 view .LVU695
 2410 0038 03FA00F0 		lsl	r0, r3, r0
 2411              	.LVL244:
 784:BSP/socket.c  ****          else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 2412              		.loc 1 784 52 discriminator 1 view .LVU696
 2413 003c 334A     		ldr	r2, .L223
 2414              	.LVL245:
 784:BSP/socket.c  ****          else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 2415              		.loc 1 784 52 discriminator 1 view .LVU697
 2416 003e 1188     		ldrh	r1, [r2]
 2417              	.LVL246:
 784:BSP/socket.c  ****          else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 2418              		.loc 1 784 52 discriminator 1 view .LVU698
 2419 0040 0843     		orrs	r0, r0, r1
 2420 0042 1080     		strh	r0, [r2]	@ movhi
 2421              		.loc 1 819 11 view .LVU699
 2422 0044 1846     		mov	r0, r3
 2423 0046 06E0     		b	.L202
 2424              	.LVL247:
 2425              	.L210:
 791:BSP/socket.c  ****          //
 2426              		.loc 1 791 10 is_stmt 1 view .LVU700
 791:BSP/socket.c  ****          //
 2427              		.loc 1 791 53 is_stmt 0 view .LVU701
 2428 0048 304B     		ldr	r3, .L223
 2429 004a 1B88     		ldrh	r3, [r3]
 2430 004c 0341     		asrs	r3, r3, r0
 791:BSP/socket.c  ****          //
 2431              		.loc 1 791 29 view .LVU702
 2432 004e 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/ccClG7BW.s 			page 64


 791:BSP/socket.c  ****          //
 2433              		.loc 1 791 27 view .LVU703
 2434 0052 1370     		strb	r3, [r2]
 793:BSP/socket.c  ****       case CS_GET_MAXTXBUF:
 2435              		.loc 1 793 10 is_stmt 1 view .LVU704
 2436              		.loc 1 819 11 is_stmt 0 view .LVU705
 2437 0054 0120     		movs	r0, #1
 2438              	.LVL248:
 2439              	.L202:
 820:BSP/socket.c  **** }
 2440              		.loc 1 820 1 view .LVU706
 2441 0056 10BD     		pop	{r4, pc}
 2442              	.LVL249:
 2443              	.L209:
 795:BSP/socket.c  ****          break;
 2444              		.loc 1 795 10 is_stmt 1 view .LVU707
 795:BSP/socket.c  ****          break;
 2445              		.loc 1 795 30 is_stmt 0 view .LVU708
 2446 0058 8000     		lsls	r0, r0, #2
 2447              	.LVL250:
 795:BSP/socket.c  ****          break;
 2448              		.loc 1 795 30 view .LVU709
 2449 005a 0130     		adds	r0, r0, #1
 2450 005c C000     		lsls	r0, r0, #3
 2451 005e 00F5F850 		add	r0, r0, #7936
 2452 0062 FFF7FEFF 		bl	WIZCHIP_READ
 2453              	.LVL251:
 795:BSP/socket.c  ****          break;
 2454              		.loc 1 795 30 discriminator 1 view .LVU710
 2455 0066 8002     		lsls	r0, r0, #10
 795:BSP/socket.c  ****          break;
 2456              		.loc 1 795 28 discriminator 1 view .LVU711
 2457 0068 2080     		strh	r0, [r4]	@ movhi
 796:BSP/socket.c  ****       case CS_GET_MAXRXBUF:    
 2458              		.loc 1 796 10 is_stmt 1 view .LVU712
 819:BSP/socket.c  **** }
 2459              		.loc 1 819 11 is_stmt 0 view .LVU713
 2460 006a 0120     		movs	r0, #1
 796:BSP/socket.c  ****       case CS_GET_MAXRXBUF:    
 2461              		.loc 1 796 10 view .LVU714
 2462 006c F3E7     		b	.L202
 2463              	.LVL252:
 2464              	.L208:
 798:BSP/socket.c  ****          break;
 2465              		.loc 1 798 10 is_stmt 1 view .LVU715
 798:BSP/socket.c  ****          break;
 2466              		.loc 1 798 30 is_stmt 0 view .LVU716
 2467 006e 8000     		lsls	r0, r0, #2
 2468              	.LVL253:
 798:BSP/socket.c  ****          break;
 2469              		.loc 1 798 30 view .LVU717
 2470 0070 0130     		adds	r0, r0, #1
 2471 0072 C000     		lsls	r0, r0, #3
 2472 0074 00F5F050 		add	r0, r0, #7680
 2473 0078 FFF7FEFF 		bl	WIZCHIP_READ
 2474              	.LVL254:
 798:BSP/socket.c  ****          break;
ARM GAS  /tmp/ccClG7BW.s 			page 65


 2475              		.loc 1 798 30 discriminator 1 view .LVU718
 2476 007c 8002     		lsls	r0, r0, #10
 798:BSP/socket.c  ****          break;
 2477              		.loc 1 798 28 discriminator 1 view .LVU719
 2478 007e 2080     		strh	r0, [r4]	@ movhi
 799:BSP/socket.c  ****       case CS_CLR_INTERRUPT:
 2479              		.loc 1 799 10 is_stmt 1 view .LVU720
 819:BSP/socket.c  **** }
 2480              		.loc 1 819 11 is_stmt 0 view .LVU721
 2481 0080 0120     		movs	r0, #1
 799:BSP/socket.c  ****       case CS_CLR_INTERRUPT:
 2482              		.loc 1 799 10 view .LVU722
 2483 0082 E8E7     		b	.L202
 2484              	.LVL255:
 2485              	.L207:
 801:BSP/socket.c  ****          setSn_IR(sn,*(uint8_t*)arg);
 2486              		.loc 1 801 10 is_stmt 1 view .LVU723
 801:BSP/socket.c  ****          setSn_IR(sn,*(uint8_t*)arg);
 2487              		.loc 1 801 15 is_stmt 0 view .LVU724
 2488 0084 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2489              	.LVL256:
 801:BSP/socket.c  ****          setSn_IR(sn,*(uint8_t*)arg);
 2490              		.loc 1 801 12 view .LVU725
 2491 0086 1F29     		cmp	r1, #31
 2492 0088 39D8     		bhi	.L216
 802:BSP/socket.c  ****          break;
 2493              		.loc 1 802 10 is_stmt 1 view .LVU726
 2494 008a 8000     		lsls	r0, r0, #2
 2495              	.LVL257:
 802:BSP/socket.c  ****          break;
 2496              		.loc 1 802 10 is_stmt 0 view .LVU727
 2497 008c 0130     		adds	r0, r0, #1
 2498 008e C000     		lsls	r0, r0, #3
 2499 0090 01F01F01 		and	r1, r1, #31
 2500 0094 00F50070 		add	r0, r0, #512
 2501 0098 FFF7FEFF 		bl	WIZCHIP_WRITE
 2502              	.LVL258:
 803:BSP/socket.c  ****       case CS_GET_INTERRUPT:
 2503              		.loc 1 803 10 is_stmt 1 view .LVU728
 819:BSP/socket.c  **** }
 2504              		.loc 1 819 11 is_stmt 0 view .LVU729
 2505 009c 0120     		movs	r0, #1
 803:BSP/socket.c  ****       case CS_GET_INTERRUPT:
 2506              		.loc 1 803 10 view .LVU730
 2507 009e DAE7     		b	.L202
 2508              	.LVL259:
 2509              	.L206:
 805:BSP/socket.c  ****          break;
 2510              		.loc 1 805 10 is_stmt 1 view .LVU731
 805:BSP/socket.c  ****          break;
 2511              		.loc 1 805 29 is_stmt 0 view .LVU732
 2512 00a0 8000     		lsls	r0, r0, #2
 2513              	.LVL260:
 805:BSP/socket.c  ****          break;
 2514              		.loc 1 805 29 view .LVU733
 2515 00a2 0130     		adds	r0, r0, #1
 2516 00a4 C000     		lsls	r0, r0, #3
ARM GAS  /tmp/ccClG7BW.s 			page 66


 2517 00a6 00F50070 		add	r0, r0, #512
 2518 00aa FFF7FEFF 		bl	WIZCHIP_READ
 2519              	.LVL261:
 805:BSP/socket.c  ****          break;
 2520              		.loc 1 805 29 discriminator 1 view .LVU734
 2521 00ae 00F01F00 		and	r0, r0, #31
 805:BSP/socket.c  ****          break;
 2522              		.loc 1 805 27 discriminator 1 view .LVU735
 2523 00b2 2070     		strb	r0, [r4]
 806:BSP/socket.c  ****    #if _WIZCHIP_ != 5100
 2524              		.loc 1 806 10 is_stmt 1 view .LVU736
 819:BSP/socket.c  **** }
 2525              		.loc 1 819 11 is_stmt 0 view .LVU737
 2526 00b4 0120     		movs	r0, #1
 806:BSP/socket.c  ****    #if _WIZCHIP_ != 5100
 2527              		.loc 1 806 10 view .LVU738
 2528 00b6 CEE7     		b	.L202
 2529              	.LVL262:
 2530              	.L205:
 809:BSP/socket.c  ****          setSn_IMR(sn,*(uint8_t*)arg);
 2531              		.loc 1 809 10 is_stmt 1 view .LVU739
 809:BSP/socket.c  ****          setSn_IMR(sn,*(uint8_t*)arg);
 2532              		.loc 1 809 15 is_stmt 0 view .LVU740
 2533 00b8 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2534              	.LVL263:
 809:BSP/socket.c  ****          setSn_IMR(sn,*(uint8_t*)arg);
 2535              		.loc 1 809 12 view .LVU741
 2536 00ba 1F29     		cmp	r1, #31
 2537 00bc 22D8     		bhi	.L217
 810:BSP/socket.c  ****          break;
 2538              		.loc 1 810 10 is_stmt 1 view .LVU742
 2539 00be 8000     		lsls	r0, r0, #2
 2540              	.LVL264:
 810:BSP/socket.c  ****          break;
 2541              		.loc 1 810 10 is_stmt 0 view .LVU743
 2542 00c0 0130     		adds	r0, r0, #1
 2543 00c2 C000     		lsls	r0, r0, #3
 2544 00c4 01F01F01 		and	r1, r1, #31
 2545 00c8 00F53050 		add	r0, r0, #11264
 2546 00cc FFF7FEFF 		bl	WIZCHIP_WRITE
 2547              	.LVL265:
 811:BSP/socket.c  ****       case CS_GET_INTMASK:   
 2548              		.loc 1 811 10 is_stmt 1 view .LVU744
 819:BSP/socket.c  **** }
 2549              		.loc 1 819 11 is_stmt 0 view .LVU745
 2550 00d0 0120     		movs	r0, #1
 811:BSP/socket.c  ****       case CS_GET_INTMASK:   
 2551              		.loc 1 811 10 view .LVU746
 2552 00d2 C0E7     		b	.L202
 2553              	.LVL266:
 2554              	.L203:
 813:BSP/socket.c  ****          break;
 2555              		.loc 1 813 10 is_stmt 1 view .LVU747
 813:BSP/socket.c  ****          break;
 2556              		.loc 1 813 29 is_stmt 0 view .LVU748
 2557 00d4 8000     		lsls	r0, r0, #2
 2558              	.LVL267:
ARM GAS  /tmp/ccClG7BW.s 			page 67


 813:BSP/socket.c  ****          break;
 2559              		.loc 1 813 29 view .LVU749
 2560 00d6 0130     		adds	r0, r0, #1
 2561 00d8 C000     		lsls	r0, r0, #3
 2562 00da 00F53050 		add	r0, r0, #11264
 2563 00de FFF7FEFF 		bl	WIZCHIP_READ
 2564              	.LVL268:
 813:BSP/socket.c  ****          break;
 2565              		.loc 1 813 29 discriminator 1 view .LVU750
 2566 00e2 00F01F00 		and	r0, r0, #31
 813:BSP/socket.c  ****          break;
 2567              		.loc 1 813 27 discriminator 1 view .LVU751
 2568 00e6 2070     		strb	r0, [r4]
 814:BSP/socket.c  ****    #endif
 2569              		.loc 1 814 10 is_stmt 1 view .LVU752
 819:BSP/socket.c  **** }
 2570              		.loc 1 819 11 is_stmt 0 view .LVU753
 2571 00e8 0120     		movs	r0, #1
 814:BSP/socket.c  ****    #endif
 2572              		.loc 1 814 10 view .LVU754
 2573 00ea B4E7     		b	.L202
 2574              	.LVL269:
 2575              	.L213:
 2576              	.LCFI30:
 2577              		.cfi_def_cfa_offset 0
 2578              		.cfi_restore 4
 2579              		.cfi_restore 14
 779:BSP/socket.c  ****    switch(cstype)
 2580              		.loc 1 779 4 discriminator 1 view .LVU755
 2581 00ec 4FF0FF30 		mov	r0, #-1
 2582              	.LVL270:
 2583              		.loc 1 820 1 view .LVU756
 2584 00f0 7047     		bx	lr
 2585              	.LVL271:
 2586              	.L214:
 2587              	.LCFI31:
 2588              		.cfi_def_cfa_offset 8
 2589              		.cfi_offset 4, -8
 2590              		.cfi_offset 14, -4
 780:BSP/socket.c  ****    {
 2591              		.loc 1 780 4 view .LVU757
 2592 00f2 6FF00900 		mvn	r0, #9
 2593              	.LVL272:
 780:BSP/socket.c  ****    {
 2594              		.loc 1 780 4 view .LVU758
 2595 00f6 AEE7     		b	.L202
 2596              	.LVL273:
 2597              	.L215:
 786:BSP/socket.c  ****          break;
 2598              		.loc 1 786 22 view .LVU759
 2599 00f8 6FF00900 		mvn	r0, #9
 2600              	.LVL274:
 786:BSP/socket.c  ****          break;
 2601              		.loc 1 786 22 view .LVU760
 2602 00fc ABE7     		b	.L202
 2603              	.LVL275:
 2604              	.L216:
ARM GAS  /tmp/ccClG7BW.s 			page 68


 801:BSP/socket.c  ****          setSn_IR(sn,*(uint8_t*)arg);
 2605              		.loc 1 801 49 discriminator 1 view .LVU761
 2606 00fe 6FF00900 		mvn	r0, #9
 2607              	.LVL276:
 801:BSP/socket.c  ****          setSn_IR(sn,*(uint8_t*)arg);
 2608              		.loc 1 801 49 discriminator 1 view .LVU762
 2609 0102 A8E7     		b	.L202
 2610              	.LVL277:
 2611              	.L217:
 809:BSP/socket.c  ****          setSn_IMR(sn,*(uint8_t*)arg);
 2612              		.loc 1 809 49 discriminator 1 view .LVU763
 2613 0104 6FF00900 		mvn	r0, #9
 2614              	.LVL278:
 809:BSP/socket.c  ****          setSn_IMR(sn,*(uint8_t*)arg);
 2615              		.loc 1 809 49 discriminator 1 view .LVU764
 2616 0108 A5E7     		b	.L202
 2617              	.L224:
 2618 010a 00BF     		.align	2
 2619              	.L223:
 2620 010c 00000000 		.word	sock_io_mode
 2621              		.cfi_endproc
 2622              	.LFE9:
 2624              		.section	.text.setsockopt,"ax",%progbits
 2625              		.align	1
 2626              		.global	setsockopt
 2627              		.syntax unified
 2628              		.thumb
 2629              		.thumb_func
 2631              	setsockopt:
 2632              	.LVL279:
 2633              	.LFB10:
 821:BSP/socket.c  **** 
 822:BSP/socket.c  **** int8_t  setsockopt(uint8_t sn, sockopt_type sotype, void* arg)
 823:BSP/socket.c  **** {
 2634              		.loc 1 823 1 is_stmt 1 view -0
 2635              		.cfi_startproc
 2636              		@ args = 0, pretend = 0, frame = 0
 2637              		@ frame_needed = 0, uses_anonymous_args = 0
 824:BSP/socket.c  ****  // M20131220 : Remove warning
 825:BSP/socket.c  ****  //uint8_t tmp;
 826:BSP/socket.c  ****    CHECK_SOCKNUM();
 2638              		.loc 1 826 4 view .LVU766
 2639              		.loc 1 826 4 view .LVU767
 2640 0000 0828     		cmp	r0, #8
 2641 0002 00F28680 		bhi	.L237
 823:BSP/socket.c  ****  // M20131220 : Remove warning
 2642              		.loc 1 823 1 is_stmt 0 view .LVU768
 2643 0006 70B5     		push	{r4, r5, r6, lr}
 2644              	.LCFI32:
 2645              		.cfi_def_cfa_offset 16
 2646              		.cfi_offset 4, -16
 2647              		.cfi_offset 5, -12
 2648              		.cfi_offset 6, -8
 2649              		.cfi_offset 14, -4
 2650 0008 1546     		mov	r5, r2
 2651              		.loc 1 826 4 is_stmt 1 discriminator 2 view .LVU769
 2652              		.loc 1 826 19 discriminator 2 view .LVU770
ARM GAS  /tmp/ccClG7BW.s 			page 69


 827:BSP/socket.c  ****    switch(sotype)
 2653              		.loc 1 827 4 view .LVU771
 2654 000a 0139     		subs	r1, r1, #1
 2655              	.LVL280:
 2656              		.loc 1 827 4 is_stmt 0 view .LVU772
 2657 000c 0629     		cmp	r1, #6
 2658 000e 00F28380 		bhi	.L238
 2659 0012 DFE801F0 		tbb	[pc, r1]
 2660              	.L228:
 2661 0016 04       		.byte	(.L234-.L228)/2
 2662 0017 0E       		.byte	(.L233-.L228)/2
 2663 0018 18       		.byte	(.L232-.L228)/2
 2664 0019 28       		.byte	(.L231-.L228)/2
 2665 001a 33       		.byte	(.L230-.L228)/2
 2666 001b 43       		.byte	(.L229-.L228)/2
 2667 001c 6D       		.byte	(.L227-.L228)/2
 2668 001d 00       		.p2align 1
 2669              	.L234:
 828:BSP/socket.c  ****    {
 829:BSP/socket.c  ****       case SO_TTL:
 830:BSP/socket.c  ****          setSn_TTL(sn,*(uint8_t*)arg);
 2670              		.loc 1 830 10 is_stmt 1 view .LVU773
 2671 001e 8000     		lsls	r0, r0, #2
 2672              	.LVL281:
 2673              		.loc 1 830 10 is_stmt 0 view .LVU774
 2674 0020 0130     		adds	r0, r0, #1
 2675 0022 C000     		lsls	r0, r0, #3
 2676 0024 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2677              	.LVL282:
 2678              		.loc 1 830 10 view .LVU775
 2679 0026 00F5B050 		add	r0, r0, #5632
 2680 002a FFF7FEFF 		bl	WIZCHIP_WRITE
 2681              	.LVL283:
 831:BSP/socket.c  ****          break;
 2682              		.loc 1 831 10 is_stmt 1 view .LVU776
 832:BSP/socket.c  ****       case SO_TOS:
 833:BSP/socket.c  ****          setSn_TOS(sn,*(uint8_t*)arg);
 834:BSP/socket.c  ****          break;
 835:BSP/socket.c  ****       case SO_MSS:
 836:BSP/socket.c  ****          setSn_MSSR(sn,*(uint16_t*)arg);
 837:BSP/socket.c  ****          break;
 838:BSP/socket.c  ****       case SO_DESTIP:
 839:BSP/socket.c  ****          setSn_DIPR(sn, (uint8_t*)arg);
 840:BSP/socket.c  ****          break;
 841:BSP/socket.c  ****       case SO_DESTPORT:
 842:BSP/socket.c  ****          setSn_DPORT(sn, *(uint16_t*)arg);
 843:BSP/socket.c  ****          break;
 844:BSP/socket.c  **** #if _WIZCHIP_ != 5100
 845:BSP/socket.c  ****       case SO_KEEPALIVESEND:
 846:BSP/socket.c  ****          CHECK_SOCKMODE(Sn_MR_TCP);
 847:BSP/socket.c  ****          #if _WIZCHIP_ > 5200
 848:BSP/socket.c  ****             if(getSn_KPALVTR(sn) != 0) return SOCKERR_SOCKOPT;
 849:BSP/socket.c  ****          #endif
 850:BSP/socket.c  ****             setSn_CR(sn,Sn_CR_SEND_KEEP);
 851:BSP/socket.c  ****             while(getSn_CR(sn) != 0)
 852:BSP/socket.c  ****             {
 853:BSP/socket.c  ****                // M20131220
ARM GAS  /tmp/ccClG7BW.s 			page 70


 854:BSP/socket.c  ****          		//if ((tmp = getSn_IR(sn)) & Sn_IR_TIMEOUT)
 855:BSP/socket.c  ****                if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 856:BSP/socket.c  ****          		{
 857:BSP/socket.c  ****          			setSn_IR(sn, Sn_IR_TIMEOUT);
 858:BSP/socket.c  ****                   return SOCKERR_TIMEOUT;
 859:BSP/socket.c  ****          		}
 860:BSP/socket.c  ****             }
 861:BSP/socket.c  ****          break;
 862:BSP/socket.c  ****    #if !( (_WIZCHIP_ == 5100) || (_WIZCHIP_ == 5200) )
 863:BSP/socket.c  ****       case SO_KEEPALIVEAUTO:
 864:BSP/socket.c  ****          CHECK_SOCKMODE(Sn_MR_TCP);
 865:BSP/socket.c  ****          setSn_KPALVTR(sn,*(uint8_t*)arg);
 866:BSP/socket.c  ****          break;
 867:BSP/socket.c  ****    #endif      
 868:BSP/socket.c  **** #endif   
 869:BSP/socket.c  ****       default:
 870:BSP/socket.c  ****          return SOCKERR_ARG;
 871:BSP/socket.c  ****    }   
 872:BSP/socket.c  ****    return SOCK_OK;
 2683              		.loc 1 872 11 is_stmt 0 view .LVU777
 2684 002e 0120     		movs	r0, #1
 2685              	.LVL284:
 2686              	.L226:
 873:BSP/socket.c  **** }
 2687              		.loc 1 873 1 view .LVU778
 2688 0030 70BD     		pop	{r4, r5, r6, pc}
 2689              	.LVL285:
 2690              	.L233:
 833:BSP/socket.c  ****          break;
 2691              		.loc 1 833 10 is_stmt 1 view .LVU779
 2692 0032 8000     		lsls	r0, r0, #2
 2693              	.LVL286:
 833:BSP/socket.c  ****          break;
 2694              		.loc 1 833 10 is_stmt 0 view .LVU780
 2695 0034 0130     		adds	r0, r0, #1
 2696 0036 C000     		lsls	r0, r0, #3
 2697 0038 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 2698 003a 00F5A850 		add	r0, r0, #5376
 2699 003e FFF7FEFF 		bl	WIZCHIP_WRITE
 2700              	.LVL287:
 834:BSP/socket.c  ****       case SO_MSS:
 2701              		.loc 1 834 10 is_stmt 1 view .LVU781
 872:BSP/socket.c  **** }
 2702              		.loc 1 872 11 is_stmt 0 view .LVU782
 2703 0042 0120     		movs	r0, #1
 834:BSP/socket.c  ****       case SO_MSS:
 2704              		.loc 1 834 10 view .LVU783
 2705 0044 F4E7     		b	.L226
 2706              	.LVL288:
 2707              	.L232:
 836:BSP/socket.c  ****          break;
 2708              		.loc 1 836 10 is_stmt 1 view .LVU784
 2709 0046 8400     		lsls	r4, r0, #2
 2710 0048 0134     		adds	r4, r4, #1
 2711 004a E400     		lsls	r4, r4, #3
 2712 004c 1188     		ldrh	r1, [r2]
 2713 004e 090A     		lsrs	r1, r1, #8
ARM GAS  /tmp/ccClG7BW.s 			page 71


 2714 0050 04F59050 		add	r0, r4, #4608
 2715              	.LVL289:
 836:BSP/socket.c  ****          break;
 2716              		.loc 1 836 10 is_stmt 0 view .LVU785
 2717 0054 FFF7FEFF 		bl	WIZCHIP_WRITE
 2718              	.LVL290:
 836:BSP/socket.c  ****          break;
 2719              		.loc 1 836 10 is_stmt 1 discriminator 1 view .LVU786
 2720 0058 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 2721 005a 04F59850 		add	r0, r4, #4864
 2722 005e FFF7FEFF 		bl	WIZCHIP_WRITE
 2723              	.LVL291:
 836:BSP/socket.c  ****          break;
 2724              		.loc 1 836 40 discriminator 2 view .LVU787
 837:BSP/socket.c  ****       case SO_DESTIP:
 2725              		.loc 1 837 10 view .LVU788
 872:BSP/socket.c  **** }
 2726              		.loc 1 872 11 is_stmt 0 view .LVU789
 2727 0062 0120     		movs	r0, #1
 837:BSP/socket.c  ****       case SO_DESTIP:
 2728              		.loc 1 837 10 view .LVU790
 2729 0064 E4E7     		b	.L226
 2730              	.LVL292:
 2731              	.L231:
 839:BSP/socket.c  ****          break;
 2732              		.loc 1 839 10 is_stmt 1 view .LVU791
 2733 0066 8000     		lsls	r0, r0, #2
 2734              	.LVL293:
 839:BSP/socket.c  ****          break;
 2735              		.loc 1 839 10 is_stmt 0 view .LVU792
 2736 0068 0130     		adds	r0, r0, #1
 2737 006a C000     		lsls	r0, r0, #3
 2738 006c 0422     		movs	r2, #4
 2739              	.LVL294:
 839:BSP/socket.c  ****          break;
 2740              		.loc 1 839 10 view .LVU793
 2741 006e 2946     		mov	r1, r5
 2742 0070 00F54060 		add	r0, r0, #3072
 2743 0074 FFF7FEFF 		bl	WIZCHIP_WRITE_BUF
 2744              	.LVL295:
 840:BSP/socket.c  ****       case SO_DESTPORT:
 2745              		.loc 1 840 10 is_stmt 1 view .LVU794
 872:BSP/socket.c  **** }
 2746              		.loc 1 872 11 is_stmt 0 view .LVU795
 2747 0078 0120     		movs	r0, #1
 840:BSP/socket.c  ****       case SO_DESTPORT:
 2748              		.loc 1 840 10 view .LVU796
 2749 007a D9E7     		b	.L226
 2750              	.LVL296:
 2751              	.L230:
 842:BSP/socket.c  ****          break;
 2752              		.loc 1 842 10 is_stmt 1 view .LVU797
 2753 007c 8400     		lsls	r4, r0, #2
 2754 007e 0134     		adds	r4, r4, #1
 2755 0080 E400     		lsls	r4, r4, #3
 2756 0082 1188     		ldrh	r1, [r2]
 2757 0084 090A     		lsrs	r1, r1, #8
ARM GAS  /tmp/ccClG7BW.s 			page 72


 2758 0086 04F58050 		add	r0, r4, #4096
 2759              	.LVL297:
 842:BSP/socket.c  ****          break;
 2760              		.loc 1 842 10 is_stmt 0 view .LVU798
 2761 008a FFF7FEFF 		bl	WIZCHIP_WRITE
 2762              	.LVL298:
 842:BSP/socket.c  ****          break;
 2763              		.loc 1 842 10 is_stmt 1 discriminator 1 view .LVU799
 2764 008e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 2765 0090 04F58850 		add	r0, r4, #4352
 2766 0094 FFF7FEFF 		bl	WIZCHIP_WRITE
 2767              	.LVL299:
 842:BSP/socket.c  ****          break;
 2768              		.loc 1 842 42 discriminator 2 view .LVU800
 843:BSP/socket.c  **** #if _WIZCHIP_ != 5100
 2769              		.loc 1 843 10 view .LVU801
 872:BSP/socket.c  **** }
 2770              		.loc 1 872 11 is_stmt 0 view .LVU802
 2771 0098 0120     		movs	r0, #1
 843:BSP/socket.c  **** #if _WIZCHIP_ != 5100
 2772              		.loc 1 843 10 view .LVU803
 2773 009a C9E7     		b	.L226
 2774              	.LVL300:
 2775              	.L229:
 846:BSP/socket.c  ****          #if _WIZCHIP_ > 5200
 2776              		.loc 1 846 10 is_stmt 1 view .LVU804
 846:BSP/socket.c  ****          #if _WIZCHIP_ > 5200
 2777              		.loc 1 846 10 view .LVU805
 2778 009c 8400     		lsls	r4, r0, #2
 2779 009e 0134     		adds	r4, r4, #1
 2780 00a0 E000     		lsls	r0, r4, #3
 2781              	.LVL301:
 846:BSP/socket.c  ****          #if _WIZCHIP_ > 5200
 2782              		.loc 1 846 10 is_stmt 0 view .LVU806
 2783 00a2 FFF7FEFF 		bl	WIZCHIP_READ
 2784              	.LVL302:
 846:BSP/socket.c  ****          #if _WIZCHIP_ > 5200
 2785              		.loc 1 846 10 discriminator 1 view .LVU807
 2786 00a6 00F00F00 		and	r0, r0, #15
 2787 00aa 0128     		cmp	r0, #1
 2788 00ac 37D1     		bne	.L239
 846:BSP/socket.c  ****          #if _WIZCHIP_ > 5200
 2789              		.loc 1 846 10 is_stmt 1 discriminator 2 view .LVU808
 846:BSP/socket.c  ****          #if _WIZCHIP_ > 5200
 2790              		.loc 1 846 35 discriminator 2 view .LVU809
 848:BSP/socket.c  ****          #endif
 2791              		.loc 1 848 13 view .LVU810
 848:BSP/socket.c  ****          #endif
 2792              		.loc 1 848 16 is_stmt 0 view .LVU811
 2793 00ae E400     		lsls	r4, r4, #3
 2794 00b0 04F53C50 		add	r0, r4, #12032
 2795 00b4 FFF7FEFF 		bl	WIZCHIP_READ
 2796              	.LVL303:
 848:BSP/socket.c  ****          #endif
 2797              		.loc 1 848 15 discriminator 1 view .LVU812
 2798 00b8 A0BB     		cbnz	r0, .L240
 850:BSP/socket.c  ****             while(getSn_CR(sn) != 0)
ARM GAS  /tmp/ccClG7BW.s 			page 73


 2799              		.loc 1 850 13 is_stmt 1 view .LVU813
 2800 00ba 04F58076 		add	r6, r4, #256
 2801 00be 2221     		movs	r1, #34
 2802 00c0 3046     		mov	r0, r6
 2803 00c2 FFF7FEFF 		bl	WIZCHIP_WRITE
 2804              	.LVL304:
 851:BSP/socket.c  ****             {
 2805              		.loc 1 851 13 view .LVU814
 2806              	.L235:
 851:BSP/socket.c  ****             {
 2807              		.loc 1 851 32 view .LVU815
 851:BSP/socket.c  ****             {
 2808              		.loc 1 851 19 is_stmt 0 view .LVU816
 2809 00c6 3046     		mov	r0, r6
 2810 00c8 FFF7FEFF 		bl	WIZCHIP_READ
 2811              	.LVL305:
 851:BSP/socket.c  ****             {
 2812              		.loc 1 851 32 discriminator 1 view .LVU817
 2813 00cc 70B1     		cbz	r0, .L246
 855:BSP/socket.c  ****          		{
 2814              		.loc 1 855 16 is_stmt 1 view .LVU818
 855:BSP/socket.c  ****          		{
 2815              		.loc 1 855 20 is_stmt 0 view .LVU819
 2816 00ce 04F50075 		add	r5, r4, #512
 2817 00d2 2846     		mov	r0, r5
 2818 00d4 FFF7FEFF 		bl	WIZCHIP_READ
 2819              	.LVL306:
 855:BSP/socket.c  ****          		{
 2820              		.loc 1 855 19 discriminator 1 view .LVU820
 2821 00d8 10F0080F 		tst	r0, #8
 2822 00dc F3D0     		beq	.L235
 857:BSP/socket.c  ****                   return SOCKERR_TIMEOUT;
 2823              		.loc 1 857 13 is_stmt 1 view .LVU821
 2824 00de 0821     		movs	r1, #8
 2825 00e0 2846     		mov	r0, r5
 2826 00e2 FFF7FEFF 		bl	WIZCHIP_WRITE
 2827              	.LVL307:
 858:BSP/socket.c  ****          		}
 2828              		.loc 1 858 19 view .LVU822
 858:BSP/socket.c  ****          		}
 2829              		.loc 1 858 26 is_stmt 0 view .LVU823
 2830 00e6 6FF00C00 		mvn	r0, #12
 2831 00ea A1E7     		b	.L226
 2832              	.L246:
 872:BSP/socket.c  **** }
 2833              		.loc 1 872 11 view .LVU824
 2834 00ec 0120     		movs	r0, #1
 2835 00ee 9FE7     		b	.L226
 2836              	.LVL308:
 2837              	.L227:
 864:BSP/socket.c  ****          setSn_KPALVTR(sn,*(uint8_t*)arg);
 2838              		.loc 1 864 10 is_stmt 1 view .LVU825
 864:BSP/socket.c  ****          setSn_KPALVTR(sn,*(uint8_t*)arg);
 2839              		.loc 1 864 10 view .LVU826
 2840 00f0 8000     		lsls	r0, r0, #2
 2841              	.LVL309:
 864:BSP/socket.c  ****          setSn_KPALVTR(sn,*(uint8_t*)arg);
ARM GAS  /tmp/ccClG7BW.s 			page 74


 2842              		.loc 1 864 10 is_stmt 0 view .LVU827
 2843 00f2 441C     		adds	r4, r0, #1
 2844 00f4 E000     		lsls	r0, r4, #3
 2845 00f6 FFF7FEFF 		bl	WIZCHIP_READ
 2846              	.LVL310:
 864:BSP/socket.c  ****          setSn_KPALVTR(sn,*(uint8_t*)arg);
 2847              		.loc 1 864 10 discriminator 1 view .LVU828
 2848 00fa 00F00F00 		and	r0, r0, #15
 2849 00fe 0128     		cmp	r0, #1
 2850 0100 13D1     		bne	.L241
 864:BSP/socket.c  ****          setSn_KPALVTR(sn,*(uint8_t*)arg);
 2851              		.loc 1 864 10 is_stmt 1 discriminator 2 view .LVU829
 864:BSP/socket.c  ****          setSn_KPALVTR(sn,*(uint8_t*)arg);
 2852              		.loc 1 864 35 discriminator 2 view .LVU830
 865:BSP/socket.c  ****          break;
 2853              		.loc 1 865 10 view .LVU831
 2854 0102 E000     		lsls	r0, r4, #3
 2855 0104 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 2856 0106 00F53C50 		add	r0, r0, #12032
 2857 010a FFF7FEFF 		bl	WIZCHIP_WRITE
 2858              	.LVL311:
 866:BSP/socket.c  ****    #endif      
 2859              		.loc 1 866 10 view .LVU832
 872:BSP/socket.c  **** }
 2860              		.loc 1 872 11 is_stmt 0 view .LVU833
 2861 010e 0120     		movs	r0, #1
 866:BSP/socket.c  ****    #endif      
 2862              		.loc 1 866 10 view .LVU834
 2863 0110 8EE7     		b	.L226
 2864              	.LVL312:
 2865              	.L237:
 2866              	.LCFI33:
 2867              		.cfi_def_cfa_offset 0
 2868              		.cfi_restore 4
 2869              		.cfi_restore 5
 2870              		.cfi_restore 6
 2871              		.cfi_restore 14
 826:BSP/socket.c  ****    switch(sotype)
 2872              		.loc 1 826 4 discriminator 1 view .LVU835
 2873 0112 4FF0FF30 		mov	r0, #-1
 2874              	.LVL313:
 2875              		.loc 1 873 1 view .LVU836
 2876 0116 7047     		bx	lr
 2877              	.LVL314:
 2878              	.L238:
 2879              	.LCFI34:
 2880              		.cfi_def_cfa_offset 16
 2881              		.cfi_offset 4, -16
 2882              		.cfi_offset 5, -12
 2883              		.cfi_offset 6, -8
 2884              		.cfi_offset 14, -4
 827:BSP/socket.c  ****    {
 2885              		.loc 1 827 4 view .LVU837
 2886 0118 6FF00900 		mvn	r0, #9
 2887              	.LVL315:
 827:BSP/socket.c  ****    {
 2888              		.loc 1 827 4 view .LVU838
ARM GAS  /tmp/ccClG7BW.s 			page 75


 2889 011c 88E7     		b	.L226
 2890              	.LVL316:
 2891              	.L239:
 846:BSP/socket.c  ****          #if _WIZCHIP_ > 5200
 2892              		.loc 1 846 10 discriminator 1 view .LVU839
 2893 011e 6FF00400 		mvn	r0, #4
 2894 0122 85E7     		b	.L226
 2895              	.L240:
 848:BSP/socket.c  ****          #endif
 2896              		.loc 1 848 47 discriminator 1 view .LVU840
 2897 0124 6FF00100 		mvn	r0, #1
 2898 0128 82E7     		b	.L226
 2899              	.L241:
 864:BSP/socket.c  ****          setSn_KPALVTR(sn,*(uint8_t*)arg);
 2900              		.loc 1 864 10 discriminator 1 view .LVU841
 2901 012a 6FF00400 		mvn	r0, #4
 2902 012e 7FE7     		b	.L226
 2903              		.cfi_endproc
 2904              	.LFE10:
 2906              		.section	.text.getsockopt,"ax",%progbits
 2907              		.align	1
 2908              		.global	getsockopt
 2909              		.syntax unified
 2910              		.thumb
 2911              		.thumb_func
 2913              	getsockopt:
 2914              	.LVL317:
 2915              	.LFB11:
 874:BSP/socket.c  **** 
 875:BSP/socket.c  **** int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
 876:BSP/socket.c  **** {
 2916              		.loc 1 876 1 is_stmt 1 view -0
 2917              		.cfi_startproc
 2918              		@ args = 0, pretend = 0, frame = 0
 2919              		@ frame_needed = 0, uses_anonymous_args = 0
 877:BSP/socket.c  ****    CHECK_SOCKNUM();
 2920              		.loc 1 877 4 view .LVU843
 2921              		.loc 1 877 4 view .LVU844
 2922 0000 0828     		cmp	r0, #8
 2923 0002 00F29F80 		bhi	.L263
 876:BSP/socket.c  ****    CHECK_SOCKNUM();
 2924              		.loc 1 876 1 is_stmt 0 view .LVU845
 2925 0006 70B5     		push	{r4, r5, r6, lr}
 2926              	.LCFI35:
 2927              		.cfi_def_cfa_offset 16
 2928              		.cfi_offset 4, -16
 2929              		.cfi_offset 5, -12
 2930              		.cfi_offset 6, -8
 2931              		.cfi_offset 14, -4
 2932 0008 0646     		mov	r6, r0
 2933 000a 1546     		mov	r5, r2
 2934              		.loc 1 877 4 is_stmt 1 discriminator 2 view .LVU846
 2935              		.loc 1 877 19 discriminator 2 view .LVU847
 878:BSP/socket.c  ****    switch(sotype)
 2936              		.loc 1 878 4 view .LVU848
 2937 000c 0C29     		cmp	r1, #12
 2938 000e 00F29C80 		bhi	.L264
ARM GAS  /tmp/ccClG7BW.s 			page 76


 2939 0012 DFE801F0 		tbb	[pc, r1]
 2940              	.L250:
 2941 0016 07       		.byte	(.L261-.L250)/2
 2942 0017 11       		.byte	(.L260-.L250)/2
 2943 0018 1B       		.byte	(.L259-.L250)/2
 2944 0019 25       		.byte	(.L258-.L250)/2
 2945 001a 36       		.byte	(.L257-.L250)/2
 2946 001b 41       		.byte	(.L256-.L250)/2
 2947 001c 9A       		.byte	(.L264-.L250)/2
 2948 001d 52       		.byte	(.L255-.L250)/2
 2949 001e 63       		.byte	(.L254-.L250)/2
 2950 001f 68       		.byte	(.L253-.L250)/2
 2951 0020 6D       		.byte	(.L252-.L250)/2
 2952 0021 77       		.byte	(.L251-.L250)/2
 2953 0022 8B       		.byte	(.L249-.L250)/2
 2954 0023 00       		.p2align 1
 2955              	.L261:
 879:BSP/socket.c  ****    {
 880:BSP/socket.c  ****       case SO_FLAG:
 881:BSP/socket.c  ****          *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 2956              		.loc 1 881 10 view .LVU849
 2957              		.loc 1 881 27 is_stmt 0 view .LVU850
 2958 0024 8000     		lsls	r0, r0, #2
 2959              	.LVL318:
 2960              		.loc 1 881 27 view .LVU851
 2961 0026 0130     		adds	r0, r0, #1
 2962 0028 C000     		lsls	r0, r0, #3
 2963 002a FFF7FEFF 		bl	WIZCHIP_READ
 2964              	.LVL319:
 2965              		.loc 1 881 40 discriminator 1 view .LVU852
 2966 002e 00F0F000 		and	r0, r0, #240
 2967              		.loc 1 881 25 discriminator 1 view .LVU853
 2968 0032 2870     		strb	r0, [r5]
 882:BSP/socket.c  ****          break;
 2969              		.loc 1 882 10 is_stmt 1 view .LVU854
 883:BSP/socket.c  ****       case SO_TTL:
 884:BSP/socket.c  ****          *(uint8_t*) arg = getSn_TTL(sn);
 885:BSP/socket.c  ****          break;
 886:BSP/socket.c  ****       case SO_TOS:
 887:BSP/socket.c  ****          *(uint8_t*) arg = getSn_TOS(sn);
 888:BSP/socket.c  ****          break;
 889:BSP/socket.c  ****       case SO_MSS:   
 890:BSP/socket.c  ****          *(uint16_t*) arg = getSn_MSSR(sn);
 891:BSP/socket.c  ****          break;
 892:BSP/socket.c  ****       case SO_DESTIP:
 893:BSP/socket.c  ****          getSn_DIPR(sn, (uint8_t*)arg);
 894:BSP/socket.c  ****          break;
 895:BSP/socket.c  ****       case SO_DESTPORT:  
 896:BSP/socket.c  ****          *(uint16_t*) arg = getSn_DPORT(sn);
 897:BSP/socket.c  ****          break;
 898:BSP/socket.c  ****    #if _WIZCHIP_ > 5200   
 899:BSP/socket.c  ****       case SO_KEEPALIVEAUTO:
 900:BSP/socket.c  ****          CHECK_SOCKMODE(Sn_MR_TCP);
 901:BSP/socket.c  ****          *(uint16_t*) arg = getSn_KPALVTR(sn);
 902:BSP/socket.c  ****          break;
 903:BSP/socket.c  ****    #endif      
 904:BSP/socket.c  ****       case SO_SENDBUF:
ARM GAS  /tmp/ccClG7BW.s 			page 77


 905:BSP/socket.c  ****          *(uint16_t*) arg = getSn_TX_FSR(sn);
 906:BSP/socket.c  ****          break;
 907:BSP/socket.c  ****       case SO_RECVBUF:
 908:BSP/socket.c  ****          *(uint16_t*) arg = getSn_RX_RSR(sn);
 909:BSP/socket.c  ****          break;
 910:BSP/socket.c  ****       case SO_STATUS:
 911:BSP/socket.c  ****          *(uint8_t*) arg = getSn_SR(sn);
 912:BSP/socket.c  ****          break;
 913:BSP/socket.c  ****       case SO_REMAINSIZE:
 914:BSP/socket.c  ****          if(getSn_MR(sn) & Sn_MR_TCP)
 915:BSP/socket.c  ****             *(uint16_t*)arg = getSn_RX_RSR(sn);
 916:BSP/socket.c  ****          else
 917:BSP/socket.c  ****             *(uint16_t*)arg = sock_remained_size[sn];
 918:BSP/socket.c  ****          break;
 919:BSP/socket.c  ****       case SO_PACKINFO:
 920:BSP/socket.c  ****          //CHECK_SOCKMODE(Sn_MR_TCP);
 921:BSP/socket.c  **** #if _WIZCHIP_ != 5300
 922:BSP/socket.c  ****          if((getSn_MR(sn) == Sn_MR_TCP))
 923:BSP/socket.c  ****              return SOCKERR_SOCKMODE;
 924:BSP/socket.c  **** #endif
 925:BSP/socket.c  ****          *(uint8_t*)arg = sock_pack_info[sn];
 926:BSP/socket.c  ****          break;
 927:BSP/socket.c  ****       default:
 928:BSP/socket.c  ****          return SOCKERR_SOCKOPT;
 929:BSP/socket.c  ****    }
 930:BSP/socket.c  ****    return SOCK_OK;
 2970              		.loc 1 930 11 is_stmt 0 view .LVU855
 2971 0034 0120     		movs	r0, #1
 2972              	.LVL320:
 2973              	.L248:
 931:BSP/socket.c  **** }
 2974              		.loc 1 931 1 view .LVU856
 2975 0036 70BD     		pop	{r4, r5, r6, pc}
 2976              	.LVL321:
 2977              	.L260:
 884:BSP/socket.c  ****          break;
 2978              		.loc 1 884 10 is_stmt 1 view .LVU857
 884:BSP/socket.c  ****          break;
 2979              		.loc 1 884 28 is_stmt 0 view .LVU858
 2980 0038 8000     		lsls	r0, r0, #2
 2981              	.LVL322:
 884:BSP/socket.c  ****          break;
 2982              		.loc 1 884 28 view .LVU859
 2983 003a 0130     		adds	r0, r0, #1
 2984 003c C000     		lsls	r0, r0, #3
 2985 003e 00F5B050 		add	r0, r0, #5632
 2986 0042 FFF7FEFF 		bl	WIZCHIP_READ
 2987              	.LVL323:
 884:BSP/socket.c  ****          break;
 2988              		.loc 1 884 26 discriminator 1 view .LVU860
 2989 0046 2870     		strb	r0, [r5]
 885:BSP/socket.c  ****       case SO_TOS:
 2990              		.loc 1 885 10 is_stmt 1 view .LVU861
 930:BSP/socket.c  **** }
 2991              		.loc 1 930 11 is_stmt 0 view .LVU862
 2992 0048 0120     		movs	r0, #1
 885:BSP/socket.c  ****       case SO_TOS:
ARM GAS  /tmp/ccClG7BW.s 			page 78


 2993              		.loc 1 885 10 view .LVU863
 2994 004a F4E7     		b	.L248
 2995              	.LVL324:
 2996              	.L259:
 887:BSP/socket.c  ****          break;
 2997              		.loc 1 887 10 is_stmt 1 view .LVU864
 887:BSP/socket.c  ****          break;
 2998              		.loc 1 887 28 is_stmt 0 view .LVU865
 2999 004c 8000     		lsls	r0, r0, #2
 3000              	.LVL325:
 887:BSP/socket.c  ****          break;
 3001              		.loc 1 887 28 view .LVU866
 3002 004e 0130     		adds	r0, r0, #1
 3003 0050 C000     		lsls	r0, r0, #3
 3004 0052 00F5A850 		add	r0, r0, #5376
 3005 0056 FFF7FEFF 		bl	WIZCHIP_READ
 3006              	.LVL326:
 887:BSP/socket.c  ****          break;
 3007              		.loc 1 887 26 discriminator 1 view .LVU867
 3008 005a 2870     		strb	r0, [r5]
 888:BSP/socket.c  ****       case SO_MSS:   
 3009              		.loc 1 888 10 is_stmt 1 view .LVU868
 930:BSP/socket.c  **** }
 3010              		.loc 1 930 11 is_stmt 0 view .LVU869
 3011 005c 0120     		movs	r0, #1
 888:BSP/socket.c  ****       case SO_MSS:   
 3012              		.loc 1 888 10 view .LVU870
 3013 005e EAE7     		b	.L248
 3014              	.LVL327:
 3015              	.L258:
 890:BSP/socket.c  ****          break;
 3016              		.loc 1 890 10 is_stmt 1 view .LVU871
 890:BSP/socket.c  ****          break;
 3017              		.loc 1 890 29 is_stmt 0 view .LVU872
 3018 0060 8600     		lsls	r6, r0, #2
 3019 0062 0136     		adds	r6, r6, #1
 3020 0064 F600     		lsls	r6, r6, #3
 3021 0066 06F59050 		add	r0, r6, #4608
 3022              	.LVL328:
 890:BSP/socket.c  ****          break;
 3023              		.loc 1 890 29 view .LVU873
 3024 006a FFF7FEFF 		bl	WIZCHIP_READ
 3025              	.LVL329:
 890:BSP/socket.c  ****          break;
 3026              		.loc 1 890 29 discriminator 1 view .LVU874
 3027 006e 0402     		lsls	r4, r0, #8
 3028 0070 A4B2     		uxth	r4, r4
 3029 0072 06F59850 		add	r0, r6, #4864
 3030 0076 FFF7FEFF 		bl	WIZCHIP_READ
 3031              	.LVL330:
 890:BSP/socket.c  ****          break;
 3032              		.loc 1 890 29 discriminator 2 view .LVU875
 3033 007a 0444     		add	r4, r4, r0
 890:BSP/socket.c  ****          break;
 3034              		.loc 1 890 27 discriminator 2 view .LVU876
 3035 007c 2C80     		strh	r4, [r5]	@ movhi
 891:BSP/socket.c  ****       case SO_DESTIP:
ARM GAS  /tmp/ccClG7BW.s 			page 79


 3036              		.loc 1 891 10 is_stmt 1 view .LVU877
 930:BSP/socket.c  **** }
 3037              		.loc 1 930 11 is_stmt 0 view .LVU878
 3038 007e 0120     		movs	r0, #1
 891:BSP/socket.c  ****       case SO_DESTIP:
 3039              		.loc 1 891 10 view .LVU879
 3040 0080 D9E7     		b	.L248
 3041              	.LVL331:
 3042              	.L257:
 893:BSP/socket.c  ****          break;
 3043              		.loc 1 893 10 is_stmt 1 view .LVU880
 3044 0082 8000     		lsls	r0, r0, #2
 3045              	.LVL332:
 893:BSP/socket.c  ****          break;
 3046              		.loc 1 893 10 is_stmt 0 view .LVU881
 3047 0084 0130     		adds	r0, r0, #1
 3048 0086 C000     		lsls	r0, r0, #3
 3049 0088 0422     		movs	r2, #4
 3050              	.LVL333:
 893:BSP/socket.c  ****          break;
 3051              		.loc 1 893 10 view .LVU882
 3052 008a 2946     		mov	r1, r5
 3053              	.LVL334:
 893:BSP/socket.c  ****          break;
 3054              		.loc 1 893 10 view .LVU883
 3055 008c 00F54060 		add	r0, r0, #3072
 3056 0090 FFF7FEFF 		bl	WIZCHIP_READ_BUF
 3057              	.LVL335:
 894:BSP/socket.c  ****       case SO_DESTPORT:  
 3058              		.loc 1 894 10 is_stmt 1 view .LVU884
 930:BSP/socket.c  **** }
 3059              		.loc 1 930 11 is_stmt 0 view .LVU885
 3060 0094 0120     		movs	r0, #1
 894:BSP/socket.c  ****       case SO_DESTPORT:  
 3061              		.loc 1 894 10 view .LVU886
 3062 0096 CEE7     		b	.L248
 3063              	.LVL336:
 3064              	.L256:
 896:BSP/socket.c  ****          break;
 3065              		.loc 1 896 10 is_stmt 1 view .LVU887
 896:BSP/socket.c  ****          break;
 3066              		.loc 1 896 29 is_stmt 0 view .LVU888
 3067 0098 8600     		lsls	r6, r0, #2
 3068 009a 0136     		adds	r6, r6, #1
 3069 009c F600     		lsls	r6, r6, #3
 3070 009e 06F58050 		add	r0, r6, #4096
 3071              	.LVL337:
 896:BSP/socket.c  ****          break;
 3072              		.loc 1 896 29 view .LVU889
 3073 00a2 FFF7FEFF 		bl	WIZCHIP_READ
 3074              	.LVL338:
 896:BSP/socket.c  ****          break;
 3075              		.loc 1 896 29 discriminator 1 view .LVU890
 3076 00a6 0402     		lsls	r4, r0, #8
 3077 00a8 A4B2     		uxth	r4, r4
 3078 00aa 06F58850 		add	r0, r6, #4352
 3079 00ae FFF7FEFF 		bl	WIZCHIP_READ
ARM GAS  /tmp/ccClG7BW.s 			page 80


 3080              	.LVL339:
 896:BSP/socket.c  ****          break;
 3081              		.loc 1 896 29 discriminator 2 view .LVU891
 3082 00b2 0444     		add	r4, r4, r0
 896:BSP/socket.c  ****          break;
 3083              		.loc 1 896 27 discriminator 2 view .LVU892
 3084 00b4 2C80     		strh	r4, [r5]	@ movhi
 897:BSP/socket.c  ****    #if _WIZCHIP_ > 5200   
 3085              		.loc 1 897 10 is_stmt 1 view .LVU893
 930:BSP/socket.c  **** }
 3086              		.loc 1 930 11 is_stmt 0 view .LVU894
 3087 00b6 0120     		movs	r0, #1
 897:BSP/socket.c  ****    #if _WIZCHIP_ > 5200   
 3088              		.loc 1 897 10 view .LVU895
 3089 00b8 BDE7     		b	.L248
 3090              	.LVL340:
 3091              	.L255:
 900:BSP/socket.c  ****          *(uint16_t*) arg = getSn_KPALVTR(sn);
 3092              		.loc 1 900 10 is_stmt 1 view .LVU896
 900:BSP/socket.c  ****          *(uint16_t*) arg = getSn_KPALVTR(sn);
 3093              		.loc 1 900 10 view .LVU897
 3094 00ba 8400     		lsls	r4, r0, #2
 3095 00bc 0134     		adds	r4, r4, #1
 3096 00be E000     		lsls	r0, r4, #3
 3097              	.LVL341:
 900:BSP/socket.c  ****          *(uint16_t*) arg = getSn_KPALVTR(sn);
 3098              		.loc 1 900 10 is_stmt 0 view .LVU898
 3099 00c0 FFF7FEFF 		bl	WIZCHIP_READ
 3100              	.LVL342:
 900:BSP/socket.c  ****          *(uint16_t*) arg = getSn_KPALVTR(sn);
 3101              		.loc 1 900 10 discriminator 1 view .LVU899
 3102 00c4 00F00F00 		and	r0, r0, #15
 3103 00c8 0128     		cmp	r0, #1
 3104 00ca 41D1     		bne	.L265
 900:BSP/socket.c  ****          *(uint16_t*) arg = getSn_KPALVTR(sn);
 3105              		.loc 1 900 10 is_stmt 1 discriminator 2 view .LVU900
 900:BSP/socket.c  ****          *(uint16_t*) arg = getSn_KPALVTR(sn);
 3106              		.loc 1 900 35 discriminator 2 view .LVU901
 901:BSP/socket.c  ****          break;
 3107              		.loc 1 901 10 view .LVU902
 901:BSP/socket.c  ****          break;
 3108              		.loc 1 901 29 is_stmt 0 view .LVU903
 3109 00cc E400     		lsls	r4, r4, #3
 3110 00ce 04F53C50 		add	r0, r4, #12032
 3111 00d2 FFF7FEFF 		bl	WIZCHIP_READ
 3112              	.LVL343:
 901:BSP/socket.c  ****          break;
 3113              		.loc 1 901 27 discriminator 1 view .LVU904
 3114 00d6 2880     		strh	r0, [r5]	@ movhi
 902:BSP/socket.c  ****    #endif      
 3115              		.loc 1 902 10 is_stmt 1 view .LVU905
 930:BSP/socket.c  **** }
 3116              		.loc 1 930 11 is_stmt 0 view .LVU906
 3117 00d8 0120     		movs	r0, #1
 902:BSP/socket.c  ****    #endif      
 3118              		.loc 1 902 10 view .LVU907
 3119 00da ACE7     		b	.L248
ARM GAS  /tmp/ccClG7BW.s 			page 81


 3120              	.LVL344:
 3121              	.L254:
 905:BSP/socket.c  ****          break;
 3122              		.loc 1 905 10 is_stmt 1 view .LVU908
 905:BSP/socket.c  ****          break;
 3123              		.loc 1 905 29 is_stmt 0 view .LVU909
 3124 00dc FFF7FEFF 		bl	getSn_TX_FSR
 3125              	.LVL345:
 905:BSP/socket.c  ****          break;
 3126              		.loc 1 905 27 discriminator 1 view .LVU910
 3127 00e0 2880     		strh	r0, [r5]	@ movhi
 906:BSP/socket.c  ****       case SO_RECVBUF:
 3128              		.loc 1 906 10 is_stmt 1 view .LVU911
 930:BSP/socket.c  **** }
 3129              		.loc 1 930 11 is_stmt 0 view .LVU912
 3130 00e2 0120     		movs	r0, #1
 906:BSP/socket.c  ****       case SO_RECVBUF:
 3131              		.loc 1 906 10 view .LVU913
 3132 00e4 A7E7     		b	.L248
 3133              	.LVL346:
 3134              	.L253:
 908:BSP/socket.c  ****          break;
 3135              		.loc 1 908 10 is_stmt 1 view .LVU914
 908:BSP/socket.c  ****          break;
 3136              		.loc 1 908 29 is_stmt 0 view .LVU915
 3137 00e6 FFF7FEFF 		bl	getSn_RX_RSR
 3138              	.LVL347:
 908:BSP/socket.c  ****          break;
 3139              		.loc 1 908 27 discriminator 1 view .LVU916
 3140 00ea 2880     		strh	r0, [r5]	@ movhi
 909:BSP/socket.c  ****       case SO_STATUS:
 3141              		.loc 1 909 10 is_stmt 1 view .LVU917
 930:BSP/socket.c  **** }
 3142              		.loc 1 930 11 is_stmt 0 view .LVU918
 3143 00ec 0120     		movs	r0, #1
 909:BSP/socket.c  ****       case SO_STATUS:
 3144              		.loc 1 909 10 view .LVU919
 3145 00ee A2E7     		b	.L248
 3146              	.LVL348:
 3147              	.L252:
 911:BSP/socket.c  ****          break;
 3148              		.loc 1 911 10 is_stmt 1 view .LVU920
 911:BSP/socket.c  ****          break;
 3149              		.loc 1 911 28 is_stmt 0 view .LVU921
 3150 00f0 8000     		lsls	r0, r0, #2
 3151              	.LVL349:
 911:BSP/socket.c  ****          break;
 3152              		.loc 1 911 28 view .LVU922
 3153 00f2 0130     		adds	r0, r0, #1
 3154 00f4 C000     		lsls	r0, r0, #3
 3155 00f6 00F54070 		add	r0, r0, #768
 3156 00fa FFF7FEFF 		bl	WIZCHIP_READ
 3157              	.LVL350:
 911:BSP/socket.c  ****          break;
 3158              		.loc 1 911 26 discriminator 1 view .LVU923
 3159 00fe 2870     		strb	r0, [r5]
 912:BSP/socket.c  ****       case SO_REMAINSIZE:
ARM GAS  /tmp/ccClG7BW.s 			page 82


 3160              		.loc 1 912 10 is_stmt 1 view .LVU924
 930:BSP/socket.c  **** }
 3161              		.loc 1 930 11 is_stmt 0 view .LVU925
 3162 0100 0120     		movs	r0, #1
 912:BSP/socket.c  ****       case SO_REMAINSIZE:
 3163              		.loc 1 912 10 view .LVU926
 3164 0102 98E7     		b	.L248
 3165              	.LVL351:
 3166              	.L251:
 914:BSP/socket.c  ****             *(uint16_t*)arg = getSn_RX_RSR(sn);
 3167              		.loc 1 914 10 is_stmt 1 view .LVU927
 914:BSP/socket.c  ****             *(uint16_t*)arg = getSn_RX_RSR(sn);
 3168              		.loc 1 914 13 is_stmt 0 view .LVU928
 3169 0104 8000     		lsls	r0, r0, #2
 3170              	.LVL352:
 914:BSP/socket.c  ****             *(uint16_t*)arg = getSn_RX_RSR(sn);
 3171              		.loc 1 914 13 view .LVU929
 3172 0106 0130     		adds	r0, r0, #1
 3173 0108 C000     		lsls	r0, r0, #3
 3174 010a FFF7FEFF 		bl	WIZCHIP_READ
 3175              	.LVL353:
 914:BSP/socket.c  ****             *(uint16_t*)arg = getSn_RX_RSR(sn);
 3176              		.loc 1 914 12 discriminator 1 view .LVU930
 3177 010e 10F0010F 		tst	r0, #1
 3178 0112 05D1     		bne	.L271
 917:BSP/socket.c  ****          break;
 3179              		.loc 1 917 13 is_stmt 1 view .LVU931
 917:BSP/socket.c  ****          break;
 3180              		.loc 1 917 49 is_stmt 0 view .LVU932
 3181 0114 114B     		ldr	r3, .L272
 3182 0116 33F81630 		ldrh	r3, [r3, r6, lsl #1]
 917:BSP/socket.c  ****          break;
 3183              		.loc 1 917 29 view .LVU933
 3184 011a 2B80     		strh	r3, [r5]	@ movhi
 930:BSP/socket.c  **** }
 3185              		.loc 1 930 11 view .LVU934
 3186 011c 0120     		movs	r0, #1
 3187 011e 8AE7     		b	.L248
 3188              	.L271:
 915:BSP/socket.c  ****          else
 3189              		.loc 1 915 13 is_stmt 1 view .LVU935
 915:BSP/socket.c  ****          else
 3190              		.loc 1 915 31 is_stmt 0 view .LVU936
 3191 0120 3046     		mov	r0, r6
 3192 0122 FFF7FEFF 		bl	getSn_RX_RSR
 3193              	.LVL354:
 915:BSP/socket.c  ****          else
 3194              		.loc 1 915 29 discriminator 1 view .LVU937
 3195 0126 2880     		strh	r0, [r5]	@ movhi
 930:BSP/socket.c  **** }
 3196              		.loc 1 930 11 view .LVU938
 3197 0128 0120     		movs	r0, #1
 3198 012a 84E7     		b	.L248
 3199              	.LVL355:
 3200              	.L249:
 922:BSP/socket.c  ****              return SOCKERR_SOCKMODE;
 3201              		.loc 1 922 10 is_stmt 1 view .LVU939
ARM GAS  /tmp/ccClG7BW.s 			page 83


 922:BSP/socket.c  ****              return SOCKERR_SOCKMODE;
 3202              		.loc 1 922 14 is_stmt 0 view .LVU940
 3203 012c 8000     		lsls	r0, r0, #2
 3204              	.LVL356:
 922:BSP/socket.c  ****              return SOCKERR_SOCKMODE;
 3205              		.loc 1 922 14 view .LVU941
 3206 012e 0130     		adds	r0, r0, #1
 3207 0130 C000     		lsls	r0, r0, #3
 3208 0132 FFF7FEFF 		bl	WIZCHIP_READ
 3209              	.LVL357:
 922:BSP/socket.c  ****              return SOCKERR_SOCKMODE;
 3210              		.loc 1 922 12 discriminator 1 view .LVU942
 3211 0136 0128     		cmp	r0, #1
 3212 0138 0DD0     		beq	.L266
 925:BSP/socket.c  ****          break;
 3213              		.loc 1 925 10 is_stmt 1 view .LVU943
 925:BSP/socket.c  ****          break;
 3214              		.loc 1 925 41 is_stmt 0 view .LVU944
 3215 013a 094B     		ldr	r3, .L272+4
 3216 013c 9B5D     		ldrb	r3, [r3, r6]	@ zero_extendqisi2
 925:BSP/socket.c  ****          break;
 3217              		.loc 1 925 25 view .LVU945
 3218 013e 2B70     		strb	r3, [r5]
 926:BSP/socket.c  ****       default:
 3219              		.loc 1 926 10 is_stmt 1 view .LVU946
 930:BSP/socket.c  **** }
 3220              		.loc 1 930 11 is_stmt 0 view .LVU947
 3221 0140 0120     		movs	r0, #1
 926:BSP/socket.c  ****       default:
 3222              		.loc 1 926 10 view .LVU948
 3223 0142 78E7     		b	.L248
 3224              	.LVL358:
 3225              	.L263:
 3226              	.LCFI36:
 3227              		.cfi_def_cfa_offset 0
 3228              		.cfi_restore 4
 3229              		.cfi_restore 5
 3230              		.cfi_restore 6
 3231              		.cfi_restore 14
 877:BSP/socket.c  ****    switch(sotype)
 3232              		.loc 1 877 4 discriminator 1 view .LVU949
 3233 0144 4FF0FF30 		mov	r0, #-1
 3234              	.LVL359:
 3235              		.loc 1 931 1 view .LVU950
 3236 0148 7047     		bx	lr
 3237              	.LVL360:
 3238              	.L264:
 3239              	.LCFI37:
 3240              		.cfi_def_cfa_offset 16
 3241              		.cfi_offset 4, -16
 3242              		.cfi_offset 5, -12
 3243              		.cfi_offset 6, -8
 3244              		.cfi_offset 14, -4
 878:BSP/socket.c  ****    {
 3245              		.loc 1 878 4 view .LVU951
 3246 014a 6FF00100 		mvn	r0, #1
 3247              	.LVL361:
ARM GAS  /tmp/ccClG7BW.s 			page 84


 878:BSP/socket.c  ****    {
 3248              		.loc 1 878 4 view .LVU952
 3249 014e 72E7     		b	.L248
 3250              	.LVL362:
 3251              	.L265:
 900:BSP/socket.c  ****          *(uint16_t*) arg = getSn_KPALVTR(sn);
 3252              		.loc 1 900 10 discriminator 1 view .LVU953
 3253 0150 6FF00400 		mvn	r0, #4
 3254 0154 6FE7     		b	.L248
 3255              	.L266:
 923:BSP/socket.c  **** #endif
 3256              		.loc 1 923 21 view .LVU954
 3257 0156 6FF00400 		mvn	r0, #4
 3258 015a 6CE7     		b	.L248
 3259              	.L273:
 3260              		.align	2
 3261              	.L272:
 3262 015c 00000000 		.word	sock_remained_size
 3263 0160 00000000 		.word	sock_pack_info
 3264              		.cfi_endproc
 3265              	.LFE11:
 3267              		.global	sock_pack_info
 3268              		.section	.bss.sock_pack_info,"aw",%nobits
 3269              		.align	2
 3272              	sock_pack_info:
 3273 0000 00000000 		.space	8
 3273      00000000 
 3274              		.section	.bss.sock_remained_size,"aw",%nobits
 3275              		.align	2
 3278              	sock_remained_size:
 3279 0000 00000000 		.space	16
 3279      00000000 
 3279      00000000 
 3279      00000000 
 3280              		.section	.bss.sock_is_sending,"aw",%nobits
 3281              		.align	1
 3284              	sock_is_sending:
 3285 0000 0000     		.space	2
 3286              		.section	.bss.sock_io_mode,"aw",%nobits
 3287              		.align	1
 3290              	sock_io_mode:
 3291 0000 0000     		.space	2
 3292              		.section	.data.sock_any_port,"aw"
 3293              		.align	1
 3296              	sock_any_port:
 3297 0000 00C0     		.short	-16384
 3298              		.text
 3299              	.Letext0:
 3300              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 3301              		.file 3 "BSP/socket.h"
 3302              		.file 4 "BSP/W5500/w5500.h"
ARM GAS  /tmp/ccClG7BW.s 			page 85


DEFINED SYMBOLS
                            *ABS*:00000000 socket.c
     /tmp/ccClG7BW.s:19     .text.close:00000000 $t
     /tmp/ccClG7BW.s:25     .text.close:00000000 close
     /tmp/ccClG7BW.s:121    .text.close:00000068 $d
     /tmp/ccClG7BW.s:3290   .bss.sock_io_mode:00000000 sock_io_mode
     /tmp/ccClG7BW.s:3284   .bss.sock_is_sending:00000000 sock_is_sending
     /tmp/ccClG7BW.s:3278   .bss.sock_remained_size:00000000 sock_remained_size
     /tmp/ccClG7BW.s:3272   .bss.sock_pack_info:00000000 sock_pack_info
     /tmp/ccClG7BW.s:129    .text.socket:00000000 $t
     /tmp/ccClG7BW.s:135    .text.socket:00000000 socket
     /tmp/ccClG7BW.s:425    .text.socket:0000014c $d
     /tmp/ccClG7BW.s:3296   .data.sock_any_port:00000000 sock_any_port
     /tmp/ccClG7BW.s:434    .text.listen:00000000 $t
     /tmp/ccClG7BW.s:440    .text.listen:00000000 listen
     /tmp/ccClG7BW.s:558    .text.connect:00000000 $t
     /tmp/ccClG7BW.s:564    .text.connect:00000000 connect
     /tmp/ccClG7BW.s:793    .text.connect:000000f8 $d
     /tmp/ccClG7BW.s:798    .text.disconnect:00000000 $t
     /tmp/ccClG7BW.s:804    .text.disconnect:00000000 disconnect
     /tmp/ccClG7BW.s:935    .text.disconnect:00000088 $d
     /tmp/ccClG7BW.s:941    .text.send:00000000 $t
     /tmp/ccClG7BW.s:947    .text.send:00000000 send
     /tmp/ccClG7BW.s:1234   .text.send:0000011c $d
     /tmp/ccClG7BW.s:1240   .text.recv:00000000 $t
     /tmp/ccClG7BW.s:1246   .text.recv:00000000 recv
     /tmp/ccClG7BW.s:1472   .text.recv:000000d8 $d
     /tmp/ccClG7BW.s:1477   .text.sendto:00000000 $t
     /tmp/ccClG7BW.s:1483   .text.sendto:00000000 sendto
     /tmp/ccClG7BW.s:1788   .text.sendto:0000015c $d
     /tmp/ccClG7BW.s:1793   .text.recvfrom:00000000 $t
     /tmp/ccClG7BW.s:1799   .text.recvfrom:00000000 recvfrom
     /tmp/ccClG7BW.s:2324   .text.recvfrom:00000288 $d
     /tmp/ccClG7BW.s:2331   .text.ctlsocket:00000000 $t
     /tmp/ccClG7BW.s:2337   .text.ctlsocket:00000000 ctlsocket
     /tmp/ccClG7BW.s:2363   .text.ctlsocket:00000010 $d
     /tmp/ccClG7BW.s:2371   .text.ctlsocket:00000018 $t
     /tmp/ccClG7BW.s:2620   .text.ctlsocket:0000010c $d
     /tmp/ccClG7BW.s:2625   .text.setsockopt:00000000 $t
     /tmp/ccClG7BW.s:2631   .text.setsockopt:00000000 setsockopt
     /tmp/ccClG7BW.s:2661   .text.setsockopt:00000016 $d
     /tmp/ccClG7BW.s:2907   .text.getsockopt:00000000 $t
     /tmp/ccClG7BW.s:2913   .text.getsockopt:00000000 getsockopt
     /tmp/ccClG7BW.s:2941   .text.getsockopt:00000016 $d
     /tmp/ccClG7BW.s:3262   .text.getsockopt:0000015c $d
     /tmp/ccClG7BW.s:3269   .bss.sock_pack_info:00000000 $d
     /tmp/ccClG7BW.s:3275   .bss.sock_remained_size:00000000 $d
     /tmp/ccClG7BW.s:3281   .bss.sock_is_sending:00000000 $d
     /tmp/ccClG7BW.s:3287   .bss.sock_io_mode:00000000 $d
     /tmp/ccClG7BW.s:3293   .data.sock_any_port:00000000 $d
     /tmp/ccClG7BW.s:2668   .text.setsockopt:0000001d $d
     /tmp/ccClG7BW.s:2668   .text.setsockopt:0000001e $t
     /tmp/ccClG7BW.s:2954   .text.getsockopt:00000023 $d
     /tmp/ccClG7BW.s:2954   .text.getsockopt:00000024 $t

UNDEFINED SYMBOLS
WIZCHIP_WRITE
ARM GAS  /tmp/ccClG7BW.s 			page 86


WIZCHIP_READ
WIZCHIP_READ_BUF
WIZCHIP_WRITE_BUF
getSn_TX_FSR
wiz_send_data
getSn_RX_RSR
wiz_recv_data
wiz_recv_ignore
